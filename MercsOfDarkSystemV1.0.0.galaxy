//==================================================================================================
// 
// Generated Map Script
// 
// Name:   Mercs of Dark System "ALPHA"
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "TriggerLibs/LibertyLib"
include "TriggerLibs/SwarmCampaignLib"
include "TriggerLibs/VoidCampaignUILib"
include "ai8A707DC8"
include "aiE7011116"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libLbty_InitLib();
    libSwaC_InitLib();
    libVCUI_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_equipRows = 1;
const int gv_equipColumns = 6;
const int gv_cGapSizeVertEquipable = 10;
const int gv_cGapSizeHorzEquipable = 10;
const int gv_cItemImageSize = 50;
const int gv_cSlotImageSize = 75;
const int gv_cGapSizeVertical2 = 10;
const int gv_cGapSizeHorizental2 = 10;
const int gv_cofColumnsButtons = 5;
const int gv_cofRowsButtons = 5;
const int gv_cImageSize = 76;
const int gv_cButtonSize = 100;
const int gv_cGapSizeVertical = 10;
const int gv_cGapSizeHorizental = 60;
const int gv_cofColumns = 3;
const int gv_cofRows = 10;
const int gv_oPT_IN_BUTTON_SIZE = 145;
const int gv_oPT_IN_BUTTON_SIZE_BORDER = 150;
const int gv_vOTE_BUTTON_SIZE_BORDER = 105;
const int gv_vOTE_BUTTON_SIZE = 100;
const int gv_vOTE_BUTTON_SPACEING_HORIZONTAL = 10;
const int gv_vOTE_BUTTON_SPACEING_VERTICAL = 40;
const int gv_vOTE_TICK_IMAGE_SIZE = 0;
const int gv_vOTE_TICK_IMAGE_SPACEING = 0;
const int gv_cAdminHeaderHeight = 48;
const int gv_cAdminRowGap = 2;
const int gv_nAdminColumns = 3;
const int gv_cAdminDialogBorder = 100;
const int gv_cAdminButtonSize = 84;
const int gv_cAdminIconSize = 76;
const int gv_cAdminButtonGap = 4;

//--------------------------------------------------------------------------------------------------
// Global Structures
//--------------------------------------------------------------------------------------------------
struct gs_AdminButtonRecord {
    text lv_adminTooltip;
    string lv_adminImage;
};

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
playergroup gv_activeHumanPlayers;
int[16] gv_armyKillsAmount;
int gv_mainLeaderboard;
int[16] gv_heroKillsAmount;
int[16] gv_deathCountofHero;
int[16] gv_heroTerrazine;
int[16] gv_heroRespawnTimer;
playergroup gv_activePlayersT1;
playergroup gv_activePlayersT2;
playergroup[2] gv_setTeam;
camerainfo[2][6] gv_selectionCameras;
int[12] gv_usedCamera;
bool[13] gv_cameraT1P1;
bool[13] gv_cameraT1P2;
bool[13] gv_cameraT1P3;
bool[13] gv_cameraT1P4;
bool[13] gv_cameraT1P5;
bool[13] gv_cameraT1P6;
bool[13] gv_cameraT2P1;
bool[13] gv_cameraT2P2;
bool[13] gv_cameraT2P3;
bool[13] gv_cameraT2P4;
bool[13] gv_cameraT2P5;
bool[13] gv_cameraT2P6;
revealer gv_mapRevealer;
region[13] gv_playerSpawn;
timer gv_selectionTimer;
int gv_timerwindow;
string[8] gv_randomHero;
bool[12] gv_clickedherobuttons;
int gv_inventory;
int gv_shop;
int gv_stats;
bool[12] gv_openCloseBool;
bool[13][26] gv_bagOneSlotEmpty;
bool[13][26] gv_bagTwoSlotEmpty;
bool[13][26] gv_bagThreeSlotEmpty;
unit[13][12] gv_itemList;
bool[13][7] gv_equippableSlotFilled;
int gv_equipableSizeHorz;
int gv_equipableSizeVert;
int[2][7] gv_itemsEquipedButton;
int[2][7] gv_itemsEquipedImage;
int[3][2] gv_selectedBags;
int[3][2] gv_selectedBagsImages;
int gv_bagButtonSizeHorz;
int gv_bagButtonSizeVert;
int[6][6] gv_bagOneSlots;
int[6][6] gv_bagOneImageSlots;
int[6][6] gv_bagTwoImageSlots;
int[6][6] gv_bagThreeImageSlots;
int[6][6] gv_bagTwoSlots;
int[6][6] gv_bagThreeSlots;
int gv_inventorySlots;
int gv_inventoryMainPanel;
int gv_inventoryOpenCloseContainer;
int gv_inventoryOpenButton;
int gv_inventoryCloseButton;
int gv_cSpaceingSize;
int gv_amountOfHeroButtons;
int gv_place;
int gv_bottomMiddleOptInLeft;
int gv_bottomMiddleLeftLabel;
int gv_bottomMiddleVoteRight;
int gv_bottomOptInCommandButton;
int gv_bottomOptInCommandImage;
int[31] gv_selectionButtons;
int gv_leftPanel;
int gv_rightToppanel;
int gv_rightBottompanel;
int gv_bottomMiddlepanel;
int gv_topMiddlePanel;
int gv_topLeftMiddlePanel;
int gv_topRightMiddlePanel;
int gv_bottomMiddlebuttonReady;
int gv_topMiddleRightButton;
int gv_topMiddleButton;
int gv_topMiddleLeftButton;
int gv_bottomMiddleCancelReadyButton;
int gv_cBorderSize;
bool gv_scrollbarShow;
int[13] gv_scrollbarState;
int gv_descriptionScrollBar;
int[6] gv_playerVoteNum;
int gv_terranVote;
int gv_terranDecal;
int gv_protossVote;
int gv_protossDecal;
int gv_zergVote;
int gv_zergDecal;
int gv_zealotclassbutton;
int gv_sentryclassbutton;
int gv_highTemplarclassbutton;
int gv_stalkerclassbutton;
int gv_archonclassbutton;
int gv_darkTemplarclassbutton;
int gv_immortalclassbutton;
int gv_shadowKnightclassbutton;
int gv_primeConstructorclassbutton;
int gv_preserverclassbutton;
int gv_marineclassbutton;
int gv_maraudarclassbutton;
int gv_medicclassbutton;
int gv_firebatclassbutton;
int gv_ghostclassbutton;
int gv_reaperclassbutton;
int gv_commandoclassbutton;
int gv_engineerclassbutton;
int gv_devastatorclassbutton;
int gv_scientistclassbutton;
int gv_zerglingclassbutton;
int gv_hydraclassbutton;
int gv_changelingclassbutton;
int gv_broodMotherclassbutton;
int gv_pygaliskclassbutton;
int gv_roachclassbutton;
int gv_primalKingclassbutton;
int gv_infestedclassbutton;
int gv_ravagerclassbutton;
int gv_lurkerclassbutton;
int[9] gv_abilImages;
int gv_portraitHolders;
int gv_textHolders;
region[4] gv_spawn;
region[4] gv_shopSpawn;
region[4] gv_heroSpawn;
int[13] gv_oldButton;
int gv_readyCheckCount;
bool[12] gv_playerReadyTrueFalse;
unit[12] gv_playerUnits;
int[13] gv_autoRespawnDialog;
int[13] gv_respawnDialog;
unitgroup[2] gv_disableAIGroup;
unit[2] gv_unitInCommand;
int[2] gv_isinCommand;
int[2] gv_supplyMade;
int[2] gv_supplyUsed;
int[2] gv_supplyLimit;
int[2] gv_sharedResourcesT1;
int[2] gv_sharedResourcesT2;
bool[2] gv_teamReveal;
bank gv_darkSystemBank;
bool gv_team1Revealed;
bool gv_team2Revealed;
string gv_craig1;
string gv_craig2;
string gv_craig3;
string gv_aleksei;
string gv_ryan;
bool gv_kickPlayerActive;
gs_AdminButtonRecord[31] gv_adminButtons;
int gv_adminDialogExtra;
int gv_adminDialog;
int gv_cAdminButtonInlay;
int gv_nAdminButtons;
int[5] gv_adminSelectionButtons;
fixed gv_scrollingCombat;
fixed gv_scrollingCombat2;
int[13] gv_terrazineArmyUnitsSCT;
int[13] gv_terrazineHeroUnitsSCT;
unitgroup[18] gv_jungleCampGroup;
region[18] gv_jungleCampRegion;

void InitGlobals () {
    int init_i;
    int init_j;

    gv_activeHumanPlayers = PlayerGroupEmpty();
    gv_mainLeaderboard = c_boardNone;
    gv_activePlayersT1 = PlayerGroupEmpty();
    gv_activePlayersT2 = PlayerGroupEmpty();
    for (init_i = 0; init_i <= 1; init_i += 1) {
        gv_setTeam[init_i] = PlayerGroupEmpty();
    }
    gv_selectionTimer = TimerCreate();
    gv_timerwindow = c_timerWindowNone;
    gv_inventory = c_invalidDialogControlId;
    gv_shop = c_invalidDialogControlId;
    gv_stats = c_invalidDialogControlId;
    gv_equipableSizeHorz = 76;
    gv_equipableSizeVert = 76;
    for (init_i = 0; init_i <= 1; init_i += 1) {
        for (init_j = 0; init_j <= 6; init_j += 1) {
            gv_itemsEquipedButton[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 1; init_i += 1) {
        for (init_j = 0; init_j <= 6; init_j += 1) {
            gv_itemsEquipedImage[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        for (init_j = 0; init_j <= 1; init_j += 1) {
            gv_selectedBags[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        for (init_j = 0; init_j <= 1; init_j += 1) {
            gv_selectedBagsImages[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    gv_bagButtonSizeHorz = 65;
    gv_bagButtonSizeVert = 75;
    for (init_i = 0; init_i <= 5; init_i += 1) {
        for (init_j = 0; init_j <= 5; init_j += 1) {
            gv_bagOneSlots[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 5; init_i += 1) {
        for (init_j = 0; init_j <= 5; init_j += 1) {
            gv_bagOneImageSlots[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 5; init_i += 1) {
        for (init_j = 0; init_j <= 5; init_j += 1) {
            gv_bagTwoImageSlots[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 5; init_i += 1) {
        for (init_j = 0; init_j <= 5; init_j += 1) {
            gv_bagThreeImageSlots[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 5; init_i += 1) {
        for (init_j = 0; init_j <= 5; init_j += 1) {
            gv_bagTwoSlots[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 5; init_i += 1) {
        for (init_j = 0; init_j <= 5; init_j += 1) {
            gv_bagThreeSlots[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    gv_inventorySlots = c_invalidDialogControlId;
    gv_inventoryMainPanel = c_invalidDialogId;
    gv_inventoryOpenCloseContainer = c_invalidDialogId;
    gv_inventoryOpenButton = c_invalidDialogControlId;
    gv_inventoryCloseButton = c_invalidDialogControlId;
    gv_cSpaceingSize = ((gv_cSlotImageSize - gv_cItemImageSize) / 2);
    gv_amountOfHeroButtons = 30;
    gv_bottomMiddleOptInLeft = c_invalidDialogId;
    gv_bottomMiddleLeftLabel = c_invalidDialogControlId;
    gv_bottomMiddleVoteRight = c_invalidDialogId;
    gv_bottomOptInCommandButton = c_invalidDialogControlId;
    gv_bottomOptInCommandImage = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 30; init_i += 1) {
        gv_selectionButtons[init_i] = c_invalidDialogControlId;
    }
    gv_leftPanel = c_invalidDialogId;
    gv_rightToppanel = c_invalidDialogId;
    gv_rightBottompanel = c_invalidDialogId;
    gv_bottomMiddlepanel = c_invalidDialogId;
    gv_topMiddlePanel = c_invalidDialogId;
    gv_topLeftMiddlePanel = c_invalidDialogId;
    gv_topRightMiddlePanel = c_invalidDialogId;
    gv_bottomMiddlebuttonReady = c_invalidDialogControlId;
    gv_topMiddleRightButton = c_invalidDialogControlId;
    gv_topMiddleButton = c_invalidDialogControlId;
    gv_topMiddleLeftButton = c_invalidDialogControlId;
    gv_bottomMiddleCancelReadyButton = c_invalidDialogControlId;
    gv_cBorderSize = ((gv_cButtonSize - gv_cImageSize) / 2);
    gv_descriptionScrollBar = c_invalidDialogControlId;
    gv_terranVote = c_invalidDialogControlId;
    gv_terranDecal = c_invalidDialogControlId;
    gv_protossVote = c_invalidDialogControlId;
    gv_protossDecal = c_invalidDialogControlId;
    gv_zergVote = c_invalidDialogControlId;
    gv_zergDecal = c_invalidDialogControlId;
    gv_zealotclassbutton = c_invalidDialogControlId;
    gv_sentryclassbutton = c_invalidDialogControlId;
    gv_highTemplarclassbutton = c_invalidDialogControlId;
    gv_stalkerclassbutton = c_invalidDialogControlId;
    gv_archonclassbutton = c_invalidDialogControlId;
    gv_darkTemplarclassbutton = c_invalidDialogControlId;
    gv_immortalclassbutton = c_invalidDialogControlId;
    gv_shadowKnightclassbutton = c_invalidDialogControlId;
    gv_primeConstructorclassbutton = c_invalidDialogControlId;
    gv_preserverclassbutton = c_invalidDialogControlId;
    gv_marineclassbutton = c_invalidDialogControlId;
    gv_maraudarclassbutton = c_invalidDialogControlId;
    gv_medicclassbutton = c_invalidDialogControlId;
    gv_firebatclassbutton = c_invalidDialogControlId;
    gv_ghostclassbutton = c_invalidDialogControlId;
    gv_reaperclassbutton = c_invalidDialogControlId;
    gv_commandoclassbutton = c_invalidDialogControlId;
    gv_engineerclassbutton = c_invalidDialogControlId;
    gv_devastatorclassbutton = c_invalidDialogControlId;
    gv_scientistclassbutton = c_invalidDialogControlId;
    gv_zerglingclassbutton = c_invalidDialogControlId;
    gv_hydraclassbutton = c_invalidDialogControlId;
    gv_changelingclassbutton = c_invalidDialogControlId;
    gv_broodMotherclassbutton = c_invalidDialogControlId;
    gv_pygaliskclassbutton = c_invalidDialogControlId;
    gv_roachclassbutton = c_invalidDialogControlId;
    gv_primalKingclassbutton = c_invalidDialogControlId;
    gv_infestedclassbutton = c_invalidDialogControlId;
    gv_ravagerclassbutton = c_invalidDialogControlId;
    gv_lurkerclassbutton = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_abilImages[init_i] = c_invalidDialogControlId;
    }
    gv_portraitHolders = c_invalidDialogControlId;
    gv_textHolders = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 12; init_i += 1) {
        gv_oldButton[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 12; init_i += 1) {
        gv_autoRespawnDialog[init_i] = c_invalidDialogId;
    }
    for (init_i = 0; init_i <= 12; init_i += 1) {
        gv_respawnDialog[init_i] = c_invalidDialogId;
    }
    for (init_i = 0; init_i <= 1; init_i += 1) {
        gv_disableAIGroup[init_i] = UnitGroupEmpty();
    }
    gv_craig1 = "1-S2-1-639982";
    gv_craig2 = "1-S2-1-1806619";
    gv_craig3 = "1-S2-1-2660902";
    gv_aleksei = "1-S2-1-2797507";
    gv_ryan = "1-S2-1-853820";
    gv_adminDialogExtra = (gv_cAdminDialogBorder * 2);
    gv_adminDialog = c_invalidDialogId;
    gv_cAdminButtonInlay = (gv_cAdminButtonSize + (1 * -80));
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_adminSelectionButtons[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 17; init_i += 1) {
        gv_jungleCampGroup[init_i] = UnitGroupEmpty();
    }
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
void gf_AdminDialogCreate ();
void gf_AdminButtonsCreate ();
void gf_AdminsButtonsSet (text lp_adminTooltip, string lp_adminImage);

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_DynamicButtons;
trigger gt_HeroAI;
trigger gt_HideUIShowRevealer;
trigger gt_MercTerraGainforMin;
trigger gt_MercTerraGainforGas;
trigger gt_LeaderboardStart;
trigger gt_ArmyKills;
trigger gt_HeroKills;
trigger gt_HeroDeathCount;
trigger gt_HeroTerrazine;
trigger gt_MercTerraChange;
trigger gt_Tips;
trigger gt_MergeShareControl;
trigger gt_UnloadfromDominatedunit;
trigger gt_ShadowPounce;
trigger gt_Dispersiondamagedealt;
trigger gt_UnloadallT1;
trigger gt_UnloadallT2;
trigger gt_SetCamerasandRegions;
trigger gt_SetCamerasandTeams;
trigger gt_ChangeCamera;
trigger gt_StartTimerStart;
trigger gt_SetHeroRandom;
trigger gt_TimerExpire;
trigger gt_CreateInventory;
trigger gt_OpenInventory;
trigger gt_LinkToInventoryGainItem;
trigger gt_LinkToInventoryMoveItem;
trigger gt_LinkToInventoryDrops;
trigger gt_CreateMainDialog;
trigger gt_CreateButtons;
trigger gt_scrollTrigger;
trigger gt_Scrollbar;
trigger gt_PopulateVoteDialog;
trigger gt_HeroShowDescription;
trigger gt_CreateHeroPotraits;
trigger gt_CreateHeroAbilities;
trigger gt_HeroButtonPressed;
trigger gt_DisplayNotReadyPlayers;
trigger gt_ReadyCheckedCount;
trigger gt_CancelReadyCount;
trigger gt_PlayerLeavesGame;
trigger gt_PlayersReady;
trigger gt_HeroGlowForIllusions;
trigger gt_UnitEntersRespawn;
trigger gt_UnitLeavesCharacterSelection;
trigger gt_UnitEntersSpawn;
trigger gt_UnitLeavesSpawn;
trigger gt_HeroDeathRespawn;
trigger gt_HeroSelectsSpawnLocation;
trigger gt_RecallFromTheVoid;
trigger gt_MedbotsRevive;
trigger gt_DeathinCommand;
trigger gt_TakeCommand;
trigger gt_LeaveCommand;
trigger gt_CountPlayersthatLeft;
trigger gt_RevealTeams;
trigger gt_UnReavelTeams;
trigger gt_Team1Win;
trigger gt_Team2Win;
trigger gt_WinsBank;
trigger gt_DisplayStatus;
trigger gt_ActivateKickPlayer;
trigger gt_UseKickPlayer;
trigger gt_OpenWindow;
trigger gt_CreateDialog;
trigger gt_AddUnits;
trigger gt_ScrollingCombatText;
trigger gt_GiveTerrazine;
trigger gt_HeroCurrency;
trigger gt_UgradesFinished;
trigger gt_ItemCombos;
trigger gt_JungleSpawn;
trigger gt_StatueInitialization;
trigger gt_JungleRespawn;
trigger gt_JungleMoveBack;
trigger gt_JungleMoveBackifAttackerDead;
trigger gt_MakeJungleGroupAttack;
trigger gt_TransfereBuff;

//--------------------------------------------------------------------------------------------------
// Custom AI Functions
//--------------------------------------------------------------------------------------------------
string[17] cai_playerAI;

//--------------------------------------------------------------------------------------------------
void InitCustomAI () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        cai_playerAI[init_i] = null;
    }
}

//--------------------------------------------------------------------------------------------------
void cai_start (string ai, int p) {
    if (p < 0 || p >= 16) {
        return;
    }
    cai_playerAI[p] = ai;

    if (cai_playerAI[p] == "ai8A707DC8") { ai8A707DC8_start(p); }
    if (cai_playerAI[p] == "aiE7011116") { aiE7011116_start(p); }
}

//--------------------------------------------------------------------------------------------------
void cai_setDefGather (int p, point val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai8A707DC8") { ai8A707DC8_setDefGather(p, val); }
    if (cai_playerAI[p] == "aiE7011116") { aiE7011116_setDefGather(p, val); }
}

//--------------------------------------------------------------------------------------------------
string cai_getCustomData (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "ai8A707DC8") { return ai8A707DC8_getCustomData(p); }
    if (cai_playerAI[p] == "aiE7011116") { return aiE7011116_getCustomData(p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
wave cai_getLastWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "ai8A707DC8") { return ai8A707DC8_getLastWave(p); }
    if (cai_playerAI[p] == "aiE7011116") { return aiE7011116_getLastWave(p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
void cai_waves_run (int p, playergroup target) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai8A707DC8") { ai8A707DC8_waves_run(p, target); }
    if (cai_playerAI[p] == "aiE7011116") { aiE7011116_waves_run(p, target); }
}

//--------------------------------------------------------------------------------------------------
void cai_waves_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai8A707DC8") { ai8A707DC8_waves_enable(p, val); }
    if (cai_playerAI[p] == "aiE7011116") { aiE7011116_waves_enable(p, val); }
}

//--------------------------------------------------------------------------------------------------
void cai_waves_stop (string ai) {
    if (ai == "ai8A707DC8") { ai8A707DC8_waves_stop(); }
    if (ai == "aiE7011116") { aiE7011116_waves_stop(); }
}

//--------------------------------------------------------------------------------------------------
void cai_wave_run (int w, int p, playergroup target, bool wait) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai8A707DC8") { ai8A707DC8_wave_run(w, p, target, wait); }
    if (cai_playerAI[p] == "aiE7011116") { aiE7011116_wave_run(w, p, target, wait); }
}

//--------------------------------------------------------------------------------------------------
void cai_wave_enable (int w, int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai8A707DC8") { ai8A707DC8_wave_enable(w, p, val); }
    if (cai_playerAI[p] == "aiE7011116") { aiE7011116_wave_enable(w, p, val); }
}

//--------------------------------------------------------------------------------------------------
bool cai_wave_isEnabled (int w, int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    if (cai_playerAI[p] == "ai8A707DC8") { return ai8A707DC8_wave_isEnabled(w, p); }
    if (cai_playerAI[p] == "aiE7011116") { return aiE7011116_wave_isEnabled(w, p); }
    return false;
}

//--------------------------------------------------------------------------------------------------
unitgroup cai_wave_createdUnits (int w, int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "ai8A707DC8") { return ai8A707DC8_wave_createdUnits(w, p); }
    if (cai_playerAI[p] == "aiE7011116") { return aiE7011116_wave_createdUnits(w, p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
wave cai_wave_createdWave (int w, int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "ai8A707DC8") { return ai8A707DC8_wave_createdWave(w, p); }
    if (cai_playerAI[p] == "aiE7011116") { return aiE7011116_wave_createdWave(w, p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
void cai_startall () {
    cai_start("ai8A707DC8", 13);
    cai_start("aiE7011116", 14);
}

//--------------------------------------------------------------------------------------------------
void cai_runall () {
    playergroup target = PlayerGroupEmpty();

    PlayerGroupClear(target);
    PlayerGroupAdd(target, 13);
    cai_waves_run(13, target);

    PlayerGroupClear(target);
    PlayerGroupAdd(target, 14);
    cai_waves_run(14, target);
}

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
void gf_AdminDialogCreate () {
    // Variable Declarations
    int lv_nRows;
    int lv_dialogWidth;
    int lv_dialogHeight;
    int lv_x;
    int lv_y;
    int lv_iRows;
    int lv_iCol;
    int lv_iButton;
    int lv_headerWidth;

    // Automatic Variable Declarations
    int auto724881E2_ae;
    const int auto724881E2_ai = 1;
    const int auto897A44DE_ae = gv_nAdminColumns;
    const int auto897A44DE_ai = 1;

    // Variable Initialization
    lv_nRows = CeilingI(AbsF(IntToFixed((gv_nAdminButtons / (gv_nAdminColumns)))));
    lv_dialogWidth = (gv_adminDialogExtra + (gv_cAdminButtonSize * gv_nAdminColumns) + (gv_cAdminButtonGap * (gv_nAdminColumns - 1)));
    lv_dialogHeight = (gv_adminDialogExtra + (gv_cAdminButtonSize * lv_nRows) + (gv_cAdminButtonGap * (lv_nRows - 1)) + gv_cAdminHeaderHeight + gv_cAdminRowGap);
    lv_x = gv_cAdminDialogBorder;
    lv_y = (gv_cAdminDialogBorder);
    lv_headerWidth = (lv_dialogWidth - gv_adminDialogExtra);

    // Implementation
    DialogCreate(lv_dialogWidth, lv_dialogHeight, c_anchorBottom, 0, 135, true);
    gv_adminDialog = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    auto724881E2_ae = lv_nRows;
    lv_iRows = 1;
    for ( ; ( (auto724881E2_ai >= 0 && lv_iRows <= auto724881E2_ae) || (auto724881E2_ai < 0 && lv_iRows >= auto724881E2_ae) ) ; lv_iRows += auto724881E2_ai ) {
        lv_x = gv_cAdminDialogBorder;
        lv_iCol = 1;
        for ( ; ( (auto897A44DE_ai >= 0 && lv_iCol <= auto897A44DE_ae) || (auto897A44DE_ai < 0 && lv_iCol >= auto897A44DE_ae) ) ; lv_iCol += auto897A44DE_ai ) {
            if ((lv_iButton < gv_nAdminButtons)) {
                libNtve_gf_CreateDialogItemButton(DialogLastCreated(), gv_cAdminButtonSize, gv_cAdminButtonSize, c_anchorTopLeft, lv_x, lv_y, gv_adminButtons[lv_iButton].lv_adminTooltip, StringToText(""), "");
                gv_adminSelectionButtons[lv_iButton] = DialogControlLastCreated();
                libNtve_gf_CreateDialogItemImage(DialogLastCreated(), gv_cAdminIconSize, gv_cAdminIconSize, c_anchorTopLeft, (lv_x + gv_cAdminButtonInlay), (lv_y + gv_cAdminButtonInlay), StringToText(""), gv_adminButtons[lv_iButton].lv_adminImage, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
            }

            lv_x += (gv_cAdminButtonSize + gv_cAdminButtonGap);
            lv_iButton += 1;
        }
        lv_y += (gv_cAdminButtonSize + gv_cAdminButtonGap);
    }
}

void gf_AdminButtonsCreate () {
    // Automatic Variable Declarations
    // Implementation
    gf_AdminsButtonsSet(StringExternal("Param/Value/02C3C447"), "Assets\\Textures\\btn-tips-researchunlocked.dds");
    gf_AdminsButtonsSet(StringExternal("Param/Value/323C1AC1"), "Assets\\Textures\\btn-tips-mercenarycontract.dds");
    gf_AdminsButtonsSet(StringExternal("Param/Value/95A47F38"), "Assets\\Textures\\btn-tips-battlereport.dds");
}

void gf_AdminsButtonsSet (text lp_adminTooltip, string lp_adminImage) {
    // Automatic Variable Declarations
    // Implementation
    gv_adminButtons[gv_nAdminButtons].lv_adminTooltip = lp_adminTooltip;
    gv_adminButtons[gv_nAdminButtons].lv_adminImage = lp_adminImage;
    gv_nAdminButtons += 1;
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dynamic Buttons
//--------------------------------------------------------------------------------------------------
bool gt_DynamicButtons_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_critStackCount;
    fixed lv_critStackScaled;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_critStackCount = UnitBehaviorCount(EventUnit(), "MobilityCritMobile");

    // Conditions
    if (testConds) {
        if (!((EventUnitBehavior() == "MobilityCritMobile"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeHeroic) == true) && (lv_critStackCount > 0.0)) {
        lv_critStackCount += 1.0;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DynamicButtons_Init () {
    gt_DynamicButtons = TriggerCreate("gt_DynamicButtons_Func");
    TriggerEnable(gt_DynamicButtons, false);
    TriggerAddEventUnitAttributeChange(gt_DynamicButtons, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero AI
//--------------------------------------------------------------------------------------------------
bool gt_HeroAI_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_a;
    int lv_c;
    int lv_place;

    // Automatic Variable Declarations
    const int auto7189D84B_ae = 1;
    const int auto7189D84B_ai = 1;
    const int auto2A53CFAD_ae = 6;
    const int auto2A53CFAD_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_c = 0;
    for ( ; ( (auto7189D84B_ai >= 0 && lv_c <= auto7189D84B_ae) || (auto7189D84B_ai < 0 && lv_c >= auto7189D84B_ae) ) ; lv_c += auto7189D84B_ai ) {
        lv_a = 1;
        for ( ; ( (auto2A53CFAD_ai >= 0 && lv_a <= auto2A53CFAD_ae) || (auto2A53CFAD_ai < 0 && lv_a >= auto2A53CFAD_ae) ) ; lv_a += auto2A53CFAD_ai ) {
            if ((PlayerType(((6 * lv_c) + lv_a)) == c_playerTypeComputer)) {
                if ((lv_c == 0)) {
                    lv_place = lv_a;
                    Wait(0.1, c_timeGame);
                    UnitCreate(1, gv_randomHero[RandomInt(0, 7)], c_unitCreateIgnorePlacement, lv_a, RegionGetCenter(gv_playerSpawn[lv_place]), (270.0 + (60.0 * lv_a)));
                    gv_playerReadyTrueFalse[lv_a] = true;
                    gv_playerUnits[lv_a] = UnitLastCreated();
                    AICampaignStart(lv_a);
                    PlayerGroupAdd(GameAttributePlayersForTeam(1), lv_a);
                }
                else {
                    lv_place = (6 + lv_a);
                    Wait(0.1, c_timeGame);
                    UnitCreate(1, gv_randomHero[RandomInt(0, 7)], c_unitCreateIgnorePlacement, (6 + lv_a), RegionGetCenter(gv_playerSpawn[lv_place]), (270.0 + (60.0 * lv_a)));
                    gv_playerReadyTrueFalse[(6 + lv_a)] = true;
                    gv_playerUnits[(6 + lv_a)] = UnitLastCreated();
                    AICampaignStart((6 + lv_a));
                    PlayerGroupAdd(GameAttributePlayersForTeam(2), (6 + lv_a));
                }
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HeroAI_Init () {
    gt_HeroAI = TriggerCreate("gt_HeroAI_Func");
    TriggerEnable(gt_HeroAI, false);
    TriggerAddEventMapInit(gt_HeroAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hide UI & Show Revealer
//--------------------------------------------------------------------------------------------------
bool gt_HideUIShowRevealer_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoBC7CC329_g;
    int autoBC7CC329_var;
    playergroup auto833CBB0E_g;
    int auto833CBB0E_var;

    // Actions
    if (!runActions) {
        return true;
    }

    autoBC7CC329_g = PlayerGroupAll();
    autoBC7CC329_var = -1;
    while (true) {
        autoBC7CC329_var = PlayerGroupNextPlayer(autoBC7CC329_g, autoBC7CC329_var);
        if (autoBC7CC329_var < 0) { break; }
        BankLoad("DarkSystemBank", autoBC7CC329_var);
        gv_darkSystemBank = BankLastCreated();
    }
    UIStatusBarClearOverride(PlayerGroupActive());
    UISetDragSelectEnabled(PlayerGroupActive(), false);
    UISetSelectionTypeEnabled(PlayerGroupActive(), c_localSelectionTypeUnknown, false);
    UISetFrameVisible(PlayerGroupActive(), c_syncFrameTypeMenuBar, false);
    UISetFrameVisible(PlayerGroupActive(), c_syncFrameTypeHeroPanel, false);
    UISetFrameVisible(PlayerGroupActive(), c_syncFrameTypeSupply, false);
    UISetFrameVisible(PlayerGroupActive(), c_syncFrameTypeResourcePanel, false);
    UISetFrameVisible(PlayerGroupActive(), c_syncFrameTypeInfoPanel, false);
    UISetFrameVisible(PlayerGroupActive(), c_syncFrameTypeCommandPanel, false);
    UISetFrameVisible(PlayerGroupActive(), c_syncFrameTypeMinimapPanel, false);
    UISetFrameVisible(PlayerGroupActive(), c_syncFrameTypeConsolePanel, false);
    UISetFrameVisible(PlayerGroupActive(), c_syncFrameTypeIdleWorkerButton, false);
    UISetFrameVisible(PlayerGroupActive(), c_syncFrameTypeArmyButton, false);
    UISetFrameVisible(PlayerGroupActive(), c_syncFrameTypeMissionTimePanel, false);
    UISetFrameVisible(PlayerGroupActive(), c_syncFrameTypeControlGroupPanel, false);
    BoardShowAll(false, PlayerGroupActive());
    UISetResourceTradingAllowed(c_resourceTypeMinerals, false);
    auto833CBB0E_g = PlayerGroupActive();
    auto833CBB0E_var = -1;
    while (true) {
        auto833CBB0E_var = PlayerGroupNextPlayer(auto833CBB0E_g, auto833CBB0E_var);
        if (auto833CBB0E_var < 0) { break; }
        VisRevealerCreate(auto833CBB0E_var, RegionFromId(4));
        gv_mapRevealer = VisRevealerLastCreated();
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HideUIShowRevealer_Init () {
    gt_HideUIShowRevealer = TriggerCreate("gt_HideUIShowRevealer_Func");
    TriggerAddEventMapInit(gt_HideUIShowRevealer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Merc Terra Gain for Min
//--------------------------------------------------------------------------------------------------
bool gt_MercTerraGainforMin_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto0FB32CEC_g;
    int auto0FB32CEC_var;
    playergroup autoC8849C49_g;
    int autoC8849C49_var;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGroupHasPlayer(gv_setTeam[0], EventPlayer()) == true)) {
        auto0FB32CEC_g = GameAttributePlayersForTeam(1);
        auto0FB32CEC_var = -1;
        while (true) {
            auto0FB32CEC_var = PlayerGroupNextPlayer(auto0FB32CEC_g, auto0FB32CEC_var);
            if (auto0FB32CEC_var < 0) { break; }
            if ((auto0FB32CEC_var == gv_isinCommand[0])) {
                PlayerModifyPropertyInt(auto0FB32CEC_var, c_playerPropTerrazine, c_playerPropOperAdd, 2);
            }
            else {
                PlayerModifyPropertyInt(auto0FB32CEC_var, c_playerPropTerrazine, c_playerPropOperAdd, 1);
            }
        }
    }

    if ((PlayerGroupHasPlayer(gv_setTeam[1], EventPlayer()) == true)) {
        autoC8849C49_g = GameAttributePlayersForTeam(2);
        autoC8849C49_var = -1;
        while (true) {
            autoC8849C49_var = PlayerGroupNextPlayer(autoC8849C49_g, autoC8849C49_var);
            if (autoC8849C49_var < 0) { break; }
            if ((autoC8849C49_var == gv_isinCommand[1])) {
                PlayerModifyPropertyInt(autoC8849C49_var, c_playerPropTerrazine, c_playerPropOperAdd, 2);
            }
            else {
                PlayerModifyPropertyInt(autoC8849C49_var, c_playerPropTerrazine, c_playerPropOperAdd, 1);
            }
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MercTerraGainforMin_Init () {
    gt_MercTerraGainforMin = TriggerCreate("gt_MercTerraGainforMin_Func");
    TriggerAddEventPlayerPropChange(gt_MercTerraGainforMin, 1, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_MercTerraGainforMin, 2, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_MercTerraGainforMin, 3, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_MercTerraGainforMin, 4, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_MercTerraGainforMin, 5, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_MercTerraGainforMin, 6, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_MercTerraGainforMin, 7, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_MercTerraGainforMin, 8, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_MercTerraGainforMin, 9, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_MercTerraGainforMin, 10, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_MercTerraGainforMin, 11, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_MercTerraGainforMin, 12, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_MercTerraGainforMin, 13, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_MercTerraGainforMin, 14, c_playerPropMinerals);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Merc Terra Gain for Gas
//--------------------------------------------------------------------------------------------------
bool gt_MercTerraGainforGas_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto32846014_g;
    int auto32846014_var;
    playergroup auto16F35136_g;
    int auto16F35136_var;

    // Actions
    if (!runActions) {
        return true;
    }

    if (((PlayerGroupHasPlayer(gv_setTeam[0], EventPlayer()) == true) && (EventPlayer() == gv_isinCommand[0]))) {
        auto32846014_g = GameAttributePlayersForTeam(1);
        auto32846014_var = -1;
        while (true) {
            auto32846014_var = PlayerGroupNextPlayer(auto32846014_g, auto32846014_var);
            if (auto32846014_var < 0) { break; }
            if ((auto32846014_var == gv_isinCommand[0])) {
                PlayerModifyPropertyInt(auto32846014_var, c_playerPropTerrazine, c_playerPropOperAdd, 4);
            }
            else {
                PlayerModifyPropertyInt(auto32846014_var, c_playerPropTerrazine, c_playerPropOperAdd, 2);
            }
        }
    }

    if (((PlayerGroupHasPlayer(gv_setTeam[1], EventPlayer()) == true) && (EventPlayer() == gv_isinCommand[1]))) {
        auto16F35136_g = GameAttributePlayersForTeam(2);
        auto16F35136_var = -1;
        while (true) {
            auto16F35136_var = PlayerGroupNextPlayer(auto16F35136_g, auto16F35136_var);
            if (auto16F35136_var < 0) { break; }
            if ((auto16F35136_var == gv_isinCommand[1])) {
                PlayerModifyPropertyInt(auto16F35136_var, c_playerPropTerrazine, c_playerPropOperAdd, 4);
            }
            else {
                PlayerModifyPropertyInt(auto16F35136_var, c_playerPropTerrazine, c_playerPropOperAdd, 2);
            }
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MercTerraGainforGas_Init () {
    gt_MercTerraGainforGas = TriggerCreate("gt_MercTerraGainforGas_Func");
    TriggerAddEventPlayerPropChange(gt_MercTerraGainforGas, 1, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_MercTerraGainforGas, 2, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_MercTerraGainforGas, 3, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_MercTerraGainforGas, 4, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_MercTerraGainforGas, 5, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_MercTerraGainforGas, 6, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_MercTerraGainforGas, 7, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_MercTerraGainforGas, 8, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_MercTerraGainforGas, 9, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_MercTerraGainforGas, 10, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_MercTerraGainforGas, 11, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_MercTerraGainforGas, 12, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_MercTerraGainforGas, 13, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_MercTerraGainforGas, 14, c_playerPropVespene);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Leaderboard Start
//--------------------------------------------------------------------------------------------------
bool gt_LeaderboardStart_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_y;
    int lv_x;
    int lv_i;
    int lv_j;
    int lv_k;
    int lv_l;

    // Automatic Variable Declarations
    int autoBD360179_ae;
    const int autoBD360179_ai = 1;
    playergroup autoE2F497E8_g;
    int autoE2F497E8_var;
    int auto1D3000C3_ae;
    const int auto1D3000C3_ai = 1;
    const int auto63D624E0_ae = 6;
    const int auto63D624E0_ai = 1;
    const int autoF76A21FB_ae = 6;
    const int autoF76A21FB_ai = 1;
    int auto5709C65D_ae;
    const int auto5709C65D_ai = 1;
    const int auto06EF2D60_ae = 2;
    const int auto06EF2D60_ai = 1;
    const int autoC02805E4_ae = 6;
    const int autoC02805E4_ai = 1;
    int autoD62A37D2_ae;
    const int autoD62A37D2_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gv_isinCommand[0] = 13;
    gv_isinCommand[1] = 14;
    PlayerModifyPropertyInt(13, c_playerPropMinerals, c_playerPropOperSetTo, 50);
    PlayerModifyPropertyInt(14, c_playerPropMinerals, c_playerPropOperSetTo, 50);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeTeamResourceButton, false);
    Wait(2.0, c_timeReal);
    autoBD360179_ae = PlayerGroupCount(PlayerGroupActive());
    lv_x = 1;
    for ( ; ( (autoBD360179_ai >= 0 && lv_x <= autoBD360179_ae) || (autoBD360179_ai < 0 && lv_x >= autoBD360179_ae) ) ; lv_x += autoBD360179_ai ) {
        if ((PlayerType(1) == c_playerTypeUser)) {
            PlayerGroupAdd(gv_activeHumanPlayers, lv_x);
        }

    }
    autoE2F497E8_g = gv_activeHumanPlayers;
    autoE2F497E8_var = -1;
    while (true) {
        autoE2F497E8_var = PlayerGroupNextPlayer(autoE2F497E8_g, autoE2F497E8_var);
        if (autoE2F497E8_var < 0) { break; }
        if ((PlayerGroupHasPlayer(gv_setTeam[0], autoE2F497E8_var) == true)) {
            PlayerGroupAdd(gv_activePlayersT1, autoE2F497E8_var);
        }
        else {
            PlayerGroupAdd(gv_activePlayersT2, autoE2F497E8_var);
        }
    }
    auto1D3000C3_ae = PlayerGroupCount(gv_activeHumanPlayers);
    lv_x = 1;
    for ( ; ( (auto1D3000C3_ai >= 0 && lv_x <= auto1D3000C3_ae) || (auto1D3000C3_ai < 0 && lv_x >= auto1D3000C3_ae) ) ; lv_x += auto1D3000C3_ai ) {
        PlayerModifyPropertyInt(lv_x, c_playerPropTerrazine, c_playerPropOperSetTo, 550);
        BoardItemSetText(gv_mainLeaderboard, 5, lv_x, IntToText(PlayerGetPropertyInt(lv_x, c_playerPropTerrazine)));
    }
    BoardCreate(6, PlayerGroupCount(gv_activeHumanPlayers), StringExternal("Param/Value/E43ED9F4"), Color(100.00, 0.00, 0.00));
    gv_mainLeaderboard = BoardLastCreated();
    BoardSetGroupCount(gv_mainLeaderboard, 3);
    lv_i = 1;
    for ( ; ( (auto63D624E0_ai >= 0 && lv_i <= auto63D624E0_ae) || (auto63D624E0_ai < 0 && lv_i >= auto63D624E0_ae) ) ; lv_i += auto63D624E0_ai ) {
        BoardItemSetFontSize(BoardLastCreated(), lv_i, c_boardRowHeader, 16);
        BoardItemSetTextColor(BoardLastCreated(), lv_i, c_boardRowHeader, Color(100.00, 100.00, 0.00));
    }
    lv_x = 1;
    for ( ; ( (autoF76A21FB_ai >= 0 && lv_x <= autoF76A21FB_ae) || (autoF76A21FB_ai < 0 && lv_x >= autoF76A21FB_ae) ) ; lv_x += autoF76A21FB_ai ) {
        auto5709C65D_ae = PlayerGroupCount(gv_activeHumanPlayers);
        lv_y = 1;
        for ( ; ( (auto5709C65D_ai >= 0 && lv_y <= auto5709C65D_ae) || (auto5709C65D_ai < 0 && lv_y >= auto5709C65D_ae) ) ; lv_y += auto5709C65D_ai ) {
            BoardItemSetFontSize(BoardLastCreated(), lv_x, lv_y, 16);
        }
    }
    BoardItemSetText(BoardLastCreated(), 1, c_boardRowHeader, StringExternal("Param/Value/B14DB1C4"));
    BoardItemSetText(BoardLastCreated(), 2, c_boardRowHeader, StringExternal("Param/Value/09E61CFE"));
    BoardItemSetText(BoardLastCreated(), 3, c_boardRowHeader, StringExternal("Param/Value/11B12DF0"));
    BoardItemSetText(BoardLastCreated(), 4, c_boardRowHeader, StringExternal("Param/Value/C9F1C86B"));
    BoardItemSetText(BoardLastCreated(), 5, c_boardRowHeader, StringExternal("Param/Value/9516FEEA"));
    BoardItemSetText(BoardLastCreated(), 6, c_boardRowHeader, StringExternal("Param/Value/86A46BCC"));
    lv_k = 1;
    for ( ; ( (auto06EF2D60_ai >= 0 && lv_k <= auto06EF2D60_ae) || (auto06EF2D60_ai < 0 && lv_k >= auto06EF2D60_ae) ) ; lv_k += auto06EF2D60_ai ) {
        lv_l = 1;
        for ( ; ( (autoC02805E4_ai >= 0 && lv_l <= autoC02805E4_ae) || (autoC02805E4_ai < 0 && lv_l >= autoC02805E4_ae) ) ; lv_l += autoC02805E4_ai ) {
            autoD62A37D2_ae = PlayerGroupCount(gv_activeHumanPlayers);
            lv_j = 1;
            for ( ; ( (autoD62A37D2_ai >= 0 && lv_j <= autoD62A37D2_ae) || (autoD62A37D2_ai < 0 && lv_j >= autoD62A37D2_ae) ) ; lv_j += autoD62A37D2_ai ) {
                if ((PlayerType(lv_j) == c_playerTypeUser) && (PlayerStatus(lv_j) == c_playerStatusActive) && (PlayerGroupHasPlayer(GameAttributePlayersForTeam(lv_k), lv_j) == true)) {
                    BoardItemSetText(gv_mainLeaderboard, 1, lv_j, PlayerName(lv_j));
                    BoardItemSetTextColor(BoardLastCreated(), lv_l, lv_j, libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_j, false)));
                    BoardRowSetGroup(gv_mainLeaderboard, lv_j, lv_k);
                }

            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LeaderboardStart_Init () {
    gt_LeaderboardStart = TriggerCreate("gt_LeaderboardStart_Func");
    TriggerAddEventMapInit(gt_LeaderboardStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Army Kills
//--------------------------------------------------------------------------------------------------
bool gt_ArmyKills_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_y;

    // Automatic Variable Declarations
    int auto056EC021_ae;
    const int auto056EC021_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagHero) == false))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto056EC021_ae = PlayerGroupCount(gv_activeHumanPlayers);
    lv_y = 1;
    for ( ; ( (auto056EC021_ai >= 0 && lv_y <= auto056EC021_ae) || (auto056EC021_ai < 0 && lv_y >= auto056EC021_ae) ) ; lv_y += auto056EC021_ai ) {
        if ((UnitGetOwner(libNtve_gf_KillingUnit()) == lv_y) && (PlayerGroupHasPlayer(gv_activeHumanPlayers, lv_y) == true)) {
            gv_armyKillsAmount[lv_y] += 1;
            BoardItemSetText(gv_mainLeaderboard, 3, lv_y, IntToText(gv_armyKillsAmount[lv_y]));
        }
        else {
            BoardPlayerRemove(BoardLastCreated(), lv_y);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ArmyKills_Init () {
    gt_ArmyKills = TriggerCreate("gt_ArmyKills_Func");
    TriggerAddEventUnitDied(gt_ArmyKills, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Kills
//--------------------------------------------------------------------------------------------------
bool gt_HeroKills_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_x;

    // Automatic Variable Declarations
    int auto9A99B36B_ae;
    const int auto9A99B36B_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagHero) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto9A99B36B_ae = PlayerGroupCount(gv_activeHumanPlayers);
    lv_x = 1;
    for ( ; ( (auto9A99B36B_ai >= 0 && lv_x <= auto9A99B36B_ae) || (auto9A99B36B_ai < 0 && lv_x >= auto9A99B36B_ae) ) ; lv_x += auto9A99B36B_ai ) {
        if ((UnitGetOwner(libNtve_gf_KillingUnit()) == lv_x) && (PlayerGroupHasPlayer(gv_activeHumanPlayers, lv_x) == true)) {
            gv_heroKillsAmount[lv_x] += 1;
            BoardItemSetText(gv_mainLeaderboard, 2, lv_x, IntToText(gv_heroKillsAmount[lv_x]));
        }
        else {
            BoardPlayerRemove(BoardLastCreated(), lv_x);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HeroKills_Init () {
    gt_HeroKills = TriggerCreate("gt_HeroKills_Func");
    TriggerAddEventUnitDied(gt_HeroKills, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Death Count
//--------------------------------------------------------------------------------------------------
bool gt_HeroDeathCount_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_x;

    // Automatic Variable Declarations
    int auto682CA2CD_ae;
    const int auto682CA2CD_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagHero) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto682CA2CD_ae = PlayerGroupCount(gv_activeHumanPlayers);
    lv_x = 1;
    for ( ; ( (auto682CA2CD_ai >= 0 && lv_x <= auto682CA2CD_ae) || (auto682CA2CD_ai < 0 && lv_x >= auto682CA2CD_ae) ) ; lv_x += auto682CA2CD_ai ) {
        if ((UnitGetOwner(EventUnit()) == lv_x) && (PlayerGroupHasPlayer(gv_activeHumanPlayers, lv_x) == true)) {
            gv_deathCountofHero[lv_x] += 1;
            BoardItemSetText(gv_mainLeaderboard, 4, lv_x, IntToText(gv_deathCountofHero[lv_x]));
        }
        else {
            BoardPlayerRemove(BoardLastCreated(), lv_x);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HeroDeathCount_Init () {
    gt_HeroDeathCount = TriggerCreate("gt_HeroDeathCount_Func");
    TriggerAddEventUnitDied(gt_HeroDeathCount, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Terrazine
//--------------------------------------------------------------------------------------------------
bool gt_HeroTerrazine_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_x;
    int lv_terrazineSCT;

    // Automatic Variable Declarations
    int autoE21F52A1_ae;
    const int autoE21F52A1_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoE21F52A1_ae = PlayerGroupCount(gv_activeHumanPlayers);
    lv_x = 1;
    for ( ; ( (autoE21F52A1_ai >= 0 && lv_x <= autoE21F52A1_ae) || (autoE21F52A1_ai < 0 && lv_x >= autoE21F52A1_ae) ) ; lv_x += autoE21F52A1_ai ) {
        if ((UnitGetOwner(libNtve_gf_KillingUnit()) == lv_x) && (PlayerGroupHasPlayer(gv_activeHumanPlayers, lv_x) == true)) {
            BoardItemSetText(gv_mainLeaderboard, 5, lv_x, IntToText(PlayerGetPropertyInt(lv_x, c_playerPropTerrazine)));
        }
        else {
            BoardPlayerRemove(BoardLastCreated(), lv_x);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HeroTerrazine_Init () {
    gt_HeroTerrazine = TriggerCreate("gt_HeroTerrazine_Func");
    TriggerAddEventUnitDied(gt_HeroTerrazine, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Merc Terra Change
//--------------------------------------------------------------------------------------------------
bool gt_MercTerraChange_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_x;

    // Automatic Variable Declarations
    int auto5C81E86B_ae;
    const int auto5C81E86B_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto5C81E86B_ae = PlayerGroupCount(gv_activeHumanPlayers);
    lv_x = 1;
    for ( ; ( (auto5C81E86B_ai >= 0 && lv_x <= auto5C81E86B_ae) || (auto5C81E86B_ai < 0 && lv_x >= auto5C81E86B_ae) ) ; lv_x += auto5C81E86B_ai ) {
        if ((PlayerStatus(lv_x) == c_playerStatusActive)) {
            BoardItemSetText(gv_mainLeaderboard, 5, lv_x, IntToText(PlayerGetPropertyInt(lv_x, c_playerPropTerrazine)));
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MercTerraChange_Init () {
    gt_MercTerraChange = TriggerCreate("gt_MercTerraChange_Func");
    TriggerAddEventPlayerPropChange(gt_MercTerraChange, 1, c_playerPropTerrazine);
    TriggerAddEventPlayerPropChange(gt_MercTerraChange, 2, c_playerPropTerrazine);
    TriggerAddEventPlayerPropChange(gt_MercTerraChange, 3, c_playerPropTerrazine);
    TriggerAddEventPlayerPropChange(gt_MercTerraChange, 4, c_playerPropTerrazine);
    TriggerAddEventPlayerPropChange(gt_MercTerraChange, 5, c_playerPropTerrazine);
    TriggerAddEventPlayerPropChange(gt_MercTerraChange, 6, c_playerPropTerrazine);
    TriggerAddEventPlayerPropChange(gt_MercTerraChange, 7, c_playerPropTerrazine);
    TriggerAddEventPlayerPropChange(gt_MercTerraChange, 8, c_playerPropTerrazine);
    TriggerAddEventPlayerPropChange(gt_MercTerraChange, 9, c_playerPropTerrazine);
    TriggerAddEventPlayerPropChange(gt_MercTerraChange, 10, c_playerPropTerrazine);
    TriggerAddEventPlayerPropChange(gt_MercTerraChange, 11, c_playerPropTerrazine);
    TriggerAddEventPlayerPropChange(gt_MercTerraChange, 12, c_playerPropTerrazine);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tips
//--------------------------------------------------------------------------------------------------
bool gt_Tips_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/1855AE2E"), libNtve_ge_TipType_NormalTip), StringExternal("Param/Value/259A42D2"), StringToText(""), "Assets\\Textures\\btn-tips-tutorial.dds");
    Wait(5.0, c_timeGame);
    HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/8CBD9244"), libNtve_ge_TipType_NewAbility), StringExternal("Param/Value/3622BD65"), StringToText(""), "Assets\\Textures\\btn-tips-tutorial.dds");
    Wait(5.0, c_timeGame);
    HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/39B05123"), libNtve_ge_TipType_NormalTip), StringExternal("Param/Value/A74660BC"), StringToText(""), "Assets\\Textures\\btn-tips-tutorial.dds");
    Wait(5.0, c_timeGame);
    HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/C98884A1"), libNtve_ge_TipType_NormalTip), StringExternal("Param/Value/F213574C"), StringToText(""), "Assets\\Textures\\btn-tips-tutorial.dds");
    Wait(5.0, c_timeGame);
    HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/FC6F3517"), libNtve_ge_TipType_NormalTip), StringExternal("Param/Value/D8103065"), StringToText(""), "Assets\\Textures\\btn-tips-tutorial.dds");
    Wait(5.0, c_timeGame);
    HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/D98B57FD"), libNtve_ge_TipType_NormalTip), StringExternal("Param/Value/7FB3F2E2"), StringToText(""), "Assets\\Textures\\btn-tips-tutorial.dds");
    Wait(5.0, c_timeGame);
    HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/37BBA013"), libNtve_ge_TipType_NormalTip), StringExternal("Param/Value/6B8F385C"), StringToText(""), "Assets\\Textures\\btn-tips-tutorial.dds");
    Wait(5.0, c_timeGame);
    HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/D63FFCD9"), libNtve_ge_TipType_NormalTip), StringExternal("Param/Value/01B17712"), StringToText(""), "Assets\\Textures\\btn-tips-tutorial.dds");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Tips_Init () {
    gt_Tips = TriggerCreate("gt_Tips_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Merge Share Control
//--------------------------------------------------------------------------------------------------
bool gt_MergeShareControl_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if (((UnitHasBehavior2(EventUnitCargo(), "MergeBuffHeal") == true) && (UnitHasBehavior2(EventUnit(), "MergeBuffDuration") == true))) {
        PlayerSetAlliance(EventPlayer(), c_allianceIdControl, UnitGetOwner(EventUnitCargo()), true);
        PlayerSetAlliance(UnitGetOwner(EventUnitCargo()), c_allianceIdControl, EventPlayer(), true);
    }

    if (((UnitHasBehavior2(EventUnitCargo(), "MergeBuffHeal") == false) && (UnitHasBehavior2(EventUnit(), "MergeBuffDuration") == false)) && ((UnitGetType(EventUnit()) == "HybridBehemoth") || (UnitGetType(EventUnit()) == "HybridNemesis") || (UnitGetType(EventUnit()) == "HybridDominatorVoid"))) {
        PlayerSetAlliance(UnitGetOwner(EventUnitCargo()), c_allianceIdControl, EventPlayer(), false);
        PlayerSetAlliance(EventPlayer(), c_allianceIdControl, UnitGetOwner(EventUnitCargo()), false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MergeShareControl_Init () {
    gt_MergeShareControl = TriggerCreate("gt_MergeShareControl_Func");
    TriggerAddEventUnitCargo(gt_MergeShareControl, null, true);
    TriggerAddEventUnitCargo(gt_MergeShareControl, null, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unload from Dominated unit
//--------------------------------------------------------------------------------------------------
bool gt_UnloadfromDominatedunit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(EventUnit(), Order(AbilityCommand("MedivacTransport", 1)), c_orderQueueReplace);
    UnitIssueOrder(EventUnit(), Order(AbilityCommand("OverlordTransport", 1)), c_orderQueueReplace);
    UnitIssueOrder(EventUnit(), Order(AbilityCommand("WarpPrismTransport", 1)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UnloadfromDominatedunit_Init () {
    gt_UnloadfromDominatedunit = TriggerCreate("gt_UnloadfromDominatedunit_Func");
    TriggerAddEventUnitBehaviorChange(gt_UnloadfromDominatedunit, null, "Domination", c_unitBehaviorChangeDeactivate);
    TriggerAddEventUnitBehaviorChange(gt_UnloadfromDominatedunit, null, "DominationLevel2", c_unitBehaviorChangeDeactivate);
    TriggerAddEventUnitBehaviorChange(gt_UnloadfromDominatedunit, null, "DominationLevel3", c_unitBehaviorChangeDeactivate);
    TriggerAddEventUnitBehaviorChange(gt_UnloadfromDominatedunit, null, "DominationLevel4", c_unitBehaviorChangeDeactivate);
    TriggerAddEventUnitBehaviorChange(gt_UnloadfromDominatedunit, null, "DominationLevel5", c_unitBehaviorChangeDeactivate);
    TriggerAddEventUnitBehaviorChange(gt_UnloadfromDominatedunit, null, "DominationLevel6", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Shadow Pounce
//--------------------------------------------------------------------------------------------------
bool gt_ShadowPounce_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior(EventUnit(), "ShadowPounceBuff") == true)) {
        UnitBehaviorRemove(EventUnit(), "ShadowPounceBuff", 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShadowPounce_Init () {
    gt_ShadowPounce = TriggerCreate("gt_ShadowPounce_Func");
    TriggerAddEventUnitAbility(gt_ShadowPounce, null, AbilityCommand("ShadowPounce", 0), c_abilEffectStageApproach, false);
    TriggerAddEventUnitAbility(gt_ShadowPounce, null, AbilityCommand("ZeratulStun", 0), c_unitAbilStageAll, false);
    TriggerAddEventUnitAbility(gt_ShadowPounce, null, AbilityCommand("PsiShuriken", 0), c_unitAbilStageAll, false);
    TriggerAddEventUnitAbility(gt_ShadowPounce, null, AbilityCommand("SmokeBomb", 0), c_unitAbilStageAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dispersion damage dealt
//--------------------------------------------------------------------------------------------------
bool gt_Dispersiondamagedealt_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "DispersionEnergyBallLev1") || (UnitGetType(EventUnit()) == "DispersionEnergyBallLev2") || (UnitGetType(EventUnit()) == "DispersionEnergyBallLev3") || (UnitGetType(EventUnit()) == "DispersionEnergyBallLev4") || (UnitGetType(EventUnit()) == "DispersionEnergyBallLev5") || (UnitGetType(EventUnit()) == "DispersionEnergyBallLev6")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitDamage(EventUnit(), "SentryDispersionDamage", gv_playerUnits[EventPlayer()], EventUnitDamageAmount());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Dispersiondamagedealt_Init () {
    gt_Dispersiondamagedealt = TriggerCreate("gt_Dispersiondamagedealt_Func");
    TriggerAddEventUnitDamaged(gt_Dispersiondamagedealt, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unload all T1
//--------------------------------------------------------------------------------------------------
bool gt_UnloadallT1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_isinCommand[0]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupIssueOrder(UnitGroup("Medivac", gv_isinCommand[0], RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), Order(AbilityCommand("MedivacTransport", 1)), c_orderQueueReplace);
    UnitGroupIssueOrder(UnitGroup("Overlord", gv_isinCommand[0], RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), Order(AbilityCommand("OverlordTransport", 1)), c_orderQueueReplace);
    UnitGroupIssueOrder(UnitGroup("WarpPrism", gv_isinCommand[0], RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), Order(AbilityCommand("WarpPrismTransport", 1)), c_orderQueueReplace);
    UnitGroupIssueOrder(UnitGroup("WarpPrismPhasing", gv_isinCommand[0], RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), Order(AbilityCommand("WarpPrismTransport", 1)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UnloadallT1_Init () {
    gt_UnloadallT1 = TriggerCreate("gt_UnloadallT1_Func");
    TriggerAddEventUnitAbility(gt_UnloadallT1, null, AbilityCommand("LoadUnloadUnit", 1), c_unitAbilStageAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unload all T2
//--------------------------------------------------------------------------------------------------
bool gt_UnloadallT2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_isinCommand[1]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupIssueOrder(UnitGroup("Medivac", gv_isinCommand[1], RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), Order(AbilityCommand("MedivacTransport", 1)), c_orderQueueReplace);
    UnitGroupIssueOrder(UnitGroup("Overlord", gv_isinCommand[1], RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), Order(AbilityCommand("OverlordTransport", 1)), c_orderQueueReplace);
    UnitGroupIssueOrder(UnitGroup("WarpPrism", gv_isinCommand[1], RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), Order(AbilityCommand("WarpPrismTransport", 1)), c_orderQueueReplace);
    UnitGroupIssueOrder(UnitGroup("WarpPrismPhasing", gv_isinCommand[1], RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), Order(AbilityCommand("WarpPrismTransport", 1)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UnloadallT2_Init () {
    gt_UnloadallT2 = TriggerCreate("gt_UnloadallT2_Func");
    TriggerAddEventUnitAbility(gt_UnloadallT2, null, AbilityCommand("LoadUnloadUnit", 1), c_unitAbilStageAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Set Cameras and Regions
//--------------------------------------------------------------------------------------------------
bool gt_SetCamerasandRegions_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_selectionCameras[0][0] = CameraInfoFromId(3);
    gv_selectionCameras[0][1] = CameraInfoFromId(21);
    gv_selectionCameras[0][2] = CameraInfoFromId(22);
    gv_selectionCameras[0][3] = CameraInfoFromId(23);
    gv_selectionCameras[0][4] = CameraInfoFromId(24);
    gv_selectionCameras[0][5] = CameraInfoFromId(25);
    gv_selectionCameras[1][0] = CameraInfoFromId(4);
    gv_selectionCameras[1][1] = CameraInfoFromId(1448);
    gv_selectionCameras[1][2] = CameraInfoFromId(1449);
    gv_selectionCameras[1][3] = CameraInfoFromId(1450);
    gv_selectionCameras[1][4] = CameraInfoFromId(1451);
    gv_selectionCameras[1][5] = CameraInfoFromId(1452);
    gv_playerSpawn[0] = RegionFromId(1);
    gv_playerSpawn[1] = RegionFromId(14);
    gv_playerSpawn[2] = RegionFromId(15);
    gv_playerSpawn[3] = RegionFromId(16);
    gv_playerSpawn[4] = RegionFromId(17);
    gv_playerSpawn[5] = RegionFromId(20);
    gv_playerSpawn[6] = RegionFromId(2);
    gv_playerSpawn[7] = RegionFromId(10);
    gv_playerSpawn[8] = RegionFromId(11);
    gv_playerSpawn[9] = RegionFromId(12);
    gv_playerSpawn[10] = RegionFromId(13);
    gv_playerSpawn[11] = RegionFromId(19);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SetCamerasandRegions_Init () {
    gt_SetCamerasandRegions = TriggerCreate("gt_SetCamerasandRegions_Func");
    TriggerAddEventMapInit(gt_SetCamerasandRegions);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Set Cameras and Teams
//--------------------------------------------------------------------------------------------------
bool gt_SetCamerasandTeams_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_a;
    int lv_b;

    // Automatic Variable Declarations
    playergroup auto569C0AB1_g;
    int auto569C0AB1_var;
    playergroup auto406F11B9_g;
    int auto406F11B9_var;
    const int autoCDBEE47E_ae = 1;
    const int autoCDBEE47E_ai = 1;
    const int autoDF72293B_ae = 5;
    const int autoDF72293B_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetAlliance(14, 13, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(15, 13, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(15, 14, libNtve_ge_AllianceSetting_Neutral);
    auto569C0AB1_g = GameAttributePlayersForTeam(1);
    auto569C0AB1_var = -1;
    while (true) {
        auto569C0AB1_var = PlayerGroupNextPlayer(auto569C0AB1_g, auto569C0AB1_var);
        if (auto569C0AB1_var < 0) { break; }
        PlayerGroupAdd(gv_setTeam[0], auto569C0AB1_var);
        libNtve_gf_SetAlliance(auto569C0AB1_var, 13, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    }
    auto406F11B9_g = GameAttributePlayersForTeam(2);
    auto406F11B9_var = -1;
    while (true) {
        auto406F11B9_var = PlayerGroupNextPlayer(auto406F11B9_g, auto406F11B9_var);
        if (auto406F11B9_var < 0) { break; }
        PlayerGroupAdd(gv_setTeam[1], auto406F11B9_var);
        libNtve_gf_SetAlliance(auto406F11B9_var, 14, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    }
    libNtve_gf_SetPlayerGroupAlliance(GameAttributePlayersForTeam(1), libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetPlayerGroupAlliance(GameAttributePlayersForTeam(2), libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    lv_a = 0;
    for ( ; ( (autoCDBEE47E_ai >= 0 && lv_a <= autoCDBEE47E_ae) || (autoCDBEE47E_ai < 0 && lv_a >= autoCDBEE47E_ae) ) ; lv_a += autoCDBEE47E_ai ) {
        lv_b = 0;
        for ( ; ( (autoDF72293B_ai >= 0 && lv_b <= autoDF72293B_ae) || (autoDF72293B_ai < 0 && lv_b >= autoDF72293B_ae) ) ; lv_b += autoDF72293B_ai ) {
            if ((PlayerGroupPlayer(gv_setTeam[lv_a], (lv_b + 1)) != -1)) {
                CameraApplyInfo(PlayerGroupPlayer(gv_setTeam[lv_a], (lv_b + 1)), gv_selectionCameras[lv_a][lv_b], 0.0, -1, 10, true);
                gv_usedCamera[((6 * lv_a) + lv_b)] = lv_b;
                CameraLockInput(PlayerGroupPlayer(gv_setTeam[lv_a], (lv_b + 1)), true);
            }
            else {
                break;
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SetCamerasandTeams_Init () {
    gt_SetCamerasandTeams = TriggerCreate("gt_SetCamerasandTeams_Func");
    TriggerAddEventMapInit(gt_SetCamerasandTeams);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Change Camera
//--------------------------------------------------------------------------------------------------
bool gt_ChangeCamera_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_a;
    int lv_b;
    int lv_place;

    // Automatic Variable Declarations
    const int auto2596363E_ae = 1;
    const int auto2596363E_ai = 1;
    const int autoFD42DC81_ae = 5;
    const int autoFD42DC81_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_topMiddleButton) || (EventDialogControl() == gv_topMiddleLeftButton) || (EventDialogControl() == gv_topMiddleRightButton)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_a = 0;
    for ( ; ( (auto2596363E_ai >= 0 && lv_a <= auto2596363E_ae) || (auto2596363E_ai < 0 && lv_a >= auto2596363E_ae) ) ; lv_a += auto2596363E_ai ) {
        lv_b = 0;
        for ( ; ( (autoFD42DC81_ai >= 0 && lv_b <= autoFD42DC81_ae) || (autoFD42DC81_ai < 0 && lv_b >= autoFD42DC81_ae) ) ; lv_b += autoFD42DC81_ai ) {
            if ((EventPlayer() == PlayerGroupPlayer(gv_setTeam[lv_a], (lv_b + 1)))) {
                lv_place = ((6 * lv_a) + lv_b);
                if ((EventDialogControl() == gv_topMiddleRightButton)) {
                    if ((gv_usedCamera[lv_place] != 5)) {
                        gv_usedCamera[lv_place] += 1;
                        CameraApplyInfo(EventPlayer(), gv_selectionCameras[lv_a][gv_usedCamera[lv_place]], 2.0, -1, 10.0, true);
                    }
                    else {
                        gv_usedCamera[lv_place] = 0;
                        CameraApplyInfo(EventPlayer(), gv_selectionCameras[lv_a][gv_usedCamera[lv_place]], 2.0, -1, 10.0, true);
                    }
                }

                if ((EventDialogControl() == gv_topMiddleLeftButton)) {
                    if ((gv_usedCamera[lv_place] != 0)) {
                        gv_usedCamera[lv_place] -= 1;
                        CameraApplyInfo(EventPlayer(), gv_selectionCameras[lv_a][gv_usedCamera[lv_place]], 2.0, -1, 10.0, true);
                    }
                    else {
                        gv_usedCamera[lv_place] = 5;
                        CameraApplyInfo(EventPlayer(), gv_selectionCameras[lv_a][gv_usedCamera[lv_place]], 2.0, -1, 10.0, true);
                    }
                }

                if ((EventDialogControl() == gv_topMiddleButton)) {
                    gv_usedCamera[lv_place] = lv_b;
                    CameraApplyInfo(EventPlayer(), gv_selectionCameras[lv_a][gv_usedCamera[lv_place]], 2.0, -1, 10.0, true);
                }

                break;
                break;
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ChangeCamera_Init () {
    gt_ChangeCamera = TriggerCreate("gt_ChangeCamera_Func");
    TriggerAddEventDialogControl(gt_ChangeCamera, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Timer Start
//--------------------------------------------------------------------------------------------------
bool gt_StartTimerStart_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(gv_selectionTimer, 180.0, false, c_timeGame);
    TimerWindowCreate(gv_selectionTimer, StringExternal("Param/Value/BB5292B3"), true, false);
    gv_timerwindow = TimerWindowLastCreated();
    libVCUI_gf_SetTimerWindowDangerThreshold(20.0);
    TimerWindowSetStyle(gv_timerwindow, c_timerWindowStyleVerticalTitleTime, false);
    TimerWindowSetAnchor(gv_timerwindow, c_anchorTop, 0, 0);
    TimerWindowShow(gv_timerwindow, PlayerGroupActive(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartTimerStart_Init () {
    gt_StartTimerStart = TriggerCreate("gt_StartTimerStart_Func");
    TriggerAddEventMapInit(gt_StartTimerStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Set Hero Random
//--------------------------------------------------------------------------------------------------
bool gt_SetHeroRandom_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_randomHero[0] = "Archon2";
    gv_randomHero[1] = "Firebat2";
    gv_randomHero[2] = "Nova2";
    gv_randomHero[3] = "WarPig2";
    gv_randomHero[4] = "Medic2";
    gv_randomHero[5] = "Preserver";
    gv_randomHero[6] = "Stalker2";
    gv_randomHero[7] = "ShadowKnight";
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SetHeroRandom_Init () {
    gt_SetHeroRandom = TriggerCreate("gt_SetHeroRandom_Func");
    TriggerAddEventMapInit(gt_SetHeroRandom);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Timer Expire
//--------------------------------------------------------------------------------------------------
bool gt_TimerExpire_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_a;

    // Automatic Variable Declarations
    const int auto0AC1642A_ae = 11;
    const int auto0AC1642A_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_a = 0;
    for ( ; ( (auto0AC1642A_ai >= 0 && lv_a <= auto0AC1642A_ae) || (auto0AC1642A_ai < 0 && lv_a >= auto0AC1642A_ae) ) ; lv_a += auto0AC1642A_ai ) {
        if (((PlayerStatus((lv_a + 1)) == c_playerStatusActive) && (gv_clickedherobuttons[lv_a] == false) && (PlayerType((lv_a + 1)) == c_playerTypeUser))) {
            UnitCreate(1, gv_randomHero[RandomInt(0, 7)], c_unitCreateIgnorePlacement, (lv_a + 1), RegionGetCenter(gv_playerSpawn[lv_a]), 270.0);
            gv_playerUnits[lv_a] = UnitLastCreated();
        }

    }
    Wait(0.1, c_timeGame);
    TriggerEnable(gt_DisplayNotReadyPlayers, false);
    TriggerExecute(gt_PlayersReady, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TimerExpire_Init () {
    gt_TimerExpire = TriggerCreate("gt_TimerExpire_Func");
    TriggerAddEventTimer(gt_TimerExpire, gv_selectionTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create Inventory
//--------------------------------------------------------------------------------------------------
bool gt_CreateInventory_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_a;
    int lv_b;
    int lv_i;
    int lv_j;
    int lv_place;
    int lv_equipableSlot;

    // Automatic Variable Declarations
    int autoA9337F76_ae;
    const int autoA9337F76_ai = 1;
    int auto52CAE71A_ae;
    const int auto52CAE71A_ai = 1;
    int auto83906EE1_ae;
    const int auto83906EE1_ai = 1;
    int autoAF0B0E13_ae;
    const int autoAF0B0E13_ai = 1;
    int autoF3D111EB_ae;
    const int autoF3D111EB_ai = 1;
    int autoA63DFDD7_ae;
    const int autoA63DFDD7_ai = 1;
    const int auto5BE34843_ae = 2;
    const int auto5BE34843_ai = 1;
    const int auto2630E0B1_ae = 0;
    const int auto2630E0B1_ai = 1;
    const int auto43C3860F_ae = gv_equipRows;
    const int auto43C3860F_ai = 1;
    const int auto126E9D09_ae = gv_equipColumns;
    const int auto126E9D09_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(80, 60, c_anchorBottomLeft, 175, 303, true);
    gv_inventoryOpenCloseContainer = DialogLastCreated();
    DialogSetVisible(gv_inventoryOpenCloseContainer, PlayerGroupActive(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    libNtve_gf_CreateDialogItemImage(gv_inventoryOpenCloseContainer, 80, 60, c_anchorCenter, 0, 0, StringExternal("Param/Value/84A545EF"), "Assets\\Textures\\ui_unitbuttons_frame_terran.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemButton(gv_inventoryOpenCloseContainer, 75, 55, c_anchorCenter, 0, 0, StringExternal("Param/Value/7C588E3F"), StringExternal("Param/Value/BD7A1FE7"), "");
    gv_inventoryOpenButton = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_inventoryOpenCloseContainer, 75, 55, c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\btn-ability-terran-calldownextrasupplies-color.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogSetTransparency(DialogLastCreated(), 0.01);
    DialogControlSetVisible(gv_inventoryOpenButton, PlayerGroupActive(), true);
    DialogCreate(560, 760, c_anchorTopLeft, 50, 50, true);
    gv_inventoryMainPanel = DialogLastCreated();
    DialogSetImageVisible(gv_inventoryMainPanel, false);
    libNtve_gf_CreateDialogItemImage(gv_inventoryMainPanel, 560, 760, c_anchorTopLeft, 0, 0, StringToText(""), "Assets\\Textures\\ui_merc_frame_description_box.dds", c_triggerImageTypeHorizontalBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemButton(gv_inventoryMainPanel, 34, 34, c_anchorTopLeft, 17, 27, StringExternal("Param/Value/38A3D126"), StringExternal("Param/Value/5A571CF2"), "");
    gv_inventoryCloseButton = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_inventoryMainPanel, 34, 34, c_anchorTopLeft, 17, 27, StringToText(""), "Assets\\Textures\\ui_ingame_resourcesharing_closebutton_normalandpressed.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlSetVisible(gv_inventoryCloseButton, PlayerGroupActive(), true);
    autoA9337F76_ae = (gv_cofRowsButtons - 1);
    lv_a = 0;
    for ( ; ( (autoA9337F76_ai >= 0 && lv_a <= autoA9337F76_ae) || (autoA9337F76_ai < 0 && lv_a >= autoA9337F76_ae) ) ; lv_a += autoA9337F76_ai ) {
        auto52CAE71A_ae = (gv_cofColumnsButtons - 1);
        lv_b = 0;
        for ( ; ( (auto52CAE71A_ai >= 0 && lv_b <= auto52CAE71A_ae) || (auto52CAE71A_ai < 0 && lv_b >= auto52CAE71A_ae) ) ; lv_b += auto52CAE71A_ai ) {
            libNtve_gf_CreateDialogItemButton(gv_inventoryMainPanel, gv_cSlotImageSize, gv_cSlotImageSize, c_anchorTopLeft, ((lv_b * gv_cSlotImageSize) + ((lv_b + 10) * gv_cGapSizeHorizental2)), ((lv_a * gv_cSlotImageSize) + ((lv_a + 10) * gv_cGapSizeVertical2)), StringExternal("Param/Value/94F38965"), StringToText(""), "");
            gv_bagOneSlots[lv_a][lv_b] = DialogControlLastCreated();
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), true);
            libNtve_gf_CreateDialogItemImage(gv_inventoryMainPanel, gv_cSlotImageSize, gv_cSlotImageSize, c_anchorTopLeft, ((lv_b * gv_cSlotImageSize) + ((lv_b + 10) * gv_cGapSizeHorizental2)), ((lv_a * gv_cSlotImageSize) + ((lv_a + 10) * gv_cGapSizeVertical2)), StringToText(""), "Assets\\Textures\\btn-border-abilitycharge.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
            gv_bagOneImageSlots[lv_a][lv_b] = DialogControlLastCreated();
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), true);
        }
    }
    auto83906EE1_ae = (gv_cofRowsButtons - 1);
    lv_a = 0;
    for ( ; ( (auto83906EE1_ai >= 0 && lv_a <= auto83906EE1_ae) || (auto83906EE1_ai < 0 && lv_a >= auto83906EE1_ae) ) ; lv_a += auto83906EE1_ai ) {
        autoAF0B0E13_ae = (gv_cofColumnsButtons - 1);
        lv_b = 0;
        for ( ; ( (autoAF0B0E13_ai >= 0 && lv_b <= autoAF0B0E13_ae) || (autoAF0B0E13_ai < 0 && lv_b >= autoAF0B0E13_ae) ) ; lv_b += autoAF0B0E13_ai ) {
            libNtve_gf_CreateDialogItemButton(gv_inventoryMainPanel, gv_cSlotImageSize, gv_cSlotImageSize, c_anchorTopLeft, ((lv_b * gv_cSlotImageSize) + ((lv_b + 10) * gv_cGapSizeHorizental2)), ((lv_a * gv_cSlotImageSize) + ((lv_a + 10) * gv_cGapSizeVertical2)), StringExternal("Param/Value/75A5B605"), StringToText(""), "");
            gv_bagTwoSlots[lv_a][lv_b] = DialogControlLastCreated();
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
            libNtve_gf_CreateDialogItemImage(gv_inventoryMainPanel, gv_cSlotImageSize, gv_cSlotImageSize, c_anchorTopLeft, ((lv_b * gv_cSlotImageSize) + ((lv_b + 10) * gv_cGapSizeHorizental2)), ((lv_a * gv_cSlotImageSize) + ((lv_a + 10) * gv_cGapSizeVertical2)), StringToText(""), "Assets\\Textures\\btn-border-abilitycharge.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
            gv_bagTwoImageSlots[lv_a][lv_b] = DialogControlLastCreated();
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
        }
    }
    autoF3D111EB_ae = (gv_cofRowsButtons - 1);
    lv_a = 0;
    for ( ; ( (autoF3D111EB_ai >= 0 && lv_a <= autoF3D111EB_ae) || (autoF3D111EB_ai < 0 && lv_a >= autoF3D111EB_ae) ) ; lv_a += autoF3D111EB_ai ) {
        autoA63DFDD7_ae = (gv_cofColumnsButtons - 1);
        lv_b = 0;
        for ( ; ( (autoA63DFDD7_ai >= 0 && lv_b <= autoA63DFDD7_ae) || (autoA63DFDD7_ai < 0 && lv_b >= autoA63DFDD7_ae) ) ; lv_b += autoA63DFDD7_ai ) {
            libNtve_gf_CreateDialogItemButton(gv_inventoryMainPanel, gv_cSlotImageSize, gv_cSlotImageSize, c_anchorTopLeft, ((lv_b * gv_cSlotImageSize) + ((lv_b + 10) * gv_cGapSizeHorizental2)), ((lv_a * gv_cSlotImageSize) + ((lv_a + 10) * gv_cGapSizeVertical2)), StringExternal("Param/Value/B6A94CD4"), StringToText(""), "");
            gv_bagThreeSlots[lv_a][lv_b] = DialogControlLastCreated();
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
            libNtve_gf_CreateDialogItemImage(gv_inventoryMainPanel, gv_cSlotImageSize, gv_cSlotImageSize, c_anchorTopLeft, ((lv_b * gv_cSlotImageSize) + ((lv_b + 10) * gv_cGapSizeHorizental2)), ((lv_a * gv_cSlotImageSize) + ((lv_a + 10) * gv_cGapSizeVertical2)), StringToText(""), "Assets\\Textures\\btn-border-abilitycharge.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
            gv_bagThreeImageSlots[lv_a][lv_b] = DialogControlLastCreated();
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
        }
    }
    lv_i = 0;
    for ( ; ( (auto5BE34843_ai >= 0 && lv_i <= auto5BE34843_ae) || (auto5BE34843_ai < 0 && lv_i >= auto5BE34843_ae) ) ; lv_i += auto5BE34843_ai ) {
        lv_j = 0;
        for ( ; ( (auto2630E0B1_ai >= 0 && lv_j <= auto2630E0B1_ae) || (auto2630E0B1_ai < 0 && lv_j >= auto2630E0B1_ae) ) ; lv_j += auto2630E0B1_ai ) {
            lv_place = lv_i;
            libNtve_gf_CreateDialogItemButton(gv_inventoryMainPanel, gv_bagButtonSizeHorz, gv_bagButtonSizeVert, c_anchorTopLeft, 20, ((lv_i * gv_bagButtonSizeVert) + ((lv_i + 10) * gv_cGapSizeHorizental2)), (UserDataGetText("Bags", "Choice Info", "Bag Number", (lv_place + 1)) + TextWithColor(StringToText(UserDataGetString("Bags", "Choice Info", "Bag Item Amount", (lv_place + 1))), Color(0.00, 0.00, 100.00))), StringExternal("Param/Value/980C521D"), "");
            gv_selectedBags[lv_i][lv_j] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemImage(gv_inventoryMainPanel, gv_bagButtonSizeHorz, gv_bagButtonSizeVert, c_anchorTopLeft, 20, ((lv_i * gv_bagButtonSizeVert) + ((lv_i + 10) * gv_cGapSizeHorizental2)), StringToText(""), "Assets\\Textures\\icon-gas-protoss.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
            gv_selectedBagsImages[lv_i][lv_j] = DialogControlLastCreated();
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), true);
        }
    }
    lv_i = 1;
    for ( ; ( (auto43C3860F_ai >= 0 && lv_i <= auto43C3860F_ae) || (auto43C3860F_ai < 0 && lv_i >= auto43C3860F_ae) ) ; lv_i += auto43C3860F_ai ) {
        lv_j = 1;
        for ( ; ( (auto126E9D09_ai >= 0 && lv_j <= auto126E9D09_ae) || (auto126E9D09_ai < 0 && lv_j >= auto126E9D09_ae) ) ; lv_j += auto126E9D09_ai ) {
            lv_equipableSlot = lv_j;
            libNtve_gf_CreateDialogItemButton(gv_inventoryMainPanel, gv_equipableSizeHorz, gv_equipableSizeVert, c_anchorTopLeft, ((lv_j * gv_equipableSizeHorz) + ((lv_j - 6) * gv_cGapSizeHorzEquipable)), 670, (UserDataGetText("EquipableSlots", "Choice Info", "Slot Tooltip", lv_equipableSlot) + TextWithColor(StringToText(UserDataGetString("EquipableSlots", "Choice Info", "Equipable slot Number", lv_equipableSlot)), Color(0.00, 0.00, 100.00))), StringExternal("Param/Value/159C4B8E"), "");
            gv_itemsEquipedButton[lv_i][lv_j] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemImage(gv_inventoryMainPanel, gv_equipableSizeHorz, gv_equipableSizeVert, c_anchorTopLeft, ((lv_j * gv_equipableSizeHorz) + ((lv_j - 6) * gv_cGapSizeHorzEquipable)), 670, StringToText(""), "Assets\\Textures\\btn-border-queue-trainingslot01.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
            gv_itemsEquipedImage[lv_i][lv_j] = DialogControlLastCreated();
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), true);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreateInventory_Init () {
    gt_CreateInventory = TriggerCreate("gt_CreateInventory_Func");
    TriggerAddEventMapInit(gt_CreateInventory);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Open Inventory
//--------------------------------------------------------------------------------------------------
bool gt_OpenInventory_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    int lv_j;
    int lv_a;
    int lv_b;

    // Automatic Variable Declarations
    int auto4C62AE0F_ae;
    const int auto4C62AE0F_ai = 1;
    int auto33AE6E0B_ae;
    const int auto33AE6E0B_ai = 1;
    int auto87666E25_ae;
    const int auto87666E25_ai = 1;
    int autoE0332518_ae;
    const int autoE0332518_ai = 1;
    int auto465C501B_ae;
    const int auto465C501B_ai = 1;
    int auto95A5E5E7_ae;
    const int auto95A5E5E7_ai = 1;
    int auto0DFF36AB_ae;
    const int auto0DFF36AB_ai = 1;
    int auto8A2BF3BE_ae;
    const int auto8A2BF3BE_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventDialogControl() == gv_inventoryOpenButton) && (gv_openCloseBool[EventPlayer()] == false)) {
        gv_openCloseBool[EventPlayer()] = true;
        DialogSetVisible(gv_inventoryMainPanel, PlayerGroupSingle(EventPlayer()), true);
    }
    else {
        if ((EventDialogControl() == gv_inventoryOpenButton) && (gv_openCloseBool[EventPlayer()] == true)) {
            gv_openCloseBool[EventPlayer()] = false;
            DialogSetVisible(gv_inventoryMainPanel, PlayerGroupSingle(EventPlayer()), false);
        }

    }
    if ((EventDialogControl() == gv_inventoryCloseButton) && (gv_openCloseBool[EventPlayer()] == true)) {
        gv_openCloseBool[EventPlayer()] = false;
        DialogSetVisible(gv_inventoryMainPanel, PlayerGroupSingle(EventPlayer()), false);
    }

    auto4C62AE0F_ae = (3 - 1);
    lv_i = 0;
    for ( ; ( (auto4C62AE0F_ai >= 0 && lv_i <= auto4C62AE0F_ae) || (auto4C62AE0F_ai < 0 && lv_i >= auto4C62AE0F_ae) ) ; lv_i += auto4C62AE0F_ai ) {
        auto33AE6E0B_ae = (1 - 1);
        lv_j = 0;
        for ( ; ( (auto33AE6E0B_ai >= 0 && lv_j <= auto33AE6E0B_ae) || (auto33AE6E0B_ai < 0 && lv_j >= auto33AE6E0B_ae) ) ; lv_j += auto33AE6E0B_ai ) {
            if ((EventDialogControl() == gv_selectedBags[lv_i][lv_j])) {
                libNtve_gf_SetDialogItemColor(gv_selectedBagsImages[0][lv_j], Color(100,100,100), PlayerGroupSingle(EventPlayer()));
                libNtve_gf_SetDialogItemColor(gv_selectedBagsImages[1][lv_j], Color(100,100,100), PlayerGroupSingle(EventPlayer()));
                libNtve_gf_SetDialogItemColor(gv_selectedBagsImages[2][lv_j], Color(100,100,100), PlayerGroupSingle(EventPlayer()));
                auto87666E25_ae = (gv_cofRowsButtons - 1);
                lv_a = 0;
                for ( ; ( (auto87666E25_ai >= 0 && lv_a <= auto87666E25_ae) || (auto87666E25_ai < 0 && lv_a >= auto87666E25_ae) ) ; lv_a += auto87666E25_ai ) {
                    autoE0332518_ae = (gv_cofColumnsButtons - 1);
                    lv_b = 0;
                    for ( ; ( (autoE0332518_ai >= 0 && lv_b <= autoE0332518_ae) || (autoE0332518_ai < 0 && lv_b >= autoE0332518_ae) ) ; lv_b += autoE0332518_ai ) {
                        DialogControlSetVisible(gv_bagOneSlots[lv_a][lv_b], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_bagTwoSlots[lv_a][lv_b], PlayerGroupSingle(EventPlayer()), false);
                        DialogControlSetVisible(gv_bagThreeSlots[lv_a][lv_b], PlayerGroupSingle(EventPlayer()), false);
                        DialogControlSetVisible(gv_bagOneImageSlots[lv_a][lv_b], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_bagTwoImageSlots[lv_a][lv_b], PlayerGroupSingle(EventPlayer()), false);
                        DialogControlSetVisible(gv_bagThreeImageSlots[lv_a][lv_b], PlayerGroupSingle(EventPlayer()), false);
                        libNtve_gf_SetDialogItemColor(gv_selectedBagsImages[lv_i][lv_j], Color(16*100/255,98*100/255,70*100/255), PlayerGroupSingle(EventPlayer()));
                    }
                }
            }

            if ((EventDialogControl() == gv_selectedBags[lv_i][lv_j])) {
                auto465C501B_ae = (gv_cofRowsButtons - 1);
                lv_a = 0;
                for ( ; ( (auto465C501B_ai >= 0 && lv_a <= auto465C501B_ae) || (auto465C501B_ai < 0 && lv_a >= auto465C501B_ae) ) ; lv_a += auto465C501B_ai ) {
                    auto95A5E5E7_ae = (gv_cofColumnsButtons - 1);
                    lv_b = 0;
                    for ( ; ( (auto95A5E5E7_ai >= 0 && lv_b <= auto95A5E5E7_ae) || (auto95A5E5E7_ai < 0 && lv_b >= auto95A5E5E7_ae) ) ; lv_b += auto95A5E5E7_ai ) {
                        DialogControlSetVisible(gv_bagOneSlots[lv_a][lv_b], PlayerGroupSingle(EventPlayer()), false);
                        DialogControlSetVisible(gv_bagTwoSlots[lv_a][lv_b], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_bagThreeSlots[lv_a][lv_b], PlayerGroupSingle(EventPlayer()), false);
                        DialogControlSetVisible(gv_bagOneImageSlots[lv_a][lv_b], PlayerGroupSingle(EventPlayer()), false);
                        DialogControlSetVisible(gv_bagTwoImageSlots[lv_a][lv_b], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_bagThreeImageSlots[lv_a][lv_b], PlayerGroupSingle(EventPlayer()), false);
                        libNtve_gf_SetDialogItemColor(gv_selectedBagsImages[lv_i][lv_j], Color(16*100/255,98*100/255,70*100/255), PlayerGroupSingle(EventPlayer()));
                    }
                }
            }

            if ((EventDialogControl() == gv_selectedBags[lv_i][lv_j])) {
                auto0DFF36AB_ae = (gv_cofRowsButtons - 1);
                lv_a = 0;
                for ( ; ( (auto0DFF36AB_ai >= 0 && lv_a <= auto0DFF36AB_ae) || (auto0DFF36AB_ai < 0 && lv_a >= auto0DFF36AB_ae) ) ; lv_a += auto0DFF36AB_ai ) {
                    auto8A2BF3BE_ae = (gv_cofColumnsButtons - 1);
                    lv_b = 0;
                    for ( ; ( (auto8A2BF3BE_ai >= 0 && lv_b <= auto8A2BF3BE_ae) || (auto8A2BF3BE_ai < 0 && lv_b >= auto8A2BF3BE_ae) ) ; lv_b += auto8A2BF3BE_ai ) {
                        DialogControlSetVisible(gv_bagOneSlots[lv_a][lv_b], PlayerGroupSingle(EventPlayer()), false);
                        DialogControlSetVisible(gv_bagTwoSlots[lv_a][lv_b], PlayerGroupSingle(EventPlayer()), false);
                        DialogControlSetVisible(gv_bagThreeSlots[lv_a][lv_b], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_bagOneImageSlots[lv_a][lv_b], PlayerGroupSingle(EventPlayer()), false);
                        DialogControlSetVisible(gv_bagTwoImageSlots[lv_a][lv_b], PlayerGroupSingle(EventPlayer()), false);
                        DialogControlSetVisible(gv_bagThreeImageSlots[lv_a][lv_b], PlayerGroupSingle(EventPlayer()), true);
                        libNtve_gf_SetDialogItemColor(gv_selectedBagsImages[lv_i][lv_j], Color(16*100/255,98*100/255,70*100/255), PlayerGroupSingle(EventPlayer()));
                    }
                }
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OpenInventory_Init () {
    gt_OpenInventory = TriggerCreate("gt_OpenInventory_Func");
    TriggerAddEventDialogControl(gt_OpenInventory, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: LinkToInventoryGainItem
//--------------------------------------------------------------------------------------------------
bool gt_LinkToInventoryGainItem_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_x;
    int lv_i;
    int lv_j;

    // Automatic Variable Declarations
    const int auto94735058_ae = gv_equipRows;
    const int auto94735058_ai = 1;
    const int autoDF786A7F_ae = gv_equipColumns;
    const int autoDF786A7F_ai = 1;
    const int autoE805BD3B_ae = 11;
    const int autoE805BD3B_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_i = 1;
    for ( ; ( (auto94735058_ai >= 0 && lv_i <= auto94735058_ae) || (auto94735058_ai < 0 && lv_i >= auto94735058_ae) ) ; lv_i += auto94735058_ai ) {
        lv_j = 1;
        for ( ; ( (autoDF786A7F_ai >= 0 && lv_j <= autoDF786A7F_ae) || (autoDF786A7F_ai < 0 && lv_j >= autoDF786A7F_ae) ) ; lv_j += autoDF786A7F_ai ) {
            lv_x = 1;
            for ( ; ( (autoE805BD3B_ai >= 0 && lv_x <= autoE805BD3B_ae) || (autoE805BD3B_ai < 0 && lv_x >= autoE805BD3B_ae) ) ; lv_x += autoE805BD3B_ai ) {
                if ((UserDataGetUnit("HeroSelection2", "Choice Info", "Item Unit", lv_x) == UnitGetType(EventUnitInventoryItem())) && (UnitInventoryContainer(EventUnitInventoryItem()) == UserDataGetInt("EquipableSlots", "Choice Info", "Equipable slot Number", lv_j))) {
                    libNtve_gf_SetDialogItemImage(gv_itemsEquipedImage[lv_i][lv_j], UserDataGetImagePath("HeroSelection2", "Choice Info", "Item Button Image", lv_x), PlayerGroupSingle(UnitGetOwner(EventUnit())));
                    libNtve_gf_SetDialogItemImageType2(gv_itemsEquipedImage[lv_i][lv_j], true, PlayerGroupSingle(UnitGetOwner(EventUnitInventoryItem())));
                    libNtve_gf_SetDialogItemTooltip(gv_itemsEquipedButton[lv_i][lv_j], UserDataGetText("HeroSelection2", "Choice Info", "Item Tooltip Name", lv_x), PlayerGroupSingle(UnitGetOwner(EventUnit())));
                    gv_equippableSlotFilled[UnitGetOwner(EventUnitInventoryItem())][lv_j] = true;
                    gv_itemList[UnitGetOwner(EventUnitInventoryItem())][lv_x] = UnitInventoryLastCreated();
                }

            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LinkToInventoryGainItem_Init () {
    gt_LinkToInventoryGainItem = TriggerCreate("gt_LinkToInventoryGainItem_Func");
    TriggerAddEventUnitInventoryChange(gt_LinkToInventoryGainItem, null, c_unitInventoryChangeGains, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: LinkToInventoryMoveItem
//--------------------------------------------------------------------------------------------------
bool gt_LinkToInventoryMoveItem_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_x;
    int lv_i;
    int lv_j;
    int lv_y;

    // Automatic Variable Declarations
    const int auto37228DE8_ae = gv_equipRows;
    const int auto37228DE8_ai = 1;
    const int auto1CBEBB19_ae = gv_equipColumns;
    const int auto1CBEBB19_ai = 1;
    const int auto90963C57_ae = 11;
    const int auto90963C57_ai = 1;
    const int auto685088F5_ae = 11;
    const int auto685088F5_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_i = 1;
    for ( ; ( (auto37228DE8_ai >= 0 && lv_i <= auto37228DE8_ae) || (auto37228DE8_ai < 0 && lv_i >= auto37228DE8_ae) ) ; lv_i += auto37228DE8_ai ) {
        lv_j = 1;
        for ( ; ( (auto1CBEBB19_ai >= 0 && lv_j <= auto1CBEBB19_ae) || (auto1CBEBB19_ai < 0 && lv_j >= auto1CBEBB19_ae) ) ; lv_j += auto1CBEBB19_ai ) {
            lv_x = 1;
            for ( ; ( (auto90963C57_ai >= 0 && lv_x <= auto90963C57_ae) || (auto90963C57_ai < 0 && lv_x >= auto90963C57_ae) ) ; lv_x += auto90963C57_ai ) {
                if ((UnitInventoryContainer(EventUnitInventoryItem()) == UserDataGetInt("EquipableSlots", "Choice Info", "Equipable slot Number", lv_j)) && (UserDataGetUnit("HeroSelection2", "Choice Info", "Item Unit", lv_x) == UnitGetType(EventUnitInventoryItem())) && (gv_equippableSlotFilled[UnitGetOwner(EventUnitInventoryItem())][lv_j] == false)) {
                    libNtve_gf_SetDialogItemImage(gv_itemsEquipedImage[lv_i][EventUnitInventoryItemContainer()], "Assets\\Textures\\btn-border-queue-trainingslot01.dds", PlayerGroupSingle(UnitGetOwner(EventUnit())));
                    libNtve_gf_SetDialogItemImageType2(gv_itemsEquipedImage[lv_i][EventUnitInventoryItemContainer()], false, PlayerGroupSingle(UnitGetOwner(EventUnitInventoryItem())));
                    libNtve_gf_SetDialogItemTooltip(gv_itemsEquipedButton[lv_i][EventUnitInventoryItemContainer()], UserDataGetText("EquipableSlots", "Choice Info", "Slot Tooltip", lv_j), PlayerGroupSingle(UnitGetOwner(EventUnit())));
                    gv_equippableSlotFilled[UnitGetOwner(EventUnitInventoryItem())][EventUnitInventoryItemContainer()] = false;
                    libNtve_gf_SetDialogItemImage(gv_itemsEquipedImage[lv_i][lv_j], UserDataGetImagePath("HeroSelection2", "Choice Info", "Item Button Image", lv_x), PlayerGroupSingle(UnitGetOwner(EventUnit())));
                    libNtve_gf_SetDialogItemImageType2(gv_itemsEquipedImage[lv_i][lv_j], true, PlayerGroupSingle(UnitGetOwner(EventUnitInventoryItem())));
                    libNtve_gf_SetDialogItemTooltip(gv_itemsEquipedButton[lv_i][lv_j], UserDataGetText("HeroSelection2", "Choice Info", "Item Tooltip Name", lv_x), PlayerGroupSingle(UnitGetOwner(EventUnit())));
                    gv_equippableSlotFilled[UnitGetOwner(EventUnitInventoryItem())][lv_j] = true;
                }
                else {
                    lv_y = 1;
                    for ( ; ( (auto685088F5_ai >= 0 && lv_y <= auto685088F5_ae) || (auto685088F5_ai < 0 && lv_y >= auto685088F5_ae) ) ; lv_y += auto685088F5_ai ) {
                        if ((UnitInventoryContainer(EventUnitInventoryItem()) == UserDataGetInt("EquipableSlots", "Choice Info", "Equipable slot Number", lv_j)) && (UserDataGetUnit("HeroSelection2", "Choice Info", "Item Unit", lv_y) == UnitGetType(gv_itemList[UnitGetOwner(EventUnitInventoryItem())][lv_y]))) {
                            libNtve_gf_SetDialogItemImage(gv_itemsEquipedImage[lv_i][lv_y], UserDataGetImagePath("HeroSelection2", "Choice Info", "Item Button Image", lv_y), PlayerGroupSingle(UnitGetOwner(EventUnit())));
                            libNtve_gf_SetDialogItemImageType2(gv_itemsEquipedImage[lv_i][lv_y], true, PlayerGroupSingle(UnitGetOwner(EventUnitInventoryItem())));
                            libNtve_gf_SetDialogItemTooltip(gv_itemsEquipedButton[lv_i][lv_y], UserDataGetText("HeroSelection2", "Choice Info", "Item Tooltip Name", lv_y), PlayerGroupSingle(UnitGetOwner(EventUnit())));
                            gv_equippableSlotFilled[UnitGetOwner(EventUnitInventoryItem())][EventUnitInventoryItemContainer()] = false;
                        }

                    }
                    if ((UnitInventoryContainer(EventUnitInventoryItem()) == UserDataGetInt("EquipableSlots", "Choice Info", "Equipable slot Number", lv_j)) && (UserDataGetUnit("HeroSelection2", "Choice Info", "Item Unit", lv_x) == UnitGetType(EventUnitInventoryItem()))) {
                        libNtve_gf_SetDialogItemImage(gv_itemsEquipedImage[lv_i][lv_j], UserDataGetImagePath("HeroSelection2", "Choice Info", "Item Button Image", lv_x), PlayerGroupSingle(UnitGetOwner(EventUnit())));
                        libNtve_gf_SetDialogItemImageType2(gv_itemsEquipedImage[lv_i][lv_j], true, PlayerGroupSingle(UnitGetOwner(EventUnitInventoryItem())));
                        libNtve_gf_SetDialogItemTooltip(gv_itemsEquipedButton[lv_i][lv_j], UserDataGetText("HeroSelection2", "Choice Info", "Item Tooltip Name", lv_x), PlayerGroupSingle(UnitGetOwner(EventUnit())));
                        gv_equippableSlotFilled[UnitGetOwner(EventUnitInventoryItem())][lv_j] = true;
                    }

                }
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LinkToInventoryMoveItem_Init () {
    gt_LinkToInventoryMoveItem = TriggerCreate("gt_LinkToInventoryMoveItem_Func");
    TriggerAddEventUnitInventoryChange(gt_LinkToInventoryMoveItem, null, c_unitInventoryChangeMoves, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: LinkToInventoryDrops
//--------------------------------------------------------------------------------------------------
bool gt_LinkToInventoryDrops_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_x;
    int lv_i;
    int lv_j;

    // Automatic Variable Declarations
    const int auto0E43F9E7_ae = gv_equipRows;
    const int auto0E43F9E7_ai = 1;
    const int autoBE7FD433_ae = gv_equipColumns;
    const int autoBE7FD433_ai = 1;
    const int autoD1465DA6_ae = 11;
    const int autoD1465DA6_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_i = 1;
    for ( ; ( (auto0E43F9E7_ai >= 0 && lv_i <= auto0E43F9E7_ae) || (auto0E43F9E7_ai < 0 && lv_i >= auto0E43F9E7_ae) ) ; lv_i += auto0E43F9E7_ai ) {
        lv_j = 1;
        for ( ; ( (autoBE7FD433_ai >= 0 && lv_j <= autoBE7FD433_ae) || (autoBE7FD433_ai < 0 && lv_j >= autoBE7FD433_ae) ) ; lv_j += autoBE7FD433_ai ) {
            lv_x = 1;
            for ( ; ( (autoD1465DA6_ai >= 0 && lv_x <= autoD1465DA6_ae) || (autoD1465DA6_ai < 0 && lv_x >= autoD1465DA6_ae) ) ; lv_x += autoD1465DA6_ai ) {
                if ((EventUnitInventoryItemContainer() == lv_j)) {
                    libNtve_gf_SetDialogItemImage(gv_itemsEquipedImage[lv_i][lv_j], "Assets\\Textures\\btn-border-queue-trainingslot01.dds", PlayerGroupSingle(UnitGetOwner(EventUnit())));
                    libNtve_gf_SetDialogItemImageType2(gv_itemsEquipedImage[lv_i][lv_j], false, PlayerGroupSingle(UnitGetOwner(EventUnitInventoryItem())));
                    libNtve_gf_SetDialogItemTooltip(gv_itemsEquipedButton[lv_i][lv_j], UserDataGetText("EquipableSlots", "Choice Info", "Slot Tooltip", lv_j), PlayerGroupSingle(UnitGetOwner(EventUnit())));
                    gv_equippableSlotFilled[UnitGetOwner(EventUnitInventoryItem())][EventUnitInventoryItemContainer()] = false;
                }

            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LinkToInventoryDrops_Init () {
    gt_LinkToInventoryDrops = TriggerCreate("gt_LinkToInventoryDrops_Func");
    TriggerAddEventUnitInventoryChange(gt_LinkToInventoryDrops, null, c_unitInventoryChangeDrops, null);
    TriggerAddEventUnitInventoryChange(gt_LinkToInventoryDrops, null, c_unitInventoryChangeExhausts, null);
    TriggerAddEventUnitInventoryChange(gt_LinkToInventoryDrops, null, c_unitInventoryChangeLoses, null);
    TriggerAddEventUnitInventoryChange(gt_LinkToInventoryDrops, null, c_unitInventoryChangeGives, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create Main Dialog
//--------------------------------------------------------------------------------------------------
bool gt_CreateMainDialog_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_cDialogWidth;
    int lv_cDialogHeight;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_cDialogWidth = ((gv_cButtonSize * gv_cofColumns) + (gv_cGapSizeHorizental * (gv_cofColumns + 1)));
    lv_cDialogHeight = ((gv_cButtonSize * gv_cofRows) + (gv_cGapSizeVertical * (gv_cofRows + 5)));

    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(lv_cDialogWidth, lv_cDialogHeight, c_anchorLeft, 0, 0, true);
    gv_leftPanel = DialogLastCreated();
    DialogSetVisible(DialogLastCreated(), PlayerGroupActive(), true);
    DialogSetImageVisible(gv_leftPanel, false);
    libNtve_gf_CreateDialogItemImage(gv_leftPanel, lv_cDialogWidth, lv_cDialogHeight, c_anchorTopLeft, 0, 0, StringToText(""), "Assets\\Textures\\ui_storymode_subtitle_frame.dds", c_triggerImageTypeHorizontalBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogCreate(500, 600, c_anchorTopRight, 0, 0, true);
    gv_rightToppanel = DialogLastCreated();
    DialogSetVisible(gv_rightToppanel, PlayerGroupActive(), true);
    DialogSetImageVisible(gv_rightToppanel, false);
    libNtve_gf_CreateDialogItemImage(gv_rightToppanel, 500, 600, c_anchorTopLeft, 0, 0, StringToText(""), "Assets\\Textures\\ui_frame_big_innerline_terran.dds", c_triggerImageTypeHorizontalBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogCreate(500, 600, c_anchorBottomRight, 0, 0, true);
    gv_rightBottompanel = DialogLastCreated();
    DialogSetVisible(gv_rightBottompanel, PlayerGroupActive(), true);
    DialogSetImageVisible(gv_rightBottompanel, false);
    libNtve_gf_CreateDialogItemImage(gv_rightBottompanel, 500, 600, c_anchorTopLeft, 0, 0, StringToText(""), "Assets\\Textures\\ui_frame_big_innerline_terran.dds", c_triggerImageTypeHorizontalBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogCreate(300, 100, c_anchorBottom, 0, 200, true);
    gv_bottomMiddlepanel = DialogLastCreated();
    DialogSetVisible(gv_bottomMiddlepanel, PlayerGroupActive(), true);
    libNtve_gf_CreateDialogItemButton(gv_bottomMiddlepanel, 250, 75, c_anchorCenter, 0, 0, StringExternal("Param/Value/56943C35"), StringExternal("Param/Value/462BD4F1"), "");
    gv_bottomMiddlebuttonReady = DialogControlLastCreated();
    DialogControlSetVisible(gv_bottomMiddlebuttonReady, PlayerGroupActive(), false);
    libNtve_gf_CreateDialogItemButton(gv_bottomMiddlepanel, 250, 75, c_anchorCenter, 0, 0, StringExternal("Param/Value/7BF60103"), StringExternal("Param/Value/43D66F6B"), "");
    gv_bottomMiddleCancelReadyButton = DialogControlLastCreated();
    DialogControlSetVisible(gv_bottomMiddleCancelReadyButton, PlayerGroupActive(), false);
    DialogCreate(75, 50, c_anchorTop, -75, 0, true);
    gv_topLeftMiddlePanel = DialogLastCreated();
    DialogSetVisible(DialogLastCreated(), PlayerGroupActive(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    libNtve_gf_CreateDialogItemImage(gv_topLeftMiddlePanel, 65, 40, c_anchorCenter, 0, 0, StringExternal("Param/Value/59B2CFFA"), "Assets\\Textures\\ui_research_frame_available_arrow_left.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogCreate(75, 50, c_anchorTop, 0, 0, true);
    gv_topMiddlePanel = DialogLastCreated();
    DialogSetVisible(DialogLastCreated(), PlayerGroupActive(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    libNtve_gf_CreateDialogItemImage(gv_topMiddlePanel, 65, 40, c_anchorCenter, 0, 0, StringExternal("Param/Value/0AC563A0"), "Assets\\Textures\\ui_tutorial_cameraicon2.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogCreate(75, 50, c_anchorTop, 75, 0, true);
    gv_topRightMiddlePanel = DialogLastCreated();
    DialogSetVisible(DialogLastCreated(), PlayerGroupActive(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    libNtve_gf_CreateDialogItemImage(gv_topRightMiddlePanel, 65, 40, c_anchorCenter, 0, 0, StringExternal("Param/Value/3143F47A"), "Assets\\Textures\\ui_research_frame_available_arrow_right.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemButton(gv_topLeftMiddlePanel, 75, 50, c_anchorCenter, 0, 0, StringExternal("Param/Value/0F21B57F"), StringExternal("Param/Value/8EFB671B"), "");
    gv_topMiddleLeftButton = DialogControlLastCreated();
    DialogControlSetVisible(gv_topMiddleLeftButton, PlayerGroupActive(), true);
    libNtve_gf_CreateDialogItemButton(gv_topMiddlePanel, 75, 50, c_anchorCenter, 0, 0, StringExternal("Param/Value/F58B12B2"), StringToText(""), "");
    gv_topMiddleButton = DialogControlLastCreated();
    DialogControlSetVisible(gv_topMiddleButton, PlayerGroupActive(), true);
    libNtve_gf_CreateDialogItemButton(gv_topRightMiddlePanel, 75, 50, c_anchorCenter, 0, 0, StringExternal("Param/Value/3B037B3B"), StringToText(""), "");
    gv_topMiddleRightButton = DialogControlLastCreated();
    DialogControlSetVisible(gv_topMiddleRightButton, PlayerGroupActive(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreateMainDialog_Init () {
    gt_CreateMainDialog = TriggerCreate("gt_CreateMainDialog_Func");
    TriggerAddEventMapInit(gt_CreateMainDialog);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create Buttons
//--------------------------------------------------------------------------------------------------
bool gt_CreateButtons_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_a;
    int lv_b;
    int lv_place;

    // Automatic Variable Declarations
    int autoE222675A_ae;
    const int autoE222675A_ai = 1;
    int auto41D6D71E_ae;
    const int auto41D6D71E_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoE222675A_ae = (gv_cofRows - 1);
    lv_a = 0;
    for ( ; ( (autoE222675A_ai >= 0 && lv_a <= autoE222675A_ae) || (autoE222675A_ai < 0 && lv_a >= autoE222675A_ae) ) ; lv_a += autoE222675A_ai ) {
        auto41D6D71E_ae = (gv_cofColumns - 1);
        lv_b = 0;
        for ( ; ( (auto41D6D71E_ai >= 0 && lv_b <= auto41D6D71E_ae) || (auto41D6D71E_ai < 0 && lv_b >= auto41D6D71E_ae) ) ; lv_b += auto41D6D71E_ai ) {
            lv_place = ((lv_a * 3) + lv_b);
            libNtve_gf_CreateDialogItemButton(gv_leftPanel, gv_cButtonSize, gv_cButtonSize, c_anchorTopLeft, ((lv_b * gv_cButtonSize) + ((lv_b + 1) * gv_cGapSizeHorizental)), ((lv_a * gv_cButtonSize) + ((lv_a + 3) * gv_cGapSizeVertical)), (UserDataGetText("HeroSelection", "Choice Info", "Tooltip Name", (lv_place + 1)) + TextWithColor(StringToText(UserDataGetString("HeroSelection", "Choice Info", "Tooltip Suffix", (lv_place + 1))), Color(100.00, 0.00, 0.00))), StringToText(""), "");
            gv_selectionButtons[lv_place] = DialogControlLastCreated();
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), true);
            if ((UserDataGetString("HeroSelection", "Choice Info", "Tooltip Suffix", (lv_place + 1)) == " coming soon")) {
                DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupActive(), false);
            }

            libNtve_gf_CreateDialogItemImage(gv_leftPanel, gv_cButtonSize, gv_cButtonSize, c_anchorTopLeft, ((lv_b * gv_cButtonSize) + ((lv_b + 1) * gv_cGapSizeHorizental)), ((lv_a * gv_cButtonSize) + ((lv_a + 3) * gv_cGapSizeVertical)), StringToText(""), "Assets\\Textures\\btn-border-protoss-queue-trainingslot01.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
            libNtve_gf_CreateDialogItemImage(gv_leftPanel, gv_cImageSize, gv_cImageSize, c_anchorTopLeft, (((lv_b * gv_cImageSize) + ((lv_b + 1) * gv_cGapSizeHorizental)) + ((lv_b * (gv_cBorderSize * 2)) + gv_cBorderSize)), (((lv_a * gv_cImageSize) + ((lv_a + 3) * gv_cGapSizeVertical)) + ((lv_a * (gv_cBorderSize * 2)) + gv_cBorderSize)), StringToText(""), UserDataGetImagePath("HeroSelection", "Choice Info", "Button Image", (lv_place + 1)), c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), true);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreateButtons_Init () {
    gt_CreateButtons = TriggerCreate("gt_CreateButtons_Func");
    TriggerAddEventMapInit(gt_CreateButtons);
}

//--------------------------------------------------------------------------------------------------
// Trigger: scrollTrigger
//--------------------------------------------------------------------------------------------------
bool gt_scrollTrigger_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_scrollState;
    int lv_udi;
    int lv_p;
    playergroup lv_pg;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_udi = EventDialogControl();
    lv_p = EventPlayer();
    lv_pg = PlayerGroupSingle(EventPlayer());

    // Actions
    if (!runActions) {
        return true;
    }

    if (((libNtve_gf_DialogItemValue(lv_udi, lv_p) > gv_scrollbarState[lv_p]) || (libNtve_gf_DialogItemValue(lv_udi, lv_p) < gv_scrollbarState[lv_p]))) {
        lv_scrollState = FixedToInt(libNtve_gf_DialogItemValue(lv_udi, lv_p));
        gv_scrollbarState[lv_p] = lv_scrollState;
        if ((gv_scrollbarState[lv_p] <= 50)) {
            DialogControlSetPosition(gv_textHolders, lv_pg, c_anchorTop, 10, 50);
        }
        else {
            DialogControlSetPosition(gv_textHolders, lv_pg, c_anchorTop, 10, (0 - lv_scrollState));
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_scrollTrigger_Init () {
    gt_scrollTrigger = TriggerCreate("gt_scrollTrigger_Func");
    TriggerAddEventDialogControl(gt_scrollTrigger, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeValueChanged);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Scrollbar
//--------------------------------------------------------------------------------------------------
bool gt_Scrollbar_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlCreateFromTemplate(gv_rightBottompanel, c_triggerControlTypeSlider, "MapLayouts/ScrollBar");
    gv_descriptionScrollBar = DialogControlLastCreated();
    DialogControlSetSize(gv_descriptionScrollBar, PlayerGroupActive(), 22, 592);
    DialogControlSetPosition(gv_descriptionScrollBar, PlayerGroupActive(), c_anchorRight, 3, 3);
    libNtve_gf_SetDialogItemCurrentValue(gv_descriptionScrollBar, 0.0, PlayerGroupActive());
    libNtve_gf_SetDialogItemMinimumValue(gv_descriptionScrollBar, 0.0, PlayerGroupActive());
    libNtve_gf_SetDialogItemMaximumValue(gv_descriptionScrollBar, 1000.0, PlayerGroupActive());
    DialogControlSetVisible(gv_descriptionScrollBar, PlayerGroupActive(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Scrollbar_Init () {
    gt_Scrollbar = TriggerCreate("gt_Scrollbar_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PopulateVoteDialog
//--------------------------------------------------------------------------------------------------
bool gt_PopulateVoteDialog_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_x;
    int lv_y;

    // Automatic Variable Declarations
    const int autoDABC31C2_ae = 5;
    const int autoDABC31C2_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGroupHasPlayer(gv_activePlayersT1, EventPlayer()) == true) && (EventDialogControl() == gv_bottomOptInCommandButton)) {
        if ((PlayerRace(EventPlayer()) == "Prot")) {
            libNtve_gf_CreateDialogItemButton(gv_bottomMiddleVoteRight, gv_vOTE_BUTTON_SIZE_BORDER, gv_vOTE_BUTTON_SIZE_BORDER, c_anchorLeft, gv_vOTE_BUTTON_SPACEING_HORIZONTAL, 0, ((StringExternal("Param/Value/1E7B6DD0") + (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + StringExternal("Param/Value/087A0AD7")))), StringToText(""), "");
            gv_protossVote = DialogControlLastCreated();
            DialogControlSetVisible(gv_protossVote, gv_activePlayersT1, true);
            libNtve_gf_CreateDialogItemImage(gv_bottomMiddleVoteRight, gv_vOTE_BUTTON_SIZE_BORDER, gv_vOTE_BUTTON_SIZE_BORDER, c_anchorLeft, gv_vOTE_BUTTON_SPACEING_HORIZONTAL, 0, StringToText(""), "Assets\\Textures\\btn-border-protoss-queue-trainingslot01.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
            libNtve_gf_CreateDialogItemImage(gv_bottomMiddleVoteRight, gv_vOTE_BUTTON_SIZE, gv_vOTE_BUTTON_SIZE, c_anchorLeft, 10, 0, StringToText(""), "Assets\\Textures\\ui_glues_help_armyicon_protoss.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
            gv_protossDecal = DialogControlLastCreated();
            DialogControlSetVisible(gv_protossDecal, gv_activePlayersT1, true);
            lv_x = 0;
            for ( ; ( (autoDABC31C2_ai >= 0 && lv_x <= autoDABC31C2_ae) || (autoDABC31C2_ai < 0 && lv_x >= autoDABC31C2_ae) ) ; lv_x += autoDABC31C2_ai ) {
                gv_playerVoteNum[lv_x] = EventPlayer();
            }
        }

        if ((PlayerRace(EventPlayer()) == "Terr")) {
            libNtve_gf_CreateDialogItemButton(gv_bottomMiddleVoteRight, gv_vOTE_BUTTON_SIZE_BORDER, gv_vOTE_BUTTON_SIZE_BORDER, c_anchorLeft, 10, 0, ((StringExternal("Param/Value/D9F223D8") + (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + StringExternal("Param/Value/B3CD801F")))), StringToText(""), "");
            gv_terranVote = DialogControlLastCreated();
            DialogControlSetVisible(gv_terranVote, gv_activePlayersT1, true);
            libNtve_gf_CreateDialogItemImage(gv_bottomMiddleVoteRight, gv_vOTE_BUTTON_SIZE_BORDER, gv_vOTE_BUTTON_SIZE_BORDER, c_anchorLeft, 10, 0, StringToText(""), "Assets\\Textures\\btn-border-protoss-queue-trainingslot01.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
            libNtve_gf_CreateDialogItemImage(gv_bottomMiddleVoteRight, gv_vOTE_BUTTON_SIZE, gv_vOTE_BUTTON_SIZE, c_anchorLeft, 10, 0, StringToText(""), "Assets\\Textures\\ui_glues_help_armyicon_terran.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
            gv_terranDecal = DialogControlLastCreated();
            DialogControlSetVisible(gv_terranDecal, gv_activePlayersT1, true);
        }

        if ((PlayerRace(EventPlayer()) == "Zerg")) {
            libNtve_gf_CreateDialogItemButton(gv_bottomMiddleVoteRight, gv_vOTE_BUTTON_SIZE_BORDER, gv_vOTE_BUTTON_SIZE_BORDER, c_anchorLeft, 10, 0, ((StringExternal("Param/Value/08CDAED1") + (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + StringExternal("Param/Value/D5E602E5")))), StringToText(""), "");
            gv_zergVote = DialogControlLastCreated();
            DialogControlSetVisible(gv_zergVote, gv_activePlayersT1, true);
            libNtve_gf_CreateDialogItemImage(gv_bottomMiddleVoteRight, gv_vOTE_BUTTON_SIZE_BORDER, gv_vOTE_BUTTON_SIZE_BORDER, c_anchorLeft, 10, 0, StringToText(""), "Assets\\Textures\\btn-border-protoss-queue-trainingslot01.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
            libNtve_gf_CreateDialogItemImage(gv_bottomMiddleVoteRight, gv_vOTE_BUTTON_SIZE, gv_vOTE_BUTTON_SIZE, c_anchorLeft, 10, 0, StringToText(""), "Assets\\Textures\\ui_glues_help_armyicon_zerg.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
            gv_zergDecal = DialogControlLastCreated();
            DialogControlSetVisible(gv_zergDecal, gv_activePlayersT1, true);
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PopulateVoteDialog_Init () {
    gt_PopulateVoteDialog = TriggerCreate("gt_PopulateVoteDialog_Func");
    TriggerAddEventDialogControl(gt_PopulateVoteDialog, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Show Description
//--------------------------------------------------------------------------------------------------
bool gt_HeroShowDescription_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_mathForDescrip;
    int lv_x;
    int lv_y;
    int lv_z;
    int lv_i;
    int lv_j;

    // Automatic Variable Declarations
    const int auto9E2E3302_ae = 1;
    const int auto9E2E3302_ai = 1;
    const int autoC30C1AF2_ae = 5;
    const int autoC30C1AF2_ai = 1;
    const int autoC66CE31C_ae = 29;
    const int autoC66CE31C_ai = 1;
    int autoEACC3668_ae;
    const int autoEACC3668_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_z = 0;
    for ( ; ( (auto9E2E3302_ai >= 0 && lv_z <= auto9E2E3302_ae) || (auto9E2E3302_ai < 0 && lv_z >= auto9E2E3302_ae) ) ; lv_z += auto9E2E3302_ai ) {
        lv_y = 0;
        for ( ; ( (autoC30C1AF2_ai >= 0 && lv_y <= autoC30C1AF2_ae) || (autoC30C1AF2_ai < 0 && lv_y >= autoC30C1AF2_ae) ) ; lv_y += autoC30C1AF2_ai ) {
            lv_x = 0;
            for ( ; ( (autoC66CE31C_ai >= 0 && lv_x <= autoC66CE31C_ae) || (autoC66CE31C_ai < 0 && lv_x >= autoC66CE31C_ae) ) ; lv_x += autoC66CE31C_ai ) {
                if ((EventPlayer() == PlayerGroupPlayer(gv_setTeam[lv_z], (lv_y + 1))) && (EventDialogControl() == gv_selectionButtons[lv_x])) {
                    if ((gv_scrollbarShow == false)) {
                        TriggerExecute(gt_Scrollbar, true, false);
                        gv_scrollbarShow = true;
                    }

                    libNtve_gf_SetDialogItemImage(gv_portraitHolders, UserDataGetImagePath("HeroSelection22", "Choice Info", "Portrait Image", (lv_x + 1)), PlayerGroupSingle(EventPlayer()));
                    DialogControlSetVisible(gv_portraitHolders, PlayerGroupSingle(EventPlayer()), true);
                    libNtve_gf_SetDialogItemText(gv_textHolders, UserDataGetText("HeroSelection22", "Choice Info", "Hero Description Text", (lv_x + 1)), PlayerGroupSingle(EventPlayer()));
                    DialogControlSetVisible(gv_textHolders, PlayerGroupSingle(EventPlayer()), true);
                    lv_mathForDescrip = (lv_x * 9);
                    autoEACC3668_ae = (lv_mathForDescrip + 9);
                    lv_j = (lv_mathForDescrip + 1);
                    for ( ; ( (autoEACC3668_ai >= 0 && lv_j <= autoEACC3668_ae) || (autoEACC3668_ai < 0 && lv_j >= autoEACC3668_ae) ) ; lv_j += autoEACC3668_ai ) {
                        libNtve_gf_SetDialogItemImage(gv_abilImages[lv_i], UserDataGetImagePath("HeroSelection22", "Choice Info", "Ability Image", lv_j), PlayerGroupSingle(EventPlayer()));
                        libNtve_gf_SetDialogItemTooltip(gv_abilImages[lv_i], UserDataGetText("HeroSelection22", "Choice Info", "Ability Discription", lv_j), PlayerGroupSingle(EventPlayer()));
                        DialogControlSetVisible(gv_abilImages[lv_i], PlayerGroupSingle(EventPlayer()), true);
                        lv_i += 1;
                    }
                }

            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HeroShowDescription_Init () {
    gt_HeroShowDescription = TriggerCreate("gt_HeroShowDescription_Func");
    TriggerAddEventDialogControl(gt_HeroShowDescription, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create Hero Potraits
//--------------------------------------------------------------------------------------------------
bool gt_CreateHeroPotraits_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_x;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateDialogItemImage(gv_rightToppanel, 152, 232, c_anchorTopLeft, 174, 50, StringToText(""), UserDataGetImagePath("HeroSelection22", "Choice Info", "Portrait Image", (lv_x + 1)), c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_portraitHolders = DialogControlLastCreated();
    DialogControlSetVisible(gv_portraitHolders, PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemLabel(gv_rightBottompanel, 400, 1000, c_anchorTop, 10, 50, UserDataGetText("HeroSelection22", "Choice Info", "Hero Description Text", (lv_x + 1)), ColorWithAlpha(0,0,0,0), true, 3.0);
    gv_textHolders = DialogControlLastCreated();
    DialogControlSetVisible(gv_textHolders, PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreateHeroPotraits_Init () {
    gt_CreateHeroPotraits = TriggerCreate("gt_CreateHeroPotraits_Func");
    TriggerAddEventMapInit(gt_CreateHeroPotraits);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create Hero Abilities
//--------------------------------------------------------------------------------------------------
bool gt_CreateHeroAbilities_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateDialogItemImage(gv_rightToppanel, 76, 76, c_anchorTopLeft, 50, 300, StringToText(""), "Assets\\Textures\\btn-border-protoss-queue-trainingslot01.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(gv_rightToppanel, 75, 75, c_anchorTopLeft, 50, 300, StringExternal("Param/Value/9D1FDB1C"), "Assets\\Textures\\btn-ability-terran-stimpack-color.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_abilImages[0] = DialogControlLastCreated();
    DialogControlSetVisible(gv_abilImages[0], PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemImage(gv_rightToppanel, 76, 76, c_anchorTopLeft, 150, 300, StringToText(""), "Assets\\Textures\\btn-border-protoss-queue-trainingslot01.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(gv_rightToppanel, 75, 75, c_anchorTopLeft, 150, 300, StringExternal("Param/Value/46BF23D8"), "Assets\\Textures\\btn-techupgrade-terran-impalerrounds.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_abilImages[1] = DialogControlLastCreated();
    DialogControlSetVisible(gv_abilImages[1], PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemImage(gv_rightToppanel, 76, 76, c_anchorTopLeft, 250, 300, StringToText(""), "Assets\\Textures\\btn-border-protoss-queue-trainingslot01.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(gv_rightToppanel, 75, 75, c_anchorTopLeft, 250, 300, StringExternal("Param/Value/5D435E93"), "Assets\\Textures\\btn-tips-mercenary.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_abilImages[2] = DialogControlLastCreated();
    DialogControlSetVisible(gv_abilImages[2], PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemImage(gv_rightToppanel, 76, 76, c_anchorTopLeft, 350, 300, StringToText(""), "Assets\\Textures\\btn-border-protoss-queue-trainingslot01.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(gv_rightToppanel, 75, 75, c_anchorTopLeft, 350, 300, StringExternal("Param/Value/8A3624BD"), "Assets\\Textures\\btn-tips-terran-penetrator.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_abilImages[3] = DialogControlLastCreated();
    DialogControlSetVisible(gv_abilImages[3], PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemImage(gv_rightToppanel, 76, 76, c_anchorTopLeft, 50, 400, StringToText(""), "Assets\\Textures\\btn-border-protoss-queue-trainingslot01.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(gv_rightToppanel, 75, 75, c_anchorTopLeft, 50, 400, StringExternal("Param/Value/D45AC54A"), "Assets\\Textures\\btn-ability-protoss-prismaticbeam-color.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_abilImages[4] = DialogControlLastCreated();
    DialogControlSetVisible(gv_abilImages[4], PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemImage(gv_rightToppanel, 76, 76, c_anchorTopLeft, 150, 400, StringToText(""), "Assets\\Textures\\btn-border-protoss-queue-trainingslot01.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(gv_rightToppanel, 75, 75, c_anchorTopLeft, 150, 400, StringExternal("Param/Value/A80E9483"), "EditorData\\Images\\UI_Arcade_IconTMarine.tga", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_abilImages[5] = DialogControlLastCreated();
    DialogControlSetVisible(gv_abilImages[5], PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemImage(gv_rightToppanel, 76, 76, c_anchorTopLeft, 250, 400, StringToText(""), "Assets\\Textures\\btn-border-protoss-queue-trainingslot01.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(gv_rightToppanel, 75, 75, c_anchorTopLeft, 250, 400, StringExternal("Param/Value/B61FEF18"), "Assets\\Textures\\btn-techupgrade-terran-jackhammerconcussion.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_abilImages[6] = DialogControlLastCreated();
    DialogControlSetVisible(gv_abilImages[6], PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemImage(gv_rightToppanel, 76, 76, c_anchorTopLeft, 50, 500, StringToText(""), "Assets\\Textures\\btn-border-protoss-queue-trainingslot01.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(gv_rightToppanel, 75, 75, c_anchorTopLeft, 50, 500, StringExternal("Param/Value/2677459B"), "Assets\\Textures\\btn-lostviking_sidemissiles.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_abilImages[7] = DialogControlLastCreated();
    DialogControlSetVisible(gv_abilImages[7], PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemImage(gv_rightToppanel, 76, 76, c_anchorTopLeft, 150, 500, StringToText(""), "Assets\\Textures\\btn-border-protoss-queue-trainingslot01.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(gv_rightToppanel, 75, 75, c_anchorTopLeft, 150, 500, StringExternal("Param/Value/3C77EE5C"), "Assets\\Textures\\btn-upgrade-terran-twin-linkedflamethrower.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_abilImages[8] = DialogControlLastCreated();
    DialogControlSetVisible(gv_abilImages[8], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreateHeroAbilities_Init () {
    gt_CreateHeroAbilities = TriggerCreate("gt_CreateHeroAbilities_Func");
    TriggerAddEventMapInit(gt_CreateHeroAbilities);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Button Pressed
//--------------------------------------------------------------------------------------------------
bool gt_HeroButtonPressed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_a;
    int lv_b;
    int lv_c;
    int lv_place;

    // Automatic Variable Declarations
    const int auto98FCF702_ae = 1;
    const int auto98FCF702_ai = 1;
    const int auto1D3116E2_ae = 5;
    const int auto1D3116E2_ai = 1;
    const int auto5F1DCF0C_ae = 29;
    const int auto5F1DCF0C_ai = 1;
    unitgroup auto09093810_g;
    int auto09093810_u;
    unit auto09093810_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_c = 0;
    for ( ; ( (auto98FCF702_ai >= 0 && lv_c <= auto98FCF702_ae) || (auto98FCF702_ai < 0 && lv_c >= auto98FCF702_ae) ) ; lv_c += auto98FCF702_ai ) {
        lv_a = 0;
        for ( ; ( (auto1D3116E2_ai >= 0 && lv_a <= auto1D3116E2_ae) || (auto1D3116E2_ai < 0 && lv_a >= auto1D3116E2_ae) ) ; lv_a += auto1D3116E2_ai ) {
            lv_b = 0;
            for ( ; ( (auto5F1DCF0C_ai >= 0 && lv_b <= auto5F1DCF0C_ae) || (auto5F1DCF0C_ai < 0 && lv_b >= auto5F1DCF0C_ae) ) ; lv_b += auto5F1DCF0C_ai ) {
                if (((EventPlayer() == PlayerGroupPlayer(gv_setTeam[lv_c], (lv_a + 1))) && (EventDialogControl() == gv_selectionButtons[lv_b]))) {
                    DialogControlSetEnabled(gv_oldButton[EventPlayer()], PlayerGroupSingle(EventPlayer()), true);
                    gv_oldButton[EventPlayer()] = EventDialogControl();
                    lv_place = ((6 * lv_c) + lv_a);
                    gv_clickedherobuttons[(EventPlayer() - 1)] = true;
                    auto09093810_g = UnitGroup(null, EventPlayer(), gv_playerSpawn[lv_place], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                    auto09093810_u = UnitGroupCount(auto09093810_g, c_unitCountAll);
                    for (;; auto09093810_u -= 1) {
                        auto09093810_var = UnitGroupUnitFromEnd(auto09093810_g, auto09093810_u);
                        if (auto09093810_var == null) { break; }
                        UnitRemove(auto09093810_var);
                    }
                    Wait(0.01, c_timeGame);
                    UnitCreate(1, UserDataGetUnit("HeroSelection", "Choice Info", "Hero Unit", (lv_b + 1)), c_unitCreateIgnorePlacement, EventPlayer(), RegionGetCenter(gv_playerSpawn[lv_place]), (270.0 + (60.0 * lv_a)));
                    gv_playerUnits[(EventPlayer() - 1)] = UnitLastCreated();
                    libNtve_gf_SendActorMessageToUnit(gv_playerUnits[lv_place], "AnimPlay Attack Attack");
                    SoundPlayOnUnit(SoundLink(UserDataGetSound("HeroSelection", "Choice Info", "Selection Sound", (lv_b + 1)), c_soundIndexAny), PlayerGroupSingle(EventPlayer()), gv_playerUnits[lv_place], 0.0, 100.0, 0.0);
                    UnitSetState(gv_playerUnits[lv_place], c_unitStateFidget, false);
                    DialogControlSetEnabled(gv_oldButton[EventPlayer()], PlayerGroupSingle(EventPlayer()), false);
                    DialogControlSetVisible(gv_bottomMiddlebuttonReady, PlayerGroupSingle(EventPlayer()), true);
                    break;
                    break;
                }

            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HeroButtonPressed_Init () {
    gt_HeroButtonPressed = TriggerCreate("gt_HeroButtonPressed_Func");
    TriggerAddEventDialogControl(gt_HeroButtonPressed, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Display Not Ready Players
//--------------------------------------------------------------------------------------------------
bool gt_DisplayNotReadyPlayers_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_a;

    // Automatic Variable Declarations
    const int auto71F282DA_ae = 11;
    const int auto71F282DA_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, StringExternal("Param/Value/7E425C45"));
    Wait(2.0, c_timeGame);
    lv_a = 0;
    for ( ; ( (auto71F282DA_ai >= 0 && lv_a <= auto71F282DA_ae) || (auto71F282DA_ai < 0 && lv_a >= auto71F282DA_ae) ) ; lv_a += auto71F282DA_ai ) {
        if ((gv_playerReadyTrueFalse[lv_a] == false)) {
            UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, PlayerName((lv_a + 1)));
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DisplayNotReadyPlayers_Init () {
    gt_DisplayNotReadyPlayers = TriggerCreate("gt_DisplayNotReadyPlayers_Func");
    TriggerAddEventTimePeriodic(gt_DisplayNotReadyPlayers, 19.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ready Checked Count
//--------------------------------------------------------------------------------------------------
bool gt_ReadyCheckedCount_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_y;
    int lv_x;
    int lv_unit;

    // Automatic Variable Declarations
    int autoC50E2598_ae;
    const int autoC50E2598_ai = 1;
    int autoCA04CDD1_ae;
    const int autoCA04CDD1_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_bottomMiddlebuttonReady))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_readyCheckCount += 1;
    gv_playerReadyTrueFalse[(EventPlayer() - 1)] = true;
    if (((PlayerGroupCount(PlayerGroupActive()) - 2) == gv_readyCheckCount)) {
        TriggerExecute(gt_PlayersReady, true, false);
        TriggerEnable(gt_DisplayNotReadyPlayers, false);
        UIClearMessages(PlayerGroupActive(), c_messageAreaSubtitle);
    }
    else {
        DialogControlSetVisible(gv_bottomMiddlebuttonReady, PlayerGroupSingle(EventPlayer()), false);
        Wait(0.1, c_timeGame);
        DialogControlSetVisible(gv_bottomMiddleCancelReadyButton, PlayerGroupSingle(EventPlayer()), true);
        autoC50E2598_ae = (gv_cofRows - 1);
        lv_x = 0;
        for ( ; ( (autoC50E2598_ai >= 0 && lv_x <= autoC50E2598_ae) || (autoC50E2598_ai < 0 && lv_x >= autoC50E2598_ae) ) ; lv_x += autoC50E2598_ai ) {
            autoCA04CDD1_ae = (gv_cofColumns - 1);
            lv_y = 0;
            for ( ; ( (autoCA04CDD1_ai >= 0 && lv_y <= autoCA04CDD1_ae) || (autoCA04CDD1_ai < 0 && lv_y >= autoCA04CDD1_ae) ) ; lv_y += autoCA04CDD1_ai ) {
                lv_unit = ((lv_x * 3) + lv_y);
                DialogControlSetEnabled(gv_selectionButtons[lv_unit], PlayerGroupSingle(EventPlayer()), false);
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReadyCheckedCount_Init () {
    gt_ReadyCheckedCount = TriggerCreate("gt_ReadyCheckedCount_Func");
    TriggerAddEventDialogControl(gt_ReadyCheckedCount, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cancel Ready Count
//--------------------------------------------------------------------------------------------------
bool gt_CancelReadyCount_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_y;
    int lv_x;
    int lv_unit;

    // Automatic Variable Declarations
    int auto54CDAD4D_ae;
    const int auto54CDAD4D_ai = 1;
    int autoBA93D57E_ae;
    const int autoBA93D57E_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_bottomMiddleCancelReadyButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_readyCheckCount -= 1;
    gv_playerReadyTrueFalse[EventPlayer()] = false;
    DialogControlSetVisible(gv_bottomMiddleCancelReadyButton, PlayerGroupSingle(EventPlayer()), false);
    Wait(0.1, c_timeGame);
    DialogControlSetVisible(gv_bottomMiddlebuttonReady, PlayerGroupSingle(EventPlayer()), true);
    auto54CDAD4D_ae = (gv_cofRows - 1);
    lv_x = 0;
    for ( ; ( (auto54CDAD4D_ai >= 0 && lv_x <= auto54CDAD4D_ae) || (auto54CDAD4D_ai < 0 && lv_x >= auto54CDAD4D_ae) ) ; lv_x += auto54CDAD4D_ai ) {
        autoBA93D57E_ae = (gv_cofColumns - 1);
        lv_y = 0;
        for ( ; ( (autoBA93D57E_ai >= 0 && lv_y <= autoBA93D57E_ae) || (autoBA93D57E_ai < 0 && lv_y >= autoBA93D57E_ae) ) ; lv_y += autoBA93D57E_ai ) {
            lv_unit = ((lv_x * 3) + lv_y);
            if ((UserDataGetString("HeroSelection", "Choice Info", "Tooltip Suffix", (lv_unit + 1)) == " coming soon")) {
                DialogControlSetEnabled(gv_selectionButtons[lv_unit], PlayerGroupSingle(EventPlayer()), false);
            }
            else {
                DialogControlSetEnabled(gv_selectionButtons[lv_unit], PlayerGroupSingle(EventPlayer()), true);
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CancelReadyCount_Init () {
    gt_CancelReadyCount = TriggerCreate("gt_CancelReadyCount_Func");
    TriggerAddEventDialogControl(gt_CancelReadyCount, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Leaves Game
//--------------------------------------------------------------------------------------------------
bool gt_PlayerLeavesGame_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoE20E5755_g;
    int autoE20E5755_u;
    unit autoE20E5755_var;
    unitgroup auto17863B0B_g;
    int auto17863B0B_u;
    unit auto17863B0B_var;
    unitgroup auto84C0E1C4_g;
    int auto84C0E1C4_u;
    unit auto84C0E1C4_var;
    unitgroup auto73AE536F_g;
    int auto73AE536F_u;
    unit auto73AE536F_var;
    unitgroup autoD7160D1A_g;
    int autoD7160D1A_u;
    unit autoD7160D1A_var;
    unitgroup auto6CC466E0_g;
    int auto6CC466E0_u;
    unit auto6CC466E0_var;
    unitgroup auto21FBEFDE_g;
    int auto21FBEFDE_u;
    unit auto21FBEFDE_var;
    unitgroup autoD20DE4CD_g;
    int autoD20DE4CD_u;
    unit autoD20DE4CD_var;
    unitgroup auto25DC53C7_g;
    int auto25DC53C7_u;
    unit auto25DC53C7_var;
    playergroup auto8AF7ACB6_g;
    int auto8AF7ACB6_var;
    unitgroup auto7876D045_g;
    int auto7876D045_u;
    unit auto7876D045_var;
    unitgroup auto3C7752CB_g;
    int auto3C7752CB_u;
    unit auto3C7752CB_var;
    unitgroup auto73FB6E43_g;
    int auto73FB6E43_u;
    unit auto73FB6E43_var;
    unitgroup auto10C59EFE_g;
    int auto10C59EFE_u;
    unit auto10C59EFE_var;
    unitgroup auto8E6FB91F_g;
    int auto8E6FB91F_u;
    unit auto8E6FB91F_var;
    unitgroup autoF67283DA_g;
    int autoF67283DA_u;
    unit autoF67283DA_var;
    unitgroup auto626597BB_g;
    int auto626597BB_u;
    unit auto626597BB_var;
    unitgroup autoB5BB4A94_g;
    int autoB5BB4A94_u;
    unit autoB5BB4A94_var;
    unitgroup autoA136C68B_g;
    int autoA136C68B_u;
    unit autoA136C68B_var;
    unitgroup auto0B72B6A2_g;
    int auto0B72B6A2_u;
    unit auto0B72B6A2_var;
    playergroup autoE4EA0528_g;
    int autoE4EA0528_var;
    unitgroup auto61200DF3_g;
    int auto61200DF3_u;
    unit auto61200DF3_var;

    // Conditions
    if (testConds) {
        if (!((gv_playerReadyTrueFalse[(EventPlayer() - 1)] == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_readyCheckCount -= 1;
    if ((EventPlayer() == gv_isinCommand[0])) {
        TriggerEnable(gt_Team1Win, false);
        TriggerEnable(gt_Team2Win, false);
        autoE20E5755_g = UnitGroup(null, gv_isinCommand[0], RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterHeroic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoE20E5755_u = UnitGroupCount(autoE20E5755_g, c_unitCountAll);
        for (;; autoE20E5755_u -= 1) {
            autoE20E5755_var = UnitGroupUnitFromEnd(autoE20E5755_g, autoE20E5755_u);
            if (autoE20E5755_var == null) { break; }
            AISetUnitScriptControlled(autoE20E5755_var, true);
            UnitSetOwner(autoE20E5755_var, 13, true);
            AISetUnitScriptControlled(autoE20E5755_var, false);
        }
        Wait(0.2, c_timeGame);
        auto17863B0B_g = UnitGroup(null, gv_isinCommand[0], RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterHeroic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto17863B0B_u = UnitGroupCount(auto17863B0B_g, c_unitCountAll);
        for (;; auto17863B0B_u -= 1) {
            auto17863B0B_var = UnitGroupUnitFromEnd(auto17863B0B_g, auto17863B0B_u);
            if (auto17863B0B_var == null) { break; }
            AISetUnitScriptControlled(auto17863B0B_var, true);
            UnitSetOwner(auto17863B0B_var, 13, true);
            AISetUnitScriptControlled(auto17863B0B_var, false);
        }
        auto84C0E1C4_g = UnitGroup("CommandCenter", gv_isinCommand[0], RegionPlayableMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterHeroic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto84C0E1C4_u = UnitGroupCount(auto84C0E1C4_g, c_unitCountAll);
        for (;; auto84C0E1C4_u -= 1) {
            auto84C0E1C4_var = UnitGroupUnitFromEnd(auto84C0E1C4_g, auto84C0E1C4_u);
            if (auto84C0E1C4_var == null) { break; }
            UnitSelect(auto84C0E1C4_var, EventPlayer(), true);
            UnitIssueOrder(auto84C0E1C4_var, Order(AbilityCommand("LoadUnloadUnit", 1)), c_orderQueueReplace);
        }
        auto73AE536F_g = UnitGroup("PlanetaryFortress", gv_isinCommand[0], RegionPlayableMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterHeroic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto73AE536F_u = UnitGroupCount(auto73AE536F_g, c_unitCountAll);
        for (;; auto73AE536F_u -= 1) {
            auto73AE536F_var = UnitGroupUnitFromEnd(auto73AE536F_g, auto73AE536F_u);
            if (auto73AE536F_var == null) { break; }
            UnitSelect(auto73AE536F_var, EventPlayer(), true);
            UnitIssueOrder(auto73AE536F_var, Order(AbilityCommand("LoadUnloadUnit", 1)), c_orderQueueReplace);
        }
        autoD7160D1A_g = UnitGroup("OrbitalCommand", gv_isinCommand[0], RegionPlayableMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterHeroic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoD7160D1A_u = UnitGroupCount(autoD7160D1A_g, c_unitCountAll);
        for (;; autoD7160D1A_u -= 1) {
            autoD7160D1A_var = UnitGroupUnitFromEnd(autoD7160D1A_g, autoD7160D1A_u);
            if (autoD7160D1A_var == null) { break; }
            UnitSelect(autoD7160D1A_var, EventPlayer(), true);
            UnitIssueOrder(autoD7160D1A_var, Order(AbilityCommand("LoadUnloadUnit", 1)), c_orderQueueReplace);
        }
        auto6CC466E0_g = UnitGroup("Nexus", gv_isinCommand[0], RegionPlayableMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterHeroic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto6CC466E0_u = UnitGroupCount(auto6CC466E0_g, c_unitCountAll);
        for (;; auto6CC466E0_u -= 1) {
            auto6CC466E0_var = UnitGroupUnitFromEnd(auto6CC466E0_g, auto6CC466E0_u);
            if (auto6CC466E0_var == null) { break; }
            UnitSelect(auto6CC466E0_var, EventPlayer(), true);
            UnitIssueOrder(auto6CC466E0_var, Order(AbilityCommand("LoadUnloadUnit", 1)), c_orderQueueReplace);
        }
        auto21FBEFDE_g = UnitGroup("Hatchery", gv_isinCommand[0], RegionPlayableMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterHeroic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto21FBEFDE_u = UnitGroupCount(auto21FBEFDE_g, c_unitCountAll);
        for (;; auto21FBEFDE_u -= 1) {
            auto21FBEFDE_var = UnitGroupUnitFromEnd(auto21FBEFDE_g, auto21FBEFDE_u);
            if (auto21FBEFDE_var == null) { break; }
            UnitSelect(auto21FBEFDE_var, EventPlayer(), true);
            UnitIssueOrder(auto21FBEFDE_var, Order(AbilityCommand("LoadUnloadUnit", 1)), c_orderQueueReplace);
        }
        autoD20DE4CD_g = UnitGroup("Lair", gv_isinCommand[0], RegionPlayableMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterHeroic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoD20DE4CD_u = UnitGroupCount(autoD20DE4CD_g, c_unitCountAll);
        for (;; autoD20DE4CD_u -= 1) {
            autoD20DE4CD_var = UnitGroupUnitFromEnd(autoD20DE4CD_g, autoD20DE4CD_u);
            if (autoD20DE4CD_var == null) { break; }
            UnitSelect(autoD20DE4CD_var, EventPlayer(), true);
            UnitIssueOrder(autoD20DE4CD_var, Order(AbilityCommand("LoadUnloadUnit", 1)), c_orderQueueReplace);
        }
        auto25DC53C7_g = UnitGroup("Hive", gv_isinCommand[0], RegionPlayableMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterHeroic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto25DC53C7_u = UnitGroupCount(auto25DC53C7_g, c_unitCountAll);
        for (;; auto25DC53C7_u -= 1) {
            auto25DC53C7_var = UnitGroupUnitFromEnd(auto25DC53C7_g, auto25DC53C7_u);
            if (auto25DC53C7_var == null) { break; }
            UnitSelect(auto25DC53C7_var, EventPlayer(), true);
            UnitIssueOrder(auto25DC53C7_var, Order(AbilityCommand("LoadUnloadUnit", 1)), c_orderQueueReplace);
        }
        libLbty_gf_OrderWorkerstoGatherNearbyResources(RegionPlayableMap(), 13);
        AISetGroupScriptControlled(UnitGroup(null, 14, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterHeroic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), false);
        auto8AF7ACB6_g = GameAttributePlayersForTeam(1);
        auto8AF7ACB6_var = -1;
        while (true) {
            auto8AF7ACB6_var = PlayerGroupNextPlayer(auto8AF7ACB6_g, auto8AF7ACB6_var);
            if (auto8AF7ACB6_var < 0) { break; }
            auto7876D045_g = UnitGroup(null, auto8AF7ACB6_var, RegionEntireMap(), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto7876D045_u = UnitGroupCount(auto7876D045_g, c_unitCountAll);
            for (;; auto7876D045_u -= 1) {
                auto7876D045_var = UnitGroupUnitFromEnd(auto7876D045_g, auto7876D045_u);
                if (auto7876D045_var == null) { break; }
                UnitAbilityEnable(auto7876D045_var, "TakeCommand", true);
            }
        }
        PlayerModifyPropertyInt(gv_isinCommand[0], c_playerPropMinerals, c_playerPropOperSetTo, PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals));
        PlayerModifyPropertyInt(gv_isinCommand[0], c_playerPropVespene, c_playerPropOperSetTo, PlayerGetPropertyInt(EventPlayer(), c_playerPropVespene));
        PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSetTo, 0);
        PlayerModifyPropertyInt(EventPlayer(), c_playerPropVespene, c_playerPropOperSetTo, 0);
        libNtve_gf_SetAllianceOneWay(gv_isinCommand[0], 15, libNtve_ge_AllianceSetting_Enemy);
        gv_isinCommand[0] = 13;
        TriggerEnable(gt_Team1Win, true);
        TriggerEnable(gt_Team2Win, true);
        TriggerExecute(gt_Team1Win, true, false);
        TriggerExecute(gt_Team2Win, true, false);
    }

    if ((EventPlayer() == gv_isinCommand[1])) {
        TriggerEnable(gt_Team1Win, false);
        TriggerEnable(gt_Team2Win, false);
        auto3C7752CB_g = UnitGroup(null, gv_isinCommand[1], RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterHeroic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto3C7752CB_u = UnitGroupCount(auto3C7752CB_g, c_unitCountAll);
        for (;; auto3C7752CB_u -= 1) {
            auto3C7752CB_var = UnitGroupUnitFromEnd(auto3C7752CB_g, auto3C7752CB_u);
            if (auto3C7752CB_var == null) { break; }
            AISetUnitScriptControlled(auto3C7752CB_var, true);
            UnitSetOwner(auto3C7752CB_var, 14, true);
            AISetUnitScriptControlled(auto3C7752CB_var, false);
        }
        Wait(0.2, c_timeGame);
        auto73FB6E43_g = UnitGroup(null, gv_isinCommand[1], RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterHeroic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto73FB6E43_u = UnitGroupCount(auto73FB6E43_g, c_unitCountAll);
        for (;; auto73FB6E43_u -= 1) {
            auto73FB6E43_var = UnitGroupUnitFromEnd(auto73FB6E43_g, auto73FB6E43_u);
            if (auto73FB6E43_var == null) { break; }
            AISetUnitScriptControlled(auto73FB6E43_var, true);
            UnitSetOwner(auto73FB6E43_var, 14, true);
            AISetUnitScriptControlled(auto73FB6E43_var, false);
        }
        auto10C59EFE_g = UnitGroup("CommandCenter", gv_isinCommand[1], RegionPlayableMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterHeroic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto10C59EFE_u = UnitGroupCount(auto10C59EFE_g, c_unitCountAll);
        for (;; auto10C59EFE_u -= 1) {
            auto10C59EFE_var = UnitGroupUnitFromEnd(auto10C59EFE_g, auto10C59EFE_u);
            if (auto10C59EFE_var == null) { break; }
            UnitIssueOrder(auto10C59EFE_var, Order(AbilityCommand("LoadUnloadUnit", 1)), c_orderQueueReplace);
        }
        auto8E6FB91F_g = UnitGroup("PlanetaryFortress", gv_isinCommand[1], RegionPlayableMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterHeroic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto8E6FB91F_u = UnitGroupCount(auto8E6FB91F_g, c_unitCountAll);
        for (;; auto8E6FB91F_u -= 1) {
            auto8E6FB91F_var = UnitGroupUnitFromEnd(auto8E6FB91F_g, auto8E6FB91F_u);
            if (auto8E6FB91F_var == null) { break; }
            UnitIssueOrder(auto8E6FB91F_var, Order(AbilityCommand("LoadUnloadUnit", 1)), c_orderQueueReplace);
        }
        autoF67283DA_g = UnitGroup("OrbitalCommand", gv_isinCommand[1], RegionPlayableMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterHeroic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoF67283DA_u = UnitGroupCount(autoF67283DA_g, c_unitCountAll);
        for (;; autoF67283DA_u -= 1) {
            autoF67283DA_var = UnitGroupUnitFromEnd(autoF67283DA_g, autoF67283DA_u);
            if (autoF67283DA_var == null) { break; }
            UnitIssueOrder(autoF67283DA_var, Order(AbilityCommand("LoadUnloadUnit", 1)), c_orderQueueReplace);
        }
        auto626597BB_g = UnitGroup("Nexus", gv_isinCommand[1], RegionPlayableMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterHeroic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto626597BB_u = UnitGroupCount(auto626597BB_g, c_unitCountAll);
        for (;; auto626597BB_u -= 1) {
            auto626597BB_var = UnitGroupUnitFromEnd(auto626597BB_g, auto626597BB_u);
            if (auto626597BB_var == null) { break; }
            UnitIssueOrder(auto626597BB_var, Order(AbilityCommand("LoadUnloadUnit", 1)), c_orderQueueReplace);
        }
        autoB5BB4A94_g = UnitGroup("Hatchery", gv_isinCommand[1], RegionPlayableMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterHeroic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoB5BB4A94_u = UnitGroupCount(autoB5BB4A94_g, c_unitCountAll);
        for (;; autoB5BB4A94_u -= 1) {
            autoB5BB4A94_var = UnitGroupUnitFromEnd(autoB5BB4A94_g, autoB5BB4A94_u);
            if (autoB5BB4A94_var == null) { break; }
            UnitIssueOrder(autoB5BB4A94_var, Order(AbilityCommand("LoadUnloadUnit", 1)), c_orderQueueReplace);
        }
        autoA136C68B_g = UnitGroup("Lair", gv_isinCommand[1], RegionPlayableMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterHeroic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoA136C68B_u = UnitGroupCount(autoA136C68B_g, c_unitCountAll);
        for (;; autoA136C68B_u -= 1) {
            autoA136C68B_var = UnitGroupUnitFromEnd(autoA136C68B_g, autoA136C68B_u);
            if (autoA136C68B_var == null) { break; }
            UnitIssueOrder(autoA136C68B_var, Order(AbilityCommand("LoadUnloadUnit", 1)), c_orderQueueReplace);
        }
        auto0B72B6A2_g = UnitGroup("Hive", gv_isinCommand[1], RegionPlayableMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterHeroic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto0B72B6A2_u = UnitGroupCount(auto0B72B6A2_g, c_unitCountAll);
        for (;; auto0B72B6A2_u -= 1) {
            auto0B72B6A2_var = UnitGroupUnitFromEnd(auto0B72B6A2_g, auto0B72B6A2_u);
            if (auto0B72B6A2_var == null) { break; }
            UnitIssueOrder(auto0B72B6A2_var, Order(AbilityCommand("LoadUnloadUnit", 1)), c_orderQueueReplace);
        }
        libLbty_gf_OrderWorkerstoGatherNearbyResources(RegionPlayableMap(), 14);
        PlayerModifyPropertyInt(gv_isinCommand[1], c_playerPropMinerals, c_playerPropOperSetTo, PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals));
        PlayerModifyPropertyInt(gv_isinCommand[1], c_playerPropVespene, c_playerPropOperSetTo, PlayerGetPropertyInt(EventPlayer(), c_playerPropVespene));
        PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSetTo, 0);
        PlayerModifyPropertyInt(EventPlayer(), c_playerPropVespene, c_playerPropOperSetTo, 0);
        autoE4EA0528_g = GameAttributePlayersForTeam(2);
        autoE4EA0528_var = -1;
        while (true) {
            autoE4EA0528_var = PlayerGroupNextPlayer(autoE4EA0528_g, autoE4EA0528_var);
            if (autoE4EA0528_var < 0) { break; }
            auto61200DF3_g = UnitGroup(null, autoE4EA0528_var, RegionEntireMap(), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto61200DF3_u = UnitGroupCount(auto61200DF3_g, c_unitCountAll);
            for (;; auto61200DF3_u -= 1) {
                auto61200DF3_var = UnitGroupUnitFromEnd(auto61200DF3_g, auto61200DF3_u);
                if (auto61200DF3_var == null) { break; }
                UnitAbilityEnable(auto61200DF3_var, "TakeCommand", true);
            }
        }
        libNtve_gf_SetAllianceOneWay(gv_isinCommand[1], 15, libNtve_ge_AllianceSetting_Enemy);
        gv_isinCommand[1] = 14;
        TriggerEnable(gt_Team1Win, true);
        TriggerEnable(gt_Team2Win, true);
        TriggerExecute(gt_Team1Win, true, false);
        TriggerExecute(gt_Team2Win, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerLeavesGame_Init () {
    gt_PlayerLeavesGame = TriggerCreate("gt_PlayerLeavesGame_Func");
    TriggerAddEventPlayerLeft(gt_PlayerLeavesGame, c_playerAny, c_gameResultUndecided);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Players Ready
//--------------------------------------------------------------------------------------------------
bool gt_PlayersReady_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_a;
    int lv_z;
    int lv_x;
    int lv_i;

    // Automatic Variable Declarations
    playergroup auto3BF09AB4_g;
    int auto3BF09AB4_var;
    const int auto1C73C963_ae = 14;
    const int auto1C73C963_ai = 1;
    const int autoC12C29D2_ae = 3;
    const int autoC12C29D2_ai = 1;
    unitgroup auto32CD728E_g;
    int auto32CD728E_u;
    unit auto32CD728E_var;
    const int autoDE6A65EF_ae = 11;
    const int autoDE6A65EF_ai = 1;
    const int autoCDD52AEF_ae = 3;
    const int autoCDD52AEF_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gv_spawn[0] = RegionFromId(33);
    gv_spawn[1] = RegionFromId(34);
    gv_spawn[2] = RegionFromId(36);
    gv_spawn[3] = RegionFromId(35);
    gv_shopSpawn[0] = RegionFromId(44);
    gv_shopSpawn[1] = RegionFromId(45);
    gv_shopSpawn[2] = RegionFromId(43);
    gv_shopSpawn[3] = RegionFromId(42);
    gv_heroSpawn[0] = RegionFromId(40);
    gv_heroSpawn[1] = RegionFromId(41);
    gv_heroSpawn[2] = RegionFromId(39);
    gv_heroSpawn[3] = RegionFromId(38);
    UISetDragSelectEnabled(PlayerGroupActive(), true);
    UISetSelectionTypeEnabled(PlayerGroupActive(), c_localSelectionTypeUnknown, true);
    UISetFrameVisible(PlayerGroupActive(), c_syncFrameTypeMenuBar, true);
    UISetFrameVisible(PlayerGroupActive(), c_syncFrameTypeSupply, true);
    UISetFrameVisible(PlayerGroupActive(), c_syncFrameTypeResourcePanel, true);
    UISetFrameVisible(PlayerGroupActive(), c_syncFrameTypeInfoPanel, true);
    UISetFrameVisible(PlayerGroupActive(), c_syncFrameTypeCommandPanel, true);
    UISetFrameVisible(PlayerGroupActive(), c_syncFrameTypeMinimapPanel, true);
    UISetFrameVisible(PlayerGroupActive(), c_syncFrameTypeConsolePanel, true);
    UISetFrameVisible(PlayerGroupActive(), c_syncFrameTypeIdleWorkerButton, true);
    UISetFrameVisible(PlayerGroupActive(), c_syncFrameTypeArmyButton, true);
    UISetFrameVisible(PlayerGroupActive(), c_syncFrameTypeMissionTimePanel, true);
    UISetFrameVisible(PlayerGroupActive(), c_syncFrameTypeControlGroupPanel, true);
    UISetFrameVisible(PlayerGroupActive(), c_syncFrameTypeHeroPanel, true);
    BoardShowAll(true, PlayerGroupActive());
    CameraSetBounds(PlayerGroupActive(), RegionFromId(5), true);
    auto3BF09AB4_g = PlayerGroupActive();
    auto3BF09AB4_var = -1;
    while (true) {
        auto3BF09AB4_var = PlayerGroupNextPlayer(auto3BF09AB4_g, auto3BF09AB4_var);
        if (auto3BF09AB4_var < 0) { break; }
        CameraLockInput(auto3BF09AB4_var, false);
        CameraApplyInfo(auto3BF09AB4_var, CameraInfoDefault(), 0.0, -1, 10, true);
        CameraPan(auto3BF09AB4_var, RegionGetCenter(RegionFromId(5)), 0.0, -1, 10, false);
        BoardItemSetText(gv_mainLeaderboard, 6, auto3BF09AB4_var, StringExternal("Param/Value/E7B900DD"));
    }
    DialogSetVisible(gv_rightToppanel, PlayerGroupActive(), false);
    DialogSetVisible(gv_rightBottompanel, PlayerGroupActive(), false);
    DialogSetVisible(gv_leftPanel, PlayerGroupActive(), false);
    DialogSetVisible(gv_bottomMiddlepanel, PlayerGroupActive(), false);
    DialogSetVisible(gv_topLeftMiddlePanel, PlayerGroupActive(), false);
    DialogSetVisible(gv_topMiddlePanel, PlayerGroupActive(), false);
    DialogSetVisible(gv_topRightMiddlePanel, PlayerGroupActive(), false);
    TimerWindowDestroy(gv_timerwindow);
    TimerPause(gv_selectionTimer, true);
    TriggerExecute(gt_Tips, true, false);
    UISetButtonFaceHighlighted(PlayerGroupActive(), "BasicAbilities", true);
    UISetButtonFaceHighlighted(PlayerGroupActive(), "Respawn", true);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/D7E5676A"));
    MeleeInitUnitsForPlayer(13, PlayerRace(13), PlayerStartLocation(13));
    gv_isinCommand[0] = 13;
    MeleeInitUnitsForPlayer(14, PlayerRace(14), PlayerStartLocation(14));
    gv_isinCommand[1] = 14;
    lv_a = 13;
    for ( ; ( (auto1C73C963_ai >= 0 && lv_a <= auto1C73C963_ae) || (auto1C73C963_ai < 0 && lv_a >= auto1C73C963_ae) ) ; lv_a += auto1C73C963_ai ) {
        lv_z = 0;
        for ( ; ( (autoC12C29D2_ai >= 0 && lv_z <= autoC12C29D2_ae) || (autoC12C29D2_ai < 0 && lv_z >= autoC12C29D2_ae) ) ; lv_z += autoC12C29D2_ai ) {
            auto32CD728E_g = UnitGroup(null, lv_a, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterHeroic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto32CD728E_u = UnitGroupCount(auto32CD728E_g, c_unitCountAll);
            for (;; auto32CD728E_u -= 1) {
                auto32CD728E_var = UnitGroupUnitFromEnd(auto32CD728E_g, auto32CD728E_u);
                if (auto32CD728E_var == null) { break; }
                if ((libNtve_gf_UnitInRegion(auto32CD728E_var, gv_spawn[lv_z]) == true)) {
                    if ((PlayerRace(lv_a) == "Prot")) {
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Obelisk", 0, lv_a, RegionGetCenter(gv_shopSpawn[lv_z]));
                    }

                    if ((PlayerRace(lv_a) == "Terr")) {
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, "MercCompound", 0, lv_a, RegionGetCenter(gv_shopSpawn[lv_z]));
                    }

                    if ((PlayerRace(lv_a) == "Zerg")) {
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, "LurkerDen", 0, lv_a, RegionGetCenter(gv_shopSpawn[lv_z]));
                        libSwaC_gf_SpawnLarvaForHatchery(UnitGroupUnit(UnitGroup("Hatchery", lv_a, gv_spawn[lv_z], UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1), 3);
                    }

                }

            }
        }
    }
    Wait(1.0, c_timeGame);
    lv_x = 0;
    for ( ; ( (autoDE6A65EF_ai >= 0 && lv_x <= autoDE6A65EF_ae) || (autoDE6A65EF_ai < 0 && lv_x >= autoDE6A65EF_ae) ) ; lv_x += autoDE6A65EF_ai ) {
        lv_i = 0;
        for ( ; ( (autoCDD52AEF_ai >= 0 && lv_i <= autoCDD52AEF_ae) || (autoCDD52AEF_ai < 0 && lv_i >= autoCDD52AEF_ae) ) ; lv_i += autoCDD52AEF_ai ) {
            UnitSelect(gv_playerUnits[lv_x], (lv_x + 1), true);
            if ((PlayerGroupHasPlayer(gv_setTeam[0], (lv_x + 1)) == true)) {
                UnitIssueOrder(gv_playerUnits[lv_x], OrderTargetingPoint(AbilityCommand("ProtossRespawn", 0), RegionRandomPoint(gv_heroSpawn[lv_i])), c_orderQueueReplace);
                UnitIssueOrder(gv_playerUnits[lv_x], OrderTargetingPoint(AbilityCommand("TerranRespawn", 0), RegionRandomPoint(gv_heroSpawn[lv_i])), c_orderQueueReplace);
                UnitIssueOrder(gv_playerUnits[lv_x], OrderTargetingPoint(AbilityCommand("ZergRespawn", 0), RegionRandomPoint(gv_heroSpawn[lv_i])), c_orderQueueReplace);
                CameraApplyInfo((lv_x + 1), CameraInfoDefault(), 0.0, -1, 10.0, true);
                CameraPan((lv_x + 1), PlayerStartLocation(13), 0.5, -1, 10, false);
            }

            if ((PlayerGroupHasPlayer(gv_setTeam[1], (lv_x + 1)) == true)) {
                UnitIssueOrder(gv_playerUnits[lv_x], OrderTargetingPoint(AbilityCommand("ProtossRespawn", 0), RegionRandomPoint(gv_heroSpawn[lv_i])), c_orderQueueReplace);
                UnitIssueOrder(gv_playerUnits[lv_x], OrderTargetingPoint(AbilityCommand("TerranRespawn", 0), RegionRandomPoint(gv_heroSpawn[lv_i])), c_orderQueueReplace);
                UnitIssueOrder(gv_playerUnits[lv_x], OrderTargetingPoint(AbilityCommand("ZergRespawn", 0), RegionRandomPoint(gv_heroSpawn[lv_i])), c_orderQueueReplace);
                CameraApplyInfo((lv_x + 1), CameraInfoDefault(), 0.0, -1, 10.0, true);
                CameraPan((lv_x + 1), PlayerStartLocation(14), 0.5, -1, 10, false);
            }

        }
    }
    MeleeInitAI();
    TriggerEnable(gt_Team1Win, true);
    TriggerEnable(gt_Team2Win, true);
    Wait(1.0, c_timeGame);
    RegionPlayableMapSet(RegionFromId(5));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayersReady_Init () {
    gt_PlayersReady = TriggerCreate("gt_PlayersReady_Func");
    TriggerEnable(gt_PlayersReady, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Glow For Illusions
//--------------------------------------------------------------------------------------------------
bool gt_HeroGlowForIllusions_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((EventUnitCreatedAbil() == "Decoy") || (EventUnitCreatedAbil() == "IllusionDance")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGroupHasPlayer(gv_setTeam[0], UnitGetOwner(EventUnitCreatedUnit())) == true)) {
        UnitBehaviorAdd(EventUnitCreatedUnit(), "TeamsBuffT1", EventUnitCreatedUnit(), 1);
    }

    if ((PlayerGroupHasPlayer(gv_setTeam[1], UnitGetOwner(EventUnitCreatedUnit())) == true)) {
        UnitBehaviorAdd(EventUnitCreatedUnit(), "TeamsBuffT2", EventUnitCreatedUnit(), 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HeroGlowForIllusions_Init () {
    gt_HeroGlowForIllusions = TriggerCreate("gt_HeroGlowForIllusions_Func");
    TriggerAddEventUnitCreated(gt_HeroGlowForIllusions, null, EventUnitCreatedAbil(), null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit Enters Respawn
//--------------------------------------------------------------------------------------------------
bool gt_UnitEntersRespawn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_autoRespawnTimer;
    int lv_autoRespawnDialogItem;
    int lv_x;
    fixed lv_random;

    // Automatic Variable Declarations
    const int auto5F94EB6E_ae = 11;
    const int auto5F94EB6E_ai = 1;

    // Variable Initialization
    lv_autoRespawnTimer = 10;
    lv_autoRespawnDialogItem = c_invalidDialogControlId;

    // Conditions
    if (testConds) {
        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagHero) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitAbilityEnable(EventUnit(), "TerranRespawn", true);
    UnitAbilityEnable(EventUnit(), "ProtossRespawn", true);
    UnitAbilityEnable(EventUnit(), "ZergRespawn", true);
    UnitSelect(gv_playerUnits[(EventPlayer() - 1)], EventPlayer(), true);
    DialogCreate(550, 200, c_anchorTop, 0, 0, true);
    gv_autoRespawnDialog[EventPlayer()] = DialogLastCreated();
    DialogSetVisible(gv_autoRespawnDialog[EventPlayer()], PlayerGroupSingle(EventPlayer()), true);
    DialogControlCreate(gv_autoRespawnDialog[EventPlayer()], c_triggerControlTypeCountdownLabel);
    lv_autoRespawnDialogItem = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(lv_autoRespawnDialogItem, (StringExternal("Param/Value/56A084CB") + (IntToText(lv_autoRespawnTimer) + StringExternal("Param/Value/3A7D082D"))), PlayerGroupSingle(EventPlayer()));
    DialogControlSetPosition(lv_autoRespawnDialogItem, PlayerGroupSingle(EventPlayer()), c_anchorCenter, 0, 0);
    DialogControlSetVisible(lv_autoRespawnDialogItem, PlayerGroupSingle(EventPlayer()), true);
    while ((lv_autoRespawnTimer != 0)) {
        Wait(0.8, c_timeGame);
        libNtve_gf_SetDialogItemText(lv_autoRespawnDialogItem, (StringExternal("Param/Value/70CAED9E") + (StringToText("") + StringExternal("Param/Value/E35B18A8"))), PlayerGroupSingle(EventPlayer()));
        Wait(0.2, c_timeGame);
        libNtve_gf_SetDialogItemText(lv_autoRespawnDialogItem, (StringExternal("Param/Value/FC042B3A") + (IntToText(lv_autoRespawnTimer) + StringExternal("Param/Value/854F2250"))), PlayerGroupSingle(EventPlayer()));
        lv_autoRespawnTimer -= 1;
    }
    lv_x = 0;
    for ( ; ( (auto5F94EB6E_ai >= 0 && lv_x <= auto5F94EB6E_ae) || (auto5F94EB6E_ai < 0 && lv_x >= auto5F94EB6E_ae) ) ; lv_x += auto5F94EB6E_ai ) {
        UnitSelect(gv_playerUnits[lv_x], (lv_x + 1), true);
        lv_random = RandomInt(-5, 5);
        if ((PlayerGroupHasPlayer(gv_setTeam[0], (lv_x + 1)) == true)) {
            UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("ProtossRespawn", 0), PointWithOffset(UnitGetPosition(UnitGroupRandomUnit(UnitGroupFilterRegion(UnitGroup(null, gv_isinCommand[0], RegionEntireMap(), UnitFilter((1 << c_targetFilterGround) | (1 << c_targetFilterStructure) | (1 << c_targetFilterHover), 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), RegionPlayableMap(), 0), c_unitCountAlive)), lv_random, lv_random)), c_orderQueueReplace);
            UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("TerranRespawn", 0), PointWithOffset(UnitGetPosition(UnitGroupRandomUnit(UnitGroupFilterRegion(UnitGroup(null, gv_isinCommand[0], RegionEntireMap(), UnitFilter((1 << c_targetFilterGround) | (1 << c_targetFilterStructure) | (1 << c_targetFilterHover), 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), RegionPlayableMap(), 0), c_unitCountAlive)), lv_random, lv_random)), c_orderQueueReplace);
            UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("ZergRespawn", 0), PointWithOffset(UnitGetPosition(UnitGroupRandomUnit(UnitGroupFilterRegion(UnitGroup(null, gv_isinCommand[0], RegionEntireMap(), UnitFilter((1 << c_targetFilterGround) | (1 << c_targetFilterStructure) | (1 << c_targetFilterHover), 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), RegionPlayableMap(), 0), c_unitCountAlive)), lv_random, lv_random)), c_orderQueueReplace);
            Wait(0.1, c_timeGame);
            if ((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(21)) == true)) {
                CameraPan(EventPlayer(), UnitGetPosition(EventUnit()), 0.5, -1, 10, false);
            }

        }
        else {
            UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("ProtossRespawn", 0), PointWithOffset(UnitGetPosition(UnitGroupRandomUnit(UnitGroupFilterRegion(UnitGroup(null, gv_isinCommand[1], RegionEntireMap(), UnitFilter((1 << c_targetFilterGround) | (1 << c_targetFilterStructure) | (1 << c_targetFilterHover), 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), RegionPlayableMap(), 0), c_unitCountAlive)), lv_random, lv_random)), c_orderQueueReplace);
            UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("TerranRespawn", 0), PointWithOffset(UnitGetPosition(UnitGroupRandomUnit(UnitGroupFilterRegion(UnitGroup(null, gv_isinCommand[1], RegionEntireMap(), UnitFilter((1 << c_targetFilterGround) | (1 << c_targetFilterStructure) | (1 << c_targetFilterHover), 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), RegionPlayableMap(), 0), c_unitCountAlive)), lv_random, lv_random)), c_orderQueueReplace);
            UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("ZergRespawn", 0), PointWithOffset(UnitGetPosition(UnitGroupRandomUnit(UnitGroupFilterRegion(UnitGroup(null, gv_isinCommand[1], RegionEntireMap(), UnitFilter((1 << c_targetFilterGround) | (1 << c_targetFilterStructure) | (1 << c_targetFilterHover), 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), RegionPlayableMap(), 0), c_unitCountAlive)), lv_random, lv_random)), c_orderQueueReplace);
            Wait(0.1, c_timeGame);
            if ((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(21)) == true)) {
                CameraPan(EventPlayer(), UnitGetPosition(EventUnit()), 0.5, -1, 10, false);
            }

        }
    }
    DialogDestroy(gv_autoRespawnDialog[EventPlayer()]);
    UISetButtonFaceHighlighted(PlayerGroupSingle(EventPlayer()), "Respawn", false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UnitEntersRespawn_Init () {
    gt_UnitEntersRespawn = TriggerCreate("gt_UnitEntersRespawn_Func");
    TriggerAddEventUnitRegion(gt_UnitEntersRespawn, null, RegionFromId(21), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit Leaves Character Selection
//--------------------------------------------------------------------------------------------------
bool gt_UnitLeavesCharacterSelection_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagHero) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitAbilityEnable(EventUnit(), "TerranRespawn", false);
    UnitAbilityEnable(EventUnit(), "ProtossRespawn", false);
    UnitAbilityEnable(EventUnit(), "ZergRespawn", false);
    UISetButtonFaceHighlighted(PlayerGroupSingle(EventPlayer()), "BasicAbilities", false);
    UISetButtonFaceHighlighted(PlayerGroupSingle(EventPlayer()), "Respawn", false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UnitLeavesCharacterSelection_Init () {
    gt_UnitLeavesCharacterSelection = TriggerCreate("gt_UnitLeavesCharacterSelection_Func");
    TriggerAddEventUnitRegion(gt_UnitLeavesCharacterSelection, null, RegionFromId(4), false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit Enters Spawn
//--------------------------------------------------------------------------------------------------
bool gt_UnitEntersSpawn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAddPlayer(EventUnit(), "PauseUnit", EventPlayer(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UnitEntersSpawn_Init () {
    gt_UnitEntersSpawn = TriggerCreate("gt_UnitEntersSpawn_Func");
    TriggerAddEventUnitRegion(gt_UnitEntersSpawn, null, RegionFromId(4), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit Leaves Spawn
//--------------------------------------------------------------------------------------------------
bool gt_UnitLeavesSpawn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_x;
    int lv_y;

    // Automatic Variable Declarations
    const int auto9E45ADBC_ae = 12;
    const int auto9E45ADBC_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_x = 1;
    for ( ; ( (auto9E45ADBC_ai >= 0 && lv_x <= auto9E45ADBC_ae) || (auto9E45ADBC_ai < 0 && lv_x >= auto9E45ADBC_ae) ) ; lv_x += auto9E45ADBC_ai ) {
        if ((PlayerGroupHasPlayer(gv_setTeam[0], lv_x) == true)) {
            UnitBehaviorAdd(gv_playerUnits[(lv_x - 1)], "TeamsBuffT1", gv_playerUnits[(lv_x - 1)], 1);
        }
        else {
            UnitBehaviorAdd(gv_playerUnits[(lv_x - 1)], "TeamsBuffT2", gv_playerUnits[(lv_x - 1)], 1);
        }
    }
    UnitBehaviorRemovePlayer(EventUnit(), "PauseUnit", EventPlayer(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UnitLeavesSpawn_Init () {
    gt_UnitLeavesSpawn = TriggerCreate("gt_UnitLeavesSpawn_Func");
    TriggerAddEventUnitRegion(gt_UnitLeavesSpawn, null, RegionFromId(4), false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Death Respawn
//--------------------------------------------------------------------------------------------------
bool gt_HeroDeathRespawn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_wasResurected;
    int lv_x;
    int lv_respawnDialogTimer;

    // Automatic Variable Declarations
    const int auto1FC068EF_ae = 12;
    const int auto1FC068EF_ai = 1;

    // Variable Initialization
    lv_respawnDialogTimer = c_invalidDialogControlId;

    // Conditions
    if (testConds) {
        if (!(((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeSummoned) == false) && (UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagHero) == true) && (UnitIsAlive(EventUnit()) == false)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitXPGainEnable(EventUnit(), null, false);
    gv_heroRespawnTimer[EventPlayer()] = (UnitLevel(EventUnit()) * 5);
    DialogCreate(500, 100, c_anchorTop, 0, 0, true);
    gv_respawnDialog[EventPlayer()] = DialogLastCreated();
    DialogSetVisible(gv_respawnDialog[EventPlayer()], PlayerGroupSingle(EventPlayer()), true);
    DialogControlCreate(gv_respawnDialog[EventPlayer()], c_triggerControlTypeCountdownLabel);
    lv_respawnDialogTimer = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(lv_respawnDialogTimer, (StringExternal("Param/Value/A57F7B15") + IntToText(gv_heroRespawnTimer[EventPlayer()])), PlayerGroupSingle(EventPlayer()));
    DialogControlSetPosition(lv_respawnDialogTimer, PlayerGroupSingle(EventPlayer()), c_anchorCenter, 0, 0);
    DialogControlSetVisible(lv_respawnDialogTimer, PlayerGroupSingle(EventPlayer()), true);
    lv_x = 1;
    for ( ; ( (auto1FC068EF_ai >= 0 && lv_x <= auto1FC068EF_ae) || (auto1FC068EF_ai < 0 && lv_x >= auto1FC068EF_ae) ) ; lv_x += auto1FC068EF_ai ) {
        while (((UnitGetOwner(EventUnit()) == lv_x) && (UnitIsAlive(EventUnit()) == false) && (gv_heroRespawnTimer[lv_x] != 0))) {
            if ((((UnitHasBehavior2(EventUnit(), "MedBotsDummyBuff") == true) || (UnitHasBehavior2(EventUnit(), "RecallFromTheVoidBuffOnTarget") == true)))) {
                libNtve_gf_SetDialogItemText(lv_respawnDialogTimer, StringExternal("Param/Value/F56B3799"), PlayerGroupSingle(EventPlayer()));
                Wait(0.2, c_timeGame);
                if ((UnitIsAlive(EventUnit()) == true)) {
                    gv_heroRespawnTimer[lv_x] = 0;
                    lv_wasResurected = true;
                }

            }
            else {
                Wait(0.8, c_timeGame);
                libNtve_gf_SetDialogItemText(lv_respawnDialogTimer, (StringExternal("Param/Value/0343CCCA") + StringToText("")), PlayerGroupSingle(EventPlayer()));
                Wait(0.2, c_timeGame);
                gv_heroRespawnTimer[lv_x] -= 1;
                libNtve_gf_SetDialogItemText(lv_respawnDialogTimer, (StringExternal("Param/Value/FED7B5BD") + IntToText(gv_heroRespawnTimer[EventPlayer()])), PlayerGroupSingle(EventPlayer()));
                BoardItemSetText(gv_mainLeaderboard, 6, lv_x, (StringExternal("Param/Value/63A13CEF") + (IntToText(gv_heroRespawnTimer[lv_x]) + StringExternal("Param/Value/A0356FC1"))));
            }
        }
    }
    if ((lv_wasResurected != true)) {
        UnitXPGainEnable(EventUnit(), null, true);
        UnitAbilityEnable(EventUnit(), "TerranRespawn", true);
        UnitSetPosition(EventUnit(), RegionGetCenter(RegionFromId(21)), false);
        UnitRevive(EventUnit());
        UnitBehaviorAddPlayer(EventUnit(), "PauseUnit", EventPlayer(), 1);
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, (StringExternal("Param/Value/2B6B392C") + (UnitTypeGetName(UnitGetType(EventUnit())) + StringExternal("Param/Value/7A8FC61B"))));
        UISetButtonFaceHighlighted(PlayerGroupSingle(EventPlayer()), "BasicAbilities", true);
        UISetButtonFaceHighlighted(PlayerGroupSingle(EventPlayer()), "Respawn", true);
        DialogDestroy(gv_respawnDialog[EventPlayer()]);
    }
    else {
        MinimapPing(PlayerGroupSingle(EventPlayer()), UnitGetPosition(EventUnit()), 1.0, Color(100.00, 0.00, 0.00));
        DialogDestroy(gv_respawnDialog[EventPlayer()]);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HeroDeathRespawn_Init () {
    gt_HeroDeathRespawn = TriggerCreate("gt_HeroDeathRespawn_Func");
    TriggerAddEventUnitDied(gt_HeroDeathRespawn, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Selects Spawn Location
//--------------------------------------------------------------------------------------------------
bool gt_HeroSelectsSpawnLocation_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_x;
    int lv_y;

    // Automatic Variable Declarations
    const int auto03CE2325_ae = 12;
    const int auto03CE2325_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagHero) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSelect(EventUnit(), EventPlayer(), false);
    UnitBehaviorRemovePlayer(EventUnit(), "PauseUnit", EventPlayer(), 1);
    UnitAbilityEnable(EventUnit(), "TerranRespawn", false);
    UnitAbilityEnable(EventUnit(), "ProtossRespawn", false);
    UnitAbilityEnable(EventUnit(), "ZergRespawn", false);
    if ((PlayerGroupHasPlayer(gv_setTeam[0], UnitGetOwner(EventUnit())) == true)) {
        UnitBehaviorAdd(EventUnit(), "TeamsBuffT1", EventUnit(), 1);
    }
    else {
        UnitBehaviorAdd(EventUnit(), "TeamsBuffT2", EventUnit(), 1);
    }
    lv_y = 1;
    for ( ; ( (auto03CE2325_ai >= 0 && lv_y <= auto03CE2325_ae) || (auto03CE2325_ai < 0 && lv_y >= auto03CE2325_ae) ) ; lv_y += auto03CE2325_ai ) {
        if ((UnitGetOwner(EventUnit()) == lv_y)) {
            BoardItemSetText(gv_mainLeaderboard, 6, lv_y, StringExternal("Param/Value/B8535CAD"));
            UISetButtonFaceHighlighted(PlayerGroupSingle(EventPlayer()), "BasicAbilities", false);
        }

    }
    UnitSetPropertyFixed(EventUnit(), c_unitPropShieldsPercent, 100.0);
    UnitSetPropertyFixed(EventUnit(), c_unitPropLifePercent, 100.0);
    if (((UnitHasBehavior(EventUnit(), "MentalCapacityStress") == true) || (UnitHasBehavior(EventUnit(), "MentalCapacity") == true) || (UnitHasBehavior(EventUnit(), "MentalCapacityAwareness") == true))) {
        UnitSetPropertyFixed(EventUnit(), c_unitPropEnergyPercent, 0.0);
    }
    else {
        UnitSetPropertyFixed(EventUnit(), c_unitPropEnergyPercent, 100.0);
    }
    DialogDestroy(gv_autoRespawnDialog[EventPlayer()]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HeroSelectsSpawnLocation_Init () {
    gt_HeroSelectsSpawnLocation = TriggerCreate("gt_HeroSelectsSpawnLocation_Func");
    TriggerAddEventUnitRegion(gt_HeroSelectsSpawnLocation, null, RegionFromId(21), false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Recall From The Void
//--------------------------------------------------------------------------------------------------
bool gt_RecallFromTheVoid_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_x;
    int lv_y;

    // Automatic Variable Declarations
    const int autoE77F79DC_ae = 12;
    const int autoE77F79DC_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGroupHasPlayer(gv_setTeam[0], UnitGetOwner(EventUnit())) == true)) {
        UnitBehaviorAdd(EventUnit(), "TeamsBuffT1", EventUnit(), 1);
    }
    else {
        UnitBehaviorAdd(EventUnit(), "TeamsBuffT2", EventUnit(), 1);
    }
    UnitRevive(EventUnit());
    UnitSetPropertyFixed(EventUnit(), c_unitPropShieldsPercent, 10.0);
    UnitSetPropertyFixed(EventUnit(), c_unitPropLifePercent, 20.0);
    UnitSetPropertyFixed(EventUnit(), c_unitPropEnergyPercent, 0.0);
    gv_heroRespawnTimer[EventPlayer()] = 0;
    lv_y = 1;
    for ( ; ( (autoE77F79DC_ai >= 0 && lv_y <= autoE77F79DC_ae) || (autoE77F79DC_ai < 0 && lv_y >= autoE77F79DC_ae) ) ; lv_y += autoE77F79DC_ai ) {
        if ((UnitHasBehavior(gv_playerUnits[(lv_y - 1)], "RecallFromTheVoidDummy") == true)) {
            BoardItemSetText(gv_mainLeaderboard, 6, lv_y, StringExternal("Param/Value/21BC20B5"));
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RecallFromTheVoid_Init () {
    gt_RecallFromTheVoid = TriggerCreate("gt_RecallFromTheVoid_Func");
    TriggerAddEventUnitBehaviorChange(gt_RecallFromTheVoid, null, "RecallFromTheVoidBuffOnTarget", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Med-bots Revive
//--------------------------------------------------------------------------------------------------
bool gt_MedbotsRevive_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_x;
    int lv_y;

    // Automatic Variable Declarations
    const int autoC9CBA2B6_ae = 12;
    const int autoC9CBA2B6_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGroupHasPlayer(gv_setTeam[0], UnitGetOwner(EventUnit())) == true)) {
        UnitBehaviorAdd(EventUnit(), "TeamsBuffT1", EventUnit(), 1);
    }
    else {
        UnitBehaviorAdd(EventUnit(), "TeamsBuffT2", EventUnit(), 1);
    }
    UnitRevive(EventUnit());
    UnitSetPropertyFixed(EventUnit(), c_unitPropShieldsPercent, 50.0);
    UnitSetPropertyFixed(EventUnit(), c_unitPropLifePercent, 50.0);
    UnitSetPropertyFixed(EventUnit(), c_unitPropEnergyPercent, 0.0);
    gv_heroRespawnTimer[EventPlayer()] = 0;
    lv_y = 1;
    for ( ; ( (autoC9CBA2B6_ai >= 0 && lv_y <= autoC9CBA2B6_ae) || (autoC9CBA2B6_ai < 0 && lv_y >= autoC9CBA2B6_ae) ) ; lv_y += autoC9CBA2B6_ai ) {
        if ((UnitHasBehavior(gv_playerUnits[(lv_y - 1)], "FreshStart") == true)) {
            BoardItemSetText(gv_mainLeaderboard, 6, lv_y, StringExternal("Param/Value/679B4DC5"));
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MedbotsRevive_Init () {
    gt_MedbotsRevive = TriggerCreate("gt_MedbotsRevive_Func");
    TriggerAddEventUnitBehaviorChange(gt_MedbotsRevive, null, "FreshStart", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Death in Command
//--------------------------------------------------------------------------------------------------
bool gt_DeathinCommand_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto5224508C_g;
    int auto5224508C_u;
    unit auto5224508C_var;
    unitgroup autoBACA258A_g;
    int autoBACA258A_u;
    unit autoBACA258A_var;
    playergroup auto8E161619_g;
    int auto8E161619_var;
    unitgroup auto67D366CD_g;
    int auto67D366CD_u;
    unit auto67D366CD_var;
    unitgroup autoE002F0D4_g;
    int autoE002F0D4_u;
    unit autoE002F0D4_var;
    unitgroup auto1CA24413_g;
    int auto1CA24413_u;
    unit auto1CA24413_var;
    playergroup auto971C5CC6_g;
    int auto971C5CC6_var;
    unitgroup auto24C3A17E_g;
    int auto24C3A17E_u;
    unit auto24C3A17E_var;

    // Conditions
    if (testConds) {
        if (!((libNtve_gf_UnitIsInsideTransport(EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((UnitGetOwner(EventUnit()) == gv_isinCommand[0]) && (PlayerGroupHasPlayer(gv_setTeam[0], UnitGetOwner(EventUnit())) == true))) {
        TriggerEnable(gt_Team1Win, false);
        TriggerEnable(gt_Team2Win, false);
        auto5224508C_g = UnitGroup(null, gv_isinCommand[0], RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterHeroic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto5224508C_u = UnitGroupCount(auto5224508C_g, c_unitCountAll);
        for (;; auto5224508C_u -= 1) {
            auto5224508C_var = UnitGroupUnitFromEnd(auto5224508C_g, auto5224508C_u);
            if (auto5224508C_var == null) { break; }
            AISetUnitScriptControlled(auto5224508C_var, true);
            UnitSetOwner(auto5224508C_var, 13, true);
            AISetUnitScriptControlled(auto5224508C_var, false);
        }
        Wait(0.2, c_timeGame);
        autoBACA258A_g = UnitGroup(null, gv_isinCommand[0], RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterHeroic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoBACA258A_u = UnitGroupCount(autoBACA258A_g, c_unitCountAll);
        for (;; autoBACA258A_u -= 1) {
            autoBACA258A_var = UnitGroupUnitFromEnd(autoBACA258A_g, autoBACA258A_u);
            if (autoBACA258A_var == null) { break; }
            AISetUnitScriptControlled(autoBACA258A_var, true);
            UnitSetOwner(autoBACA258A_var, 13, true);
            AISetUnitScriptControlled(autoBACA258A_var, false);
        }
        libLbty_gf_OrderWorkerstoGatherNearbyResources(RegionPlayableMap(), 13);
        auto8E161619_g = GameAttributePlayersForTeam(1);
        auto8E161619_var = -1;
        while (true) {
            auto8E161619_var = PlayerGroupNextPlayer(auto8E161619_g, auto8E161619_var);
            if (auto8E161619_var < 0) { break; }
            auto67D366CD_g = UnitGroup(null, auto8E161619_var, RegionEntireMap(), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto67D366CD_u = UnitGroupCount(auto67D366CD_g, c_unitCountAll);
            for (;; auto67D366CD_u -= 1) {
                auto67D366CD_var = UnitGroupUnitFromEnd(auto67D366CD_g, auto67D366CD_u);
                if (auto67D366CD_var == null) { break; }
                UnitAbilityEnable(auto67D366CD_var, "TakeCommand", true);
            }
        }
        PlayerModifyPropertyInt(gv_isinCommand[0], c_playerPropMinerals, c_playerPropOperSetTo, PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals));
        PlayerModifyPropertyInt(gv_isinCommand[0], c_playerPropVespene, c_playerPropOperSetTo, PlayerGetPropertyInt(EventPlayer(), c_playerPropVespene));
        PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSetTo, 0);
        PlayerModifyPropertyInt(EventPlayer(), c_playerPropVespene, c_playerPropOperSetTo, 0);
        libNtve_gf_SetAllianceOneWay(gv_isinCommand[0], 15, libNtve_ge_AllianceSetting_Enemy);
        gv_isinCommand[0] = 13;
        TriggerEnable(gt_Team1Win, true);
        TriggerEnable(gt_Team2Win, true);
        TriggerExecute(gt_Team1Win, true, false);
        TriggerExecute(gt_Team2Win, true, false);
    }

    if (((UnitGetOwner(EventUnit()) == gv_isinCommand[1]) && (PlayerGroupHasPlayer(gv_setTeam[1], UnitGetOwner(EventUnit())) == true))) {
        TriggerEnable(gt_Team1Win, false);
        TriggerEnable(gt_Team2Win, false);
        autoE002F0D4_g = UnitGroup(null, gv_isinCommand[1], RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterHeroic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoE002F0D4_u = UnitGroupCount(autoE002F0D4_g, c_unitCountAll);
        for (;; autoE002F0D4_u -= 1) {
            autoE002F0D4_var = UnitGroupUnitFromEnd(autoE002F0D4_g, autoE002F0D4_u);
            if (autoE002F0D4_var == null) { break; }
            AISetUnitScriptControlled(autoE002F0D4_var, true);
            UnitSetOwner(autoE002F0D4_var, 14, true);
            AISetUnitScriptControlled(autoE002F0D4_var, false);
        }
        Wait(0.2, c_timeGame);
        auto1CA24413_g = UnitGroup(null, gv_isinCommand[1], RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterHeroic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto1CA24413_u = UnitGroupCount(auto1CA24413_g, c_unitCountAll);
        for (;; auto1CA24413_u -= 1) {
            auto1CA24413_var = UnitGroupUnitFromEnd(auto1CA24413_g, auto1CA24413_u);
            if (auto1CA24413_var == null) { break; }
            AISetUnitScriptControlled(auto1CA24413_var, true);
            UnitSetOwner(auto1CA24413_var, 14, true);
            AISetUnitScriptControlled(auto1CA24413_var, false);
        }
        libLbty_gf_OrderWorkerstoGatherNearbyResources(RegionPlayableMap(), 14);
        auto971C5CC6_g = GameAttributePlayersForTeam(2);
        auto971C5CC6_var = -1;
        while (true) {
            auto971C5CC6_var = PlayerGroupNextPlayer(auto971C5CC6_g, auto971C5CC6_var);
            if (auto971C5CC6_var < 0) { break; }
            auto24C3A17E_g = UnitGroup(null, auto971C5CC6_var, RegionEntireMap(), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto24C3A17E_u = UnitGroupCount(auto24C3A17E_g, c_unitCountAll);
            for (;; auto24C3A17E_u -= 1) {
                auto24C3A17E_var = UnitGroupUnitFromEnd(auto24C3A17E_g, auto24C3A17E_u);
                if (auto24C3A17E_var == null) { break; }
                UnitAbilityEnable(auto24C3A17E_var, "TakeCommand", true);
            }
        }
        PlayerModifyPropertyInt(gv_isinCommand[1], c_playerPropMinerals, c_playerPropOperSetTo, PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals));
        PlayerModifyPropertyInt(gv_isinCommand[1], c_playerPropVespene, c_playerPropOperSetTo, PlayerGetPropertyInt(EventPlayer(), c_playerPropVespene));
        PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSetTo, 0);
        PlayerModifyPropertyInt(EventPlayer(), c_playerPropVespene, c_playerPropOperSetTo, 0);
        libNtve_gf_SetAllianceOneWay(gv_isinCommand[1], 15, libNtve_ge_AllianceSetting_Enemy);
        gv_isinCommand[1] = 14;
        TriggerEnable(gt_Team1Win, true);
        TriggerEnable(gt_Team2Win, true);
        TriggerExecute(gt_Team1Win, true, false);
        TriggerExecute(gt_Team2Win, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DeathinCommand_Init () {
    gt_DeathinCommand = TriggerCreate("gt_DeathinCommand_Func");
    TriggerAddEventUnitDied(gt_DeathinCommand, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Take Command
//--------------------------------------------------------------------------------------------------
bool gt_TakeCommand_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto4FD85B3E_g;
    int auto4FD85B3E_var;
    unitgroup autoCECC85A9_g;
    int autoCECC85A9_u;
    unit autoCECC85A9_var;
    unitgroup auto05DC3892_g;
    int auto05DC3892_u;
    unit auto05DC3892_var;
    unitgroup autoFE1A9C74_g;
    int autoFE1A9C74_u;
    unit autoFE1A9C74_var;
    playergroup autoB77B28AE_g;
    int autoB77B28AE_var;
    unitgroup autoEEB2371D_g;
    int autoEEB2371D_u;
    unit autoEEB2371D_var;
    unitgroup auto1EC3655D_g;
    int auto1EC3655D_u;
    unit auto1EC3655D_var;
    unitgroup autoCF2CECBC_g;
    int autoCF2CECBC_u;
    unit autoCF2CECBC_var;

    // Conditions
    if (testConds) {
        if (!(((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeHeroic) == true) && (UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeSummoned) == false)))) {
            return false;
        }

        if (!(((UnitGetType(EventUnitTargetUnit()) == "CommandCenter") || (UnitGetType(EventUnitTargetUnit()) == "CommandCenterFlying") || (UnitGetType(EventUnitTargetUnit()) == "OrbitalCommand") || (UnitGetType(EventUnitTargetUnit()) == "OrbitalCommandFlying") || (UnitGetType(EventUnitTargetUnit()) == "PlanetaryFortress") || (UnitGetType(EventUnitTargetUnit()) == "Hatchery") || (UnitGetType(EventUnitTargetUnit()) == "Lair") || (UnitGetType(EventUnitTargetUnit()) == "Hive") || (UnitGetType(EventUnitTargetUnit()) == "Nexus")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((PlayerGroupHasPlayer(gv_setTeam[0], EventPlayer()) == true) && (gv_isinCommand[0] == 13))) {
        TriggerEnable(gt_Team1Win, false);
        TriggerEnable(gt_Team2Win, false);
        gv_unitInCommand[0] = EventUnit();
        auto4FD85B3E_g = GameAttributePlayersForTeam(1);
        auto4FD85B3E_var = -1;
        while (true) {
            auto4FD85B3E_var = PlayerGroupNextPlayer(auto4FD85B3E_g, auto4FD85B3E_var);
            if (auto4FD85B3E_var < 0) { break; }
            autoCECC85A9_g = UnitGroup(null, auto4FD85B3E_var, RegionEntireMap(), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            autoCECC85A9_u = UnitGroupCount(autoCECC85A9_g, c_unitCountAll);
            for (;; autoCECC85A9_u -= 1) {
                autoCECC85A9_var = UnitGroupUnitFromEnd(autoCECC85A9_g, autoCECC85A9_u);
                if (autoCECC85A9_var == null) { break; }
                UnitAbilityEnable(autoCECC85A9_var, "TakeCommand", false);
            }
        }
        auto05DC3892_g = UnitGroup(null, 13, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterSelf) | (1 << c_targetFilterPlayer) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterHeroic), (1 << (c_targetFilterDead - 32))), 0);
        auto05DC3892_u = UnitGroupCount(auto05DC3892_g, c_unitCountAll);
        for (;; auto05DC3892_u -= 1) {
            auto05DC3892_var = UnitGroupUnitFromEnd(auto05DC3892_g, auto05DC3892_u);
            if (auto05DC3892_var == null) { break; }
            UnitSetOwner(auto05DC3892_var, EventPlayer(), true);
        }
        Wait(0.2, c_timeGame);
        autoFE1A9C74_g = UnitGroup(null, 13, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterSelf) | (1 << c_targetFilterPlayer) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterHeroic), (1 << (c_targetFilterDead - 32))), 0);
        autoFE1A9C74_u = UnitGroupCount(autoFE1A9C74_g, c_unitCountAll);
        for (;; autoFE1A9C74_u -= 1) {
            autoFE1A9C74_var = UnitGroupUnitFromEnd(autoFE1A9C74_g, autoFE1A9C74_u);
            if (autoFE1A9C74_var == null) { break; }
            UnitSetOwner(autoFE1A9C74_var, EventPlayer(), true);
        }
        PlayerModifyPropertyInt(UnitGetOwner(EventUnit()), c_playerPropMinerals, c_playerPropOperSetTo, PlayerGetPropertyInt(gv_isinCommand[0], c_playerPropMinerals));
        PlayerModifyPropertyInt(UnitGetOwner(EventUnit()), c_playerPropVespene, c_playerPropOperSetTo, PlayerGetPropertyInt(gv_isinCommand[0], c_playerPropVespene));
        PlayerModifyPropertyInt(gv_isinCommand[0], c_playerPropMinerals, c_playerPropOperSetTo, 0);
        PlayerModifyPropertyInt(gv_isinCommand[0], c_playerPropVespene, c_playerPropOperSetTo, 0);
        gv_isinCommand[0] = EventPlayer();
        libLbty_gf_OrderWorkerstoGatherNearbyResources(RegionPlayableMap(), gv_isinCommand[0]);
        libNtve_gf_SetAllianceOneWay(gv_isinCommand[0], 15, libNtve_ge_AllianceSetting_Neutral);
        TriggerEnable(gt_Team1Win, true);
        TriggerEnable(gt_Team2Win, true);
    }

    if (((PlayerGroupHasPlayer(gv_setTeam[1], EventPlayer()) == true) && (gv_isinCommand[1] == 14))) {
        TriggerEnable(gt_Team1Win, false);
        TriggerEnable(gt_Team2Win, false);
        gv_unitInCommand[1] = EventUnit();
        autoB77B28AE_g = GameAttributePlayersForTeam(2);
        autoB77B28AE_var = -1;
        while (true) {
            autoB77B28AE_var = PlayerGroupNextPlayer(autoB77B28AE_g, autoB77B28AE_var);
            if (autoB77B28AE_var < 0) { break; }
            autoEEB2371D_g = UnitGroup(null, autoB77B28AE_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterHeroic), (1 << (c_targetFilterDead - 32))), 0);
            autoEEB2371D_u = UnitGroupCount(autoEEB2371D_g, c_unitCountAll);
            for (;; autoEEB2371D_u -= 1) {
                autoEEB2371D_var = UnitGroupUnitFromEnd(autoEEB2371D_g, autoEEB2371D_u);
                if (autoEEB2371D_var == null) { break; }
                UnitAbilityEnable(autoEEB2371D_var, "TakeCommand", false);
            }
        }
        auto1EC3655D_g = UnitGroup(null, 14, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterSelf) | (1 << c_targetFilterPlayer) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterHeroic), (1 << (c_targetFilterDead - 32))), 0);
        auto1EC3655D_u = UnitGroupCount(auto1EC3655D_g, c_unitCountAll);
        for (;; auto1EC3655D_u -= 1) {
            auto1EC3655D_var = UnitGroupUnitFromEnd(auto1EC3655D_g, auto1EC3655D_u);
            if (auto1EC3655D_var == null) { break; }
            UnitSetOwner(auto1EC3655D_var, EventPlayer(), true);
        }
        Wait(0.2, c_timeGame);
        autoCF2CECBC_g = UnitGroup(null, 14, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterSelf) | (1 << c_targetFilterPlayer) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterHeroic), (1 << (c_targetFilterDead - 32))), 0);
        autoCF2CECBC_u = UnitGroupCount(autoCF2CECBC_g, c_unitCountAll);
        for (;; autoCF2CECBC_u -= 1) {
            autoCF2CECBC_var = UnitGroupUnitFromEnd(autoCF2CECBC_g, autoCF2CECBC_u);
            if (autoCF2CECBC_var == null) { break; }
            UnitSetOwner(autoCF2CECBC_var, EventPlayer(), true);
        }
        PlayerModifyPropertyInt(UnitGetOwner(EventUnit()), c_playerPropMinerals, c_playerPropOperSetTo, PlayerGetPropertyInt(gv_isinCommand[1], c_playerPropMinerals));
        PlayerModifyPropertyInt(UnitGetOwner(EventUnit()), c_playerPropVespene, c_playerPropOperSetTo, PlayerGetPropertyInt(gv_isinCommand[1], c_playerPropVespene));
        PlayerModifyPropertyInt(gv_isinCommand[1], c_playerPropMinerals, c_playerPropOperSetTo, 0);
        PlayerModifyPropertyInt(gv_isinCommand[1], c_playerPropVespene, c_playerPropOperSetTo, 0);
        gv_isinCommand[1] = EventPlayer();
        libLbty_gf_OrderWorkerstoGatherNearbyResources(RegionPlayableMap(), gv_isinCommand[1]);
        libNtve_gf_SetAllianceOneWay(gv_isinCommand[1], 15, libNtve_ge_AllianceSetting_Neutral);
        TriggerEnable(gt_Team1Win, true);
        TriggerEnable(gt_Team2Win, true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TakeCommand_Init () {
    gt_TakeCommand = TriggerCreate("gt_TakeCommand_Func");
    TriggerAddEventUnitAbility(gt_TakeCommand, null, AbilityCommand("TakeCommand", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Leave Command
//--------------------------------------------------------------------------------------------------
bool gt_LeaveCommand_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto06E00BAD_g;
    int auto06E00BAD_u;
    unit auto06E00BAD_var;
    unitgroup autoE85E6BBF_g;
    int autoE85E6BBF_u;
    unit autoE85E6BBF_var;
    playergroup autoF457CCBF_g;
    int autoF457CCBF_var;
    unitgroup autoCD297338_g;
    int autoCD297338_u;
    unit autoCD297338_var;
    unitgroup auto53D7373C_g;
    int auto53D7373C_u;
    unit auto53D7373C_var;
    unitgroup auto283A8D9A_g;
    int auto283A8D9A_u;
    unit auto283A8D9A_var;
    playergroup auto138FA5C8_g;
    int auto138FA5C8_var;
    unitgroup auto69213D5D_g;
    int auto69213D5D_u;
    unit auto69213D5D_var;

    // Conditions
    if (testConds) {
        if (!(((UnitTypeTestAttribute(UnitGetType(EventUnitCargo()), c_unitAttributeHeroic) == true) && (UnitTypeTestAttribute(UnitGetType(EventUnitCargo()), c_unitAttributeSummoned) == false)))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "CommandCenter") || (UnitGetType(EventUnit()) == "CommandCenterFlying") || (UnitGetType(EventUnit()) == "OrbitalCommand") || (UnitGetType(EventUnit()) == "OrbitalCommandFlying") || (UnitGetType(EventUnit()) == "PlanetaryFortress") || (UnitGetType(EventUnit()) == "Hatchery") || (UnitGetType(EventUnit()) == "Lair") || (UnitGetType(EventUnit()) == "Hive") || (UnitGetType(EventUnit()) == "Nexus")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((UnitGetOwner(EventUnitCargo()) == gv_isinCommand[0]) && (PlayerGroupHasPlayer(gv_setTeam[0], UnitGetOwner(EventUnitCargo())) == true))) {
        TriggerEnable(gt_Team1Win, false);
        TriggerEnable(gt_Team2Win, false);
        auto06E00BAD_g = UnitGroup(null, gv_isinCommand[0], RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterHeroic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto06E00BAD_u = UnitGroupCount(auto06E00BAD_g, c_unitCountAll);
        for (;; auto06E00BAD_u -= 1) {
            auto06E00BAD_var = UnitGroupUnitFromEnd(auto06E00BAD_g, auto06E00BAD_u);
            if (auto06E00BAD_var == null) { break; }
            AISetUnitScriptControlled(auto06E00BAD_var, true);
            UnitSetOwner(auto06E00BAD_var, 13, true);
            AISetUnitScriptControlled(auto06E00BAD_var, false);
        }
        Wait(0.2, c_timeGame);
        autoE85E6BBF_g = UnitGroup(null, gv_isinCommand[0], RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterHeroic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoE85E6BBF_u = UnitGroupCount(autoE85E6BBF_g, c_unitCountAll);
        for (;; autoE85E6BBF_u -= 1) {
            autoE85E6BBF_var = UnitGroupUnitFromEnd(autoE85E6BBF_g, autoE85E6BBF_u);
            if (autoE85E6BBF_var == null) { break; }
            AISetUnitScriptControlled(autoE85E6BBF_var, true);
            UnitSetOwner(autoE85E6BBF_var, 13, true);
            AISetUnitScriptControlled(autoE85E6BBF_var, false);
        }
        libLbty_gf_OrderWorkerstoGatherNearbyResources(RegionPlayableMap(), 13);
        autoF457CCBF_g = GameAttributePlayersForTeam(1);
        autoF457CCBF_var = -1;
        while (true) {
            autoF457CCBF_var = PlayerGroupNextPlayer(autoF457CCBF_g, autoF457CCBF_var);
            if (autoF457CCBF_var < 0) { break; }
            autoCD297338_g = UnitGroup(null, autoF457CCBF_var, RegionEntireMap(), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            autoCD297338_u = UnitGroupCount(autoCD297338_g, c_unitCountAll);
            for (;; autoCD297338_u -= 1) {
                autoCD297338_var = UnitGroupUnitFromEnd(autoCD297338_g, autoCD297338_u);
                if (autoCD297338_var == null) { break; }
                UnitAbilityEnable(autoCD297338_var, "TakeCommand", true);
            }
        }
        PlayerModifyPropertyInt(gv_isinCommand[0], c_playerPropMinerals, c_playerPropOperSetTo, PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals));
        PlayerModifyPropertyInt(gv_isinCommand[0], c_playerPropVespene, c_playerPropOperSetTo, PlayerGetPropertyInt(EventPlayer(), c_playerPropVespene));
        PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSetTo, 0);
        PlayerModifyPropertyInt(EventPlayer(), c_playerPropVespene, c_playerPropOperSetTo, 0);
        libNtve_gf_SetAllianceOneWay(gv_isinCommand[0], 15, libNtve_ge_AllianceSetting_Enemy);
        gv_isinCommand[0] = 13;
        TriggerEnable(gt_Team1Win, true);
        TriggerEnable(gt_Team2Win, true);
        TriggerExecute(gt_Team1Win, true, false);
        TriggerExecute(gt_Team2Win, true, false);
    }

    if (((UnitGetOwner(EventUnitCargo()) == gv_isinCommand[1]) && (PlayerGroupHasPlayer(gv_setTeam[1], UnitGetOwner(EventUnitCargo())) == true))) {
        TriggerEnable(gt_Team1Win, false);
        TriggerEnable(gt_Team2Win, false);
        auto53D7373C_g = UnitGroup(null, gv_isinCommand[1], RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterHeroic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto53D7373C_u = UnitGroupCount(auto53D7373C_g, c_unitCountAll);
        for (;; auto53D7373C_u -= 1) {
            auto53D7373C_var = UnitGroupUnitFromEnd(auto53D7373C_g, auto53D7373C_u);
            if (auto53D7373C_var == null) { break; }
            AISetUnitScriptControlled(auto53D7373C_var, true);
            UnitSetOwner(auto53D7373C_var, 14, true);
            AISetUnitScriptControlled(auto53D7373C_var, false);
        }
        Wait(0.2, c_timeGame);
        auto283A8D9A_g = UnitGroup(null, gv_isinCommand[1], RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterHeroic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto283A8D9A_u = UnitGroupCount(auto283A8D9A_g, c_unitCountAll);
        for (;; auto283A8D9A_u -= 1) {
            auto283A8D9A_var = UnitGroupUnitFromEnd(auto283A8D9A_g, auto283A8D9A_u);
            if (auto283A8D9A_var == null) { break; }
            AISetUnitScriptControlled(auto283A8D9A_var, true);
            UnitSetOwner(auto283A8D9A_var, 14, true);
            AISetUnitScriptControlled(auto283A8D9A_var, false);
        }
        libLbty_gf_OrderWorkerstoGatherNearbyResources(RegionPlayableMap(), 14);
        auto138FA5C8_g = GameAttributePlayersForTeam(2);
        auto138FA5C8_var = -1;
        while (true) {
            auto138FA5C8_var = PlayerGroupNextPlayer(auto138FA5C8_g, auto138FA5C8_var);
            if (auto138FA5C8_var < 0) { break; }
            auto69213D5D_g = UnitGroup(null, auto138FA5C8_var, RegionEntireMap(), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto69213D5D_u = UnitGroupCount(auto69213D5D_g, c_unitCountAll);
            for (;; auto69213D5D_u -= 1) {
                auto69213D5D_var = UnitGroupUnitFromEnd(auto69213D5D_g, auto69213D5D_u);
                if (auto69213D5D_var == null) { break; }
                UnitAbilityEnable(auto69213D5D_var, "TakeCommand", true);
            }
        }
        PlayerModifyPropertyInt(gv_isinCommand[1], c_playerPropMinerals, c_playerPropOperSetTo, PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals));
        PlayerModifyPropertyInt(gv_isinCommand[1], c_playerPropVespene, c_playerPropOperSetTo, PlayerGetPropertyInt(EventPlayer(), c_playerPropVespene));
        PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSetTo, 0);
        PlayerModifyPropertyInt(EventPlayer(), c_playerPropVespene, c_playerPropOperSetTo, 0);
        libNtve_gf_SetAllianceOneWay(gv_isinCommand[1], 15, libNtve_ge_AllianceSetting_Enemy);
        gv_isinCommand[1] = 14;
        TriggerEnable(gt_Team1Win, true);
        TriggerEnable(gt_Team2Win, true);
        TriggerExecute(gt_Team1Win, true, false);
        TriggerExecute(gt_Team2Win, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LeaveCommand_Init () {
    gt_LeaveCommand = TriggerCreate("gt_LeaveCommand_Func");
    TriggerAddEventUnitCargo(gt_LeaveCommand, null, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Count Players that Left
//--------------------------------------------------------------------------------------------------
bool gt_CountPlayersthatLeft_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_x;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGroupHasPlayer(gv_setTeam[lv_x], EventPlayer()) == true)) {
        PlayerGroupRemove(gv_activePlayersT1, EventPlayer());
        PlayerGroupRemove(gv_activeHumanPlayers, EventPlayer());
    }
    else {
        PlayerGroupRemove(gv_activePlayersT2, EventPlayer());
        PlayerGroupRemove(gv_activeHumanPlayers, EventPlayer());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CountPlayersthatLeft_Init () {
    gt_CountPlayersthatLeft = TriggerCreate("gt_CountPlayersthatLeft_Func");
    TriggerAddEventPlayerLeft(gt_CountPlayersthatLeft, c_playerAny, c_gameResultUndecided);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reveal Teams
//--------------------------------------------------------------------------------------------------
bool gt_RevealTeams_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoC81E84CE_g;
    int autoC81E84CE_var;
    playergroup autoA222B98E_g;
    int autoA222B98E_var;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_RevealTeams, false);
    if (((UnitGroupCount(UnitGroup("CommandCenter", 13, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (UnitGroupCount(UnitGroup("CommandCenterFlying", 13, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (UnitGroupCount(UnitGroup("OrbitalCommand", 13, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (UnitGroupCount(UnitGroup("OrbitalCommandFlying", 13, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (UnitGroupCount(UnitGroup("PlanetaryFortress", 13, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (UnitGroupCount(UnitGroup("Nexus", 13, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (UnitGroupCount(UnitGroup("Hatchery", 13, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (UnitGroupCount(UnitGroup("Lair", 13, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (UnitGroupCount(UnitGroup("Hive", 13, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (gv_teamReveal[0] == false))) {
        gv_teamReveal[0] = true;
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (PlayerName(13) + StringExternal("Param/Value/5A28BFC0")));
        autoC81E84CE_g = gv_activePlayersT2;
        autoC81E84CE_var = -1;
        while (true) {
            autoC81E84CE_var = PlayerGroupNextPlayer(autoC81E84CE_g, autoC81E84CE_var);
            if (autoC81E84CE_var < 0) { break; }
            PlayerSetAlliance(13, c_allianceIdVision, autoC81E84CE_var, true);
        }
    }

    if ((UnitGroupCount(UnitGroup("CommandCenter", 14, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (UnitGroupCount(UnitGroup("CommandCenterFlying", 14, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (UnitGroupCount(UnitGroup("OrbitalCommand", 14, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (UnitGroupCount(UnitGroup("OrbitalCommandFlying", 14, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (UnitGroupCount(UnitGroup("PlanetaryFortress", 14, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (UnitGroupCount(UnitGroup("Nexus", 14, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (UnitGroupCount(UnitGroup("Hatchery", 14, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (UnitGroupCount(UnitGroup("Lair", 14, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (UnitGroupCount(UnitGroup("Hive", 14, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (gv_teamReveal[1] == false)) {
        gv_teamReveal[1] = true;
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (PlayerName(14) + StringExternal("Param/Value/9CC4EAE6")));
        autoA222B98E_g = gv_activePlayersT1;
        autoA222B98E_var = -1;
        while (true) {
            autoA222B98E_var = PlayerGroupNextPlayer(autoA222B98E_g, autoA222B98E_var);
            if (autoA222B98E_var < 0) { break; }
            PlayerSetAlliance(14, c_allianceIdVision, autoA222B98E_var, true);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RevealTeams_Init () {
    gt_RevealTeams = TriggerCreate("gt_RevealTeams_Func");
    TriggerEnable(gt_RevealTeams, false);
    TriggerAddEventUnitDied(gt_RevealTeams, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UnReavel Teams
//--------------------------------------------------------------------------------------------------
bool gt_UnReavelTeams_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoF625D0AD_g;
    int autoF625D0AD_var;
    playergroup auto55C73A1B_g;
    int auto55C73A1B_var;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_UnReavelTeams, false);
    if (((UnitGroupCount(UnitGroup("CommandCenter", 13, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1) || (UnitGroupCount(UnitGroup("CommandCenterFlying", 13, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1) || (UnitGroupCount(UnitGroup("OrbitalCommand", 13, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1) || (UnitGroupCount(UnitGroup("OrbitalCommandFlying", 13, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1) || (UnitGroupCount(UnitGroup("PlanetaryFortress", 13, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1) || (UnitGroupCount(UnitGroup("Nexus", 13, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1) || (UnitGroupCount(UnitGroup("Hatchery", 13, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1) || (UnitGroupCount(UnitGroup("Lair", 13, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1) || (UnitGroupCount(UnitGroup("Hive", 13, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1) || (gv_teamReveal[0] == true))) {
        gv_teamReveal[0] = false;
        autoF625D0AD_g = gv_activePlayersT2;
        autoF625D0AD_var = -1;
        while (true) {
            autoF625D0AD_var = PlayerGroupNextPlayer(autoF625D0AD_g, autoF625D0AD_var);
            if (autoF625D0AD_var < 0) { break; }
            PlayerSetAlliance(13, c_allianceIdVision, autoF625D0AD_var, false);
        }
    }

    if (((UnitGroupCount(UnitGroup("CommandCenter", 14, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1) || (UnitGroupCount(UnitGroup("CommandCenterFlying", 14, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1) || (UnitGroupCount(UnitGroup("OrbitalCommand", 14, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1) || (UnitGroupCount(UnitGroup("OrbitalCommandFlying", 14, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1) || (UnitGroupCount(UnitGroup("PlanetaryFortress", 14, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1) || (UnitGroupCount(UnitGroup("Nexus", 14, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1) || (UnitGroupCount(UnitGroup("Hatchery", 14, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1) || (UnitGroupCount(UnitGroup("Lair", 14, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1) || (UnitGroupCount(UnitGroup("Hive", 14, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1) || (gv_teamReveal[1] == true))) {
        gv_teamReveal[1] = false;
        auto55C73A1B_g = gv_activePlayersT1;
        auto55C73A1B_var = -1;
        while (true) {
            auto55C73A1B_var = PlayerGroupNextPlayer(auto55C73A1B_g, auto55C73A1B_var);
            if (auto55C73A1B_var < 0) { break; }
            PlayerSetAlliance(14, c_allianceIdVision, auto55C73A1B_var, false);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UnReavelTeams_Init () {
    gt_UnReavelTeams = TriggerCreate("gt_UnReavelTeams_Func");
    TriggerEnable(gt_UnReavelTeams, false);
    TriggerAddEventUnitConstructProgress(gt_UnReavelTeams, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Team 1 Win
//--------------------------------------------------------------------------------------------------
bool gt_Team1Win_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoB2435D0E_g;
    int autoB2435D0E_var;
    playergroup autoF86C57C7_g;
    int autoF86C57C7_var;

    // Actions
    if (!runActions) {
        return true;
    }

    if (((PlayerGroupCount(gv_activePlayersT2) <= 0) || (UnitGroupCount(UnitGroup(null, gv_isinCommand[1], RegionPlayableMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
        TriggerEnable(gt_Team1Win, false);
        TriggerEnable(gt_Team2Win, false);
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, StringExternal("Param/Value/F6552F19"));
        autoB2435D0E_g = gv_setTeam[0];
        autoB2435D0E_var = -1;
        while (true) {
            autoB2435D0E_var = PlayerGroupNextPlayer(autoB2435D0E_g, autoB2435D0E_var);
            if (autoB2435D0E_var < 0) { break; }
            BankValueSetFromInt(BankLastCreated(), "Player", "Wins", (BankValueGetAsInt(gv_darkSystemBank, "Player", "Wins") + 1));
            BankSave(gv_darkSystemBank);
            Wait(2.0, c_timeGame);
            GameOver(autoB2435D0E_var, c_gameOverVictory, true, true);
        }
        autoF86C57C7_g = gv_setTeam[1];
        autoF86C57C7_var = -1;
        while (true) {
            autoF86C57C7_var = PlayerGroupNextPlayer(autoF86C57C7_g, autoF86C57C7_var);
            if (autoF86C57C7_var < 0) { break; }
            Wait(2.0, c_timeGame);
            GameOver(autoF86C57C7_var, c_gameOverDefeat, true, true);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Team1Win_Init () {
    gt_Team1Win = TriggerCreate("gt_Team1Win_Func");
    TriggerEnable(gt_Team1Win, false);
    TriggerAddEventUnitDied(gt_Team1Win, null);
    TriggerAddEventPlayerLeft(gt_Team1Win, c_playerAny, c_gameResultUndecided);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Team 2 Win
//--------------------------------------------------------------------------------------------------
bool gt_Team2Win_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto0BAB801C_g;
    int auto0BAB801C_var;
    playergroup auto5D736FFE_g;
    int auto5D736FFE_var;

    // Actions
    if (!runActions) {
        return true;
    }

    if (((PlayerGroupCount(gv_activePlayersT1) <= 0) || (UnitGroupCount(UnitGroup(null, gv_isinCommand[0], RegionPlayableMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
        TriggerEnable(gt_Team1Win, false);
        TriggerEnable(gt_Team2Win, false);
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, StringExternal("Param/Value/BDB46AF8"));
        auto0BAB801C_g = gv_setTeam[1];
        auto0BAB801C_var = -1;
        while (true) {
            auto0BAB801C_var = PlayerGroupNextPlayer(auto0BAB801C_g, auto0BAB801C_var);
            if (auto0BAB801C_var < 0) { break; }
            BankValueSetFromInt(BankLastCreated(), "Player", "Wins", (BankValueGetAsInt(gv_darkSystemBank, "Player", "Wins") + 1));
            BankSave(gv_darkSystemBank);
            Wait(2.0, c_timeGame);
            GameOver(auto0BAB801C_var, c_gameOverVictory, true, true);
        }
        auto5D736FFE_g = gv_setTeam[0];
        auto5D736FFE_var = -1;
        while (true) {
            auto5D736FFE_var = PlayerGroupNextPlayer(auto5D736FFE_g, auto5D736FFE_var);
            if (auto5D736FFE_var < 0) { break; }
            Wait(2.0, c_timeGame);
            GameOver(auto5D736FFE_var, c_gameOverDefeat, true, true);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Team2Win_Init () {
    gt_Team2Win = TriggerCreate("gt_Team2Win_Func");
    TriggerEnable(gt_Team2Win, false);
    TriggerAddEventUnitDied(gt_Team2Win, null);
    TriggerAddEventPlayerLeft(gt_Team2Win, c_playerAny, c_gameResultUndecided);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Wins Bank
//--------------------------------------------------------------------------------------------------
bool gt_WinsBank_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_a;

    // Automatic Variable Declarations
    const int auto43BAC3DD_ae = 12;
    const int auto43BAC3DD_ai = 1;
    playergroup auto1FB29504_g;
    int auto1FB29504_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_a = 1;
    for ( ; ( (auto43BAC3DD_ai >= 0 && lv_a <= auto43BAC3DD_ae) || (auto43BAC3DD_ai < 0 && lv_a >= auto43BAC3DD_ae) ) ; lv_a += auto43BAC3DD_ai ) {
    }
    auto1FB29504_g = PlayerGroupActive();
    auto1FB29504_var = -1;
    while (true) {
        auto1FB29504_var = PlayerGroupNextPlayer(auto1FB29504_g, auto1FB29504_var);
        if (auto1FB29504_var < 0) { break; }
        BankLoad("DarkSystemWinsBank", auto1FB29504_var);
        UIDisplayMessage(PlayerGroupSingle(auto1FB29504_var), c_messageAreaSubtitle, (StringExternal("Param/Value/F1A7F063") + IntToText(BankValueGetAsInt(BankLastCreated(), "Player", "Wins")) + StringExternal("Param/Value/D7F4420A")));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WinsBank_Init () {
    gt_WinsBank = TriggerCreate("gt_WinsBank_Func");
    TriggerAddEventMapInit(gt_WinsBank);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Display Status
//--------------------------------------------------------------------------------------------------
bool gt_DisplayStatus_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_adminSelectionButtons[0]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerHandle(EventPlayer()) == gv_craig1)) {
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaWarning, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + StringExternal("Param/Value/4B2A3631")));
    }
    else {
        if ((PlayerHandle(EventPlayer()) == gv_craig2)) {
            UIDisplayMessage(PlayerGroupActive(), c_messageAreaWarning, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + StringExternal("Param/Value/390BD78D")));
        }
        else {
            if ((PlayerHandle(EventPlayer()) == gv_craig3)) {
                UIDisplayMessage(PlayerGroupActive(), c_messageAreaWarning, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + StringExternal("Param/Value/D3E54072")));
            }
            else {
                if ((PlayerHandle(EventPlayer()) == gv_aleksei)) {
                    UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + StringExternal("Param/Value/57985AAF")));
                }
                else {
                    if ((PlayerHandle(EventPlayer()) == gv_ryan)) {
                        UIDisplayMessage(PlayerGroupActive(), c_messageAreaWarning, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + StringExternal("Param/Value/50D794F7")));
                    }

                }
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DisplayStatus_Init () {
    gt_DisplayStatus = TriggerCreate("gt_DisplayStatus_Func");
    TriggerAddEventDialogControl(gt_DisplayStatus, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Kick Player
//--------------------------------------------------------------------------------------------------
bool gt_ActivateKickPlayer_Func (bool testConds, bool runActions) {
    // Variable Declarations
    text lv_player1;
    text lv_player2;
    text lv_player3;
    text lv_player4;
    text lv_player5;
    text lv_player6;
    text lv_player7;
    text lv_player8;
    text lv_player9;
    text lv_player10;
    text lv_player11;
    text lv_player12;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player1 = TextWithColor((StringExternal("Param/Value/0EFF60F9") + PlayerName(1) + StringExternal("Param/Value/2AAB989D")), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(1, false)));
    lv_player2 = TextWithColor((StringExternal("Param/Value/68C905A5") + PlayerName(2) + StringExternal("Param/Value/F745DFA7")), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(2, false)));
    lv_player3 = TextWithColor((StringExternal("Param/Value/2B84FD50") + PlayerName(3) + StringExternal("Param/Value/049F243B")), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(3, false)));
    lv_player4 = TextWithColor((StringExternal("Param/Value/EE9D8829") + PlayerName(4) + StringExternal("Param/Value/88277319")), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(4, false)));
    lv_player5 = TextWithColor((StringExternal("Param/Value/BCCF963F") + PlayerName(5) + StringExternal("Param/Value/59284944")), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(5, false)));
    lv_player6 = TextWithColor((StringExternal("Param/Value/41928211") + PlayerName(6) + StringExternal("Param/Value/2F762532")), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(6, false)));
    lv_player7 = TextWithColor((StringExternal("Param/Value/BB4CB399") + PlayerName(7) + StringExternal("Param/Value/4C34284A")), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(7, false)));
    lv_player8 = TextWithColor((StringExternal("Param/Value/715ACC17") + PlayerName(8) + StringExternal("Param/Value/6A1016F3")), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(8, false)));
    lv_player9 = TextWithColor((StringExternal("Param/Value/C18BE3D2") + PlayerName(9) + StringExternal("Param/Value/12A50A79")), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(9, false)));
    lv_player10 = TextWithColor((StringExternal("Param/Value/45F5EDBF") + PlayerName(10) + StringExternal("Param/Value/72E491F6")), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(10, false)));
    lv_player11 = TextWithColor((StringExternal("Param/Value/47200B08") + PlayerName(11) + StringExternal("Param/Value/3D1549CD")), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(11, false)));
    lv_player12 = TextWithColor((StringExternal("Param/Value/5E11C723") + PlayerName(12) + StringExternal("Param/Value/07588964")), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(12, false)));

    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_adminSelectionButtons[1]) && ((PlayerHandle(EventPlayer()) == gv_craig1) || (PlayerHandle(EventPlayer()) == gv_craig2) || (PlayerHandle(EventPlayer()) == gv_craig3) || (PlayerHandle(EventPlayer()) == gv_aleksei) || (PlayerHandle(EventPlayer()) == gv_ryan))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_kickPlayerActive = true;
    libNtve_gf_HideGameUI(false, PlayerGroupSingle(EventPlayer()));
    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/DF99C7DA"));
    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaDirective, (lv_player1 + lv_player2 + lv_player3 + lv_player4 + lv_player5 + lv_player6 + lv_player7 + lv_player8 + lv_player9 + lv_player10 + lv_player11 + lv_player12));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateKickPlayer_Init () {
    gt_ActivateKickPlayer = TriggerCreate("gt_ActivateKickPlayer_Func");
    TriggerAddEventDialogControl(gt_ActivateKickPlayer, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Kick Player
//--------------------------------------------------------------------------------------------------
bool gt_UseKickPlayer_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int autoD0B06AB7_ae = 12;
    int autoD0B06AB7_var;

    // Conditions
    if (testConds) {
        if (!(((gv_kickPlayerActive == true) && ((PlayerHandle(EventPlayer()) == gv_craig1) || (PlayerHandle(EventPlayer()) == gv_craig2) || (PlayerHandle(EventPlayer()) == gv_craig3) || (PlayerHandle(EventPlayer()) == gv_aleksei) || (PlayerHandle(EventPlayer()) == gv_ryan))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventChatMessage(false) == IntToString(0))) {
        gv_kickPlayerActive = false;
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/551A5AB0"));
        libNtve_gf_HideGameUI(true, PlayerGroupSingle(EventPlayer()));
        UIClearMessages(PlayerGroupSingle(EventPlayer()), c_messageAreaDirective);
    }
    else {
        autoD0B06AB7_var = 1;
        for ( ; autoD0B06AB7_var <= autoD0B06AB7_ae; autoD0B06AB7_var += 1 ) {
            if ((EventChatMessage(false) == IntToString(autoD0B06AB7_var))) {
                gv_kickPlayerActive = false;
                UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, (TextWithColor(PlayerName(autoD0B06AB7_var), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(autoD0B06AB7_var, false))) + StringExternal("Param/Value/C1613B69")));
                libNtve_gf_HideGameUI(true, PlayerGroupSingle(EventPlayer()));
                UIClearMessages(PlayerGroupSingle(EventPlayer()), c_messageAreaDirective);
                GameOver(autoD0B06AB7_var, c_gameOverDefeat, false, false);
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UseKickPlayer_Init () {
    gt_UseKickPlayer = TriggerCreate("gt_UseKickPlayer_Func");
    TriggerAddEventChatMessage(gt_UseKickPlayer, c_playerAny, IntToString(0), true);
    TriggerAddEventChatMessage(gt_UseKickPlayer, c_playerAny, IntToString(1), true);
    TriggerAddEventChatMessage(gt_UseKickPlayer, c_playerAny, IntToString(2), true);
    TriggerAddEventChatMessage(gt_UseKickPlayer, c_playerAny, IntToString(3), true);
    TriggerAddEventChatMessage(gt_UseKickPlayer, c_playerAny, IntToString(4), true);
    TriggerAddEventChatMessage(gt_UseKickPlayer, c_playerAny, IntToString(5), true);
    TriggerAddEventChatMessage(gt_UseKickPlayer, c_playerAny, IntToString(6), true);
    TriggerAddEventChatMessage(gt_UseKickPlayer, c_playerAny, IntToString(7), true);
    TriggerAddEventChatMessage(gt_UseKickPlayer, c_playerAny, IntToString(8), true);
    TriggerAddEventChatMessage(gt_UseKickPlayer, c_playerAny, IntToString(9), true);
    TriggerAddEventChatMessage(gt_UseKickPlayer, c_playerAny, IntToString(10), true);
    TriggerAddEventChatMessage(gt_UseKickPlayer, c_playerAny, IntToString(11), true);
    TriggerAddEventChatMessage(gt_UseKickPlayer, c_playerAny, IntToString(12), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Open Window
//--------------------------------------------------------------------------------------------------
bool gt_OpenWindow_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_adminSelectionButtons[2]) && ((PlayerHandle(EventPlayer()) == gv_craig1) || (PlayerHandle(EventPlayer()) == gv_aleksei) || (PlayerHandle(EventPlayer()) == gv_ryan))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugWindowOpen(true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OpenWindow_Init () {
    gt_OpenWindow = TriggerCreate("gt_OpenWindow_Func");
    TriggerAddEventDialogControl(gt_OpenWindow, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create Dialog
//--------------------------------------------------------------------------------------------------
bool gt_CreateDialog_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_AdminButtonsCreate();
    gf_AdminDialogCreate();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreateDialog_Init () {
    gt_CreateDialog = TriggerCreate("gt_CreateDialog_Func");
    TriggerAddEventMapInit(gt_CreateDialog);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Add Units
//--------------------------------------------------------------------------------------------------
bool gt_AddUnits_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((PlayerHandle(EventPlayer()) == gv_craig1) || (PlayerHandle(EventPlayer()) == gv_craig2) || (PlayerHandle(EventPlayer()) == gv_craig3) || (PlayerHandle(EventPlayer()) == gv_aleksei) || (PlayerHandle(EventPlayer()) == gv_ryan)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Firebat2", 0, EventPlayer(), CameraInfoGetTarget(CameraInfoDefault()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AddUnits_Init () {
    gt_AddUnits = TriggerCreate("gt_AddUnits_Func");
    TriggerAddEventChatMessage(gt_AddUnits, c_playerAny, "Add Firebat", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Scrolling Combat Text
//--------------------------------------------------------------------------------------------------
bool gt_ScrollingCombatText_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_damage;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitTypeTestFlag(UnitGetType(EventUnitDamageSourceUnit()), c_unitFlagHero) == true))) {
            return false;
        }

        if (!((EventUnitDamageEffect() != "AGR28ShotgunKillMissile"))) {
            return false;
        }

        if (!((EventUnitDamageEffect() != "ChaingunKillMissile"))) {
            return false;
        }

        if (!((EventUnitDamageEffect() != "SmokeBombDestroy"))) {
            return false;
        }

        if (!((EventUnitDamageEffect() != "VoidChargeDestroy"))) {
            return false;
        }

        if (!((EventUnitDamageEffect() != "KillDecoy"))) {
            return false;
        }

        if (!((EventUnitDamageEffect() != "KillDecoy"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_scrollingCombat2 = gv_scrollingCombat;
    lv_damage = EventUnitDamageAmount();
    gv_scrollingCombat = RandomFixed(50.0, 130.0);
    if ((gv_scrollingCombat != gv_scrollingCombat2)) {
        TextTagCreate(FixedToText(lv_damage, 0), 18, UnitGetPosition(EventUnit()), RandomFixed(0.8, 1.8), true, true, PlayerGroupSingle(EventUnitDamageSourcePlayer()));
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 2.0);
        TextTagSetVelocity(TextTagLastCreated(), 1.0, gv_scrollingCombat);
    }
    else {
        while ((gv_scrollingCombat == gv_scrollingCombat2)) {
            gv_scrollingCombat = RandomFixed(50.0, 130.0);
            if ((gv_scrollingCombat != gv_scrollingCombat2)) {
                TextTagCreate(FixedToText(lv_damage, 0), 18, UnitGetPosition(EventUnit()), RandomFixed(0.8, 1.8), true, true, PlayerGroupSingle(EventUnitDamageSourcePlayer()));
                TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 2.0);
                TextTagSetVelocity(TextTagLastCreated(), 1.0, gv_scrollingCombat);
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ScrollingCombatText_Init () {
    gt_ScrollingCombatText = TriggerCreate("gt_ScrollingCombatText_Func");
    TriggerAddEventUnitDamaged(gt_ScrollingCombatText, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Give Terrazine
//--------------------------------------------------------------------------------------------------
bool gt_GiveTerrazine_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_x;
    int lv_a;
    int lv_b;
    bool lv_broken;

    // Automatic Variable Declarations
    const int auto9A2315D7_ae = 131;
    const int auto9A2315D7_ai = 1;
    const int auto810C39B0_ae = 3;
    const int auto810C39B0_ai = 1;
    int auto61C9C5E2_ae;
    const int auto61C9C5E2_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((((libNtve_gf_KillingPlayer() != EventPlayer()) && (UnitTypeTestAttribute(UnitGetType(libNtve_gf_KillingUnit()), c_unitAttributeHeroic) == true)) || ((libNtve_gf_KillingPlayer() != EventPlayer()) && (UnitTypeTestAttribute(UnitGetType(libNtve_gf_KillingUnit()), c_unitAttributeSummoned) == true))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_PlayerIsEnemy(libNtve_gf_KillingPlayer(), EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == true)) {
        lv_a = 1;
        for ( ; ( (auto9A2315D7_ai >= 0 && lv_a <= auto9A2315D7_ae) || (auto9A2315D7_ai < 0 && lv_a >= auto9A2315D7_ae) ) ; lv_a += auto9A2315D7_ai ) {
            lv_b = 1;
            for ( ; ( (auto810C39B0_ai >= 0 && lv_b <= auto810C39B0_ae) || (auto810C39B0_ai < 0 && lv_b >= auto810C39B0_ae) ) ; lv_b += auto810C39B0_ai ) {
                if ((UnitGetType(EventUnit()) == UserDataGetUnit("TerrazineforKills", UserDataGetUserInstance("AwardTerrazine", "Check Unit", "Combine", lv_a), "Killed Unit", lv_b))) {
                    auto61C9C5E2_ae = PlayerGroupCount(gv_activeHumanPlayers);
                    lv_x = 1;
                    for ( ; ( (auto61C9C5E2_ai >= 0 && lv_x <= auto61C9C5E2_ae) || (auto61C9C5E2_ai < 0 && lv_x >= auto61C9C5E2_ae) ) ; lv_x += auto61C9C5E2_ai ) {
                        gv_terrazineArmyUnitsSCT[lv_x] = RandomInt(UserDataGetInt("TerrazineforKills", UserDataGetUserInstance("AwardTerrazine", "Check Unit", "Combine", lv_a), "Min Terrazine", 1), UserDataGetInt("TerrazineforKills", UserDataGetUserInstance("AwardTerrazine", "Check Unit", "Combine", lv_a), "Max Terrazine", 1));
                        PlayerModifyPropertyInt(libNtve_gf_KillingPlayer(), c_playerPropTerrazine, c_playerPropOperAdd, gv_terrazineArmyUnitsSCT[lv_x]);
                        TextTagCreate((TextWithColor(StringExternal("Param/Value/B485F6A4"), Color(100.00, 100.00, 0.00)) + TextWithColor(IntToText(gv_terrazineArmyUnitsSCT[lv_x]), Color(100.00, 100.00, 0.00))), 24, UnitGetPosition(EventUnit()), 2.0, true, true, PlayerGroupSingle(EventUnitDamageSourcePlayer()));
                        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 2.0);
                        TextTagSetVelocity(TextTagLastCreated(), 1.0, 90.0);
                        SoundPlay(SoundLink("LostViking_Powerup", -1), PlayerGroupSingle(libNtve_gf_KillingPlayer()), 100.0, 0.0);
                        lv_broken = true;
                        break;
                    }
                }

            }
            if ((lv_broken == true)) {
                break;
            }

        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GiveTerrazine_Init () {
    gt_GiveTerrazine = TriggerCreate("gt_GiveTerrazine_Func");
    TriggerAddEventUnitDied(gt_GiveTerrazine, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Currency
//--------------------------------------------------------------------------------------------------
bool gt_HeroCurrency_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_x;

    // Automatic Variable Declarations
    int auto93BF734A_ae;
    const int auto93BF734A_ai = 1;
    int auto8C4A5251_ae;
    const int auto8C4A5251_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((((libNtve_gf_KillingPlayer() != EventPlayer()) && (UnitTypeTestAttribute(UnitGetType(libNtve_gf_KillingUnit()), c_unitAttributeHeroic) == true) && (UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeHeroic) == true) && (UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeSummoned) == false)) || ((UnitTypeTestAttribute(UnitGetType(libNtve_gf_KillingUnit()), c_unitAttributeHeroic) == true) && (UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeHeroic) == true) && (UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeSummoned) == true))))) {
            return false;
        }

        if (!((libNtve_gf_KillingPlayer() != EventPlayer()))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(libNtve_gf_KillingUnit()), c_unitAttributeHeroic) == true))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeHeroic) == true))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeSummoned) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_PlayerIsEnemy(EventPlayer(), libNtve_gf_KillingPlayer(), libNtve_ge_PlayerRelation_Enemy) == true)) {
        auto93BF734A_ae = PlayerGroupCount(gv_activeHumanPlayers);
        lv_x = 1;
        for ( ; ( (auto93BF734A_ai >= 0 && lv_x <= auto93BF734A_ae) || (auto93BF734A_ai < 0 && lv_x >= auto93BF734A_ae) ) ; lv_x += auto93BF734A_ai ) {
            if ((libNtve_gf_KillingPlayer() == lv_x)) {
                gv_terrazineHeroUnitsSCT[lv_x] = (50 * UnitLevel(EventUnit()));
                PlayerModifyPropertyInt(libNtve_gf_KillingPlayer(), c_playerPropTerrazine, c_playerPropOperAdd, gv_terrazineHeroUnitsSCT[lv_x]);
                TextTagCreate((TextWithColor(StringExternal("Param/Value/816B8A64"), Color(100.00, 100.00, 0.00)) + TextWithColor(IntToText(gv_terrazineHeroUnitsSCT[lv_x]), Color(100.00, 100.00, 0.00))), 24, UnitGetPosition(EventUnit()), 2.0, true, true, PlayerGroupSingle(EventUnitDamageSourcePlayer()));
                TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 2.0);
                TextTagSetVelocity(TextTagLastCreated(), 1.0, 90.0);
                SoundPlay(SoundLink("LostViking_Powerup", -1), PlayerGroupSingle(libNtve_gf_KillingPlayer()), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, (TextWithColor(PlayerName(libNtve_gf_KillingPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(libNtve_gf_KillingPlayer(), false))) + StringExternal("Param/Value/93FE7AFE") + IntToText(gv_terrazineHeroUnitsSCT[lv_x]) + StringExternal("Param/Value/6A008B7F") + TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + StringExternal("Param/Value/F0A04979") + UnitTypeGetName(UnitGetType(EventUnit())) + StringExternal("Param/Value/5F0B2AD3")));
            }

        }
    }
    else {
        if ((libNtve_gf_PlayerIsEnemy(EventPlayer(), libNtve_gf_KillingPlayer(), libNtve_ge_PlayerRelation_Ally) == true)) {
            auto8C4A5251_ae = PlayerGroupCount(gv_activeHumanPlayers);
            lv_x = 1;
            for ( ; ( (auto8C4A5251_ai >= 0 && lv_x <= auto8C4A5251_ae) || (auto8C4A5251_ai < 0 && lv_x >= auto8C4A5251_ae) ) ; lv_x += auto8C4A5251_ai ) {
                if ((libNtve_gf_KillingPlayer() == lv_x)) {
                    gv_terrazineHeroUnitsSCT[lv_x] = (25 * UnitLevel(EventUnit()));
                    PlayerModifyPropertyInt(libNtve_gf_KillingPlayer(), c_playerPropTerrazine, c_playerPropOperSubtract, gv_terrazineHeroUnitsSCT[lv_x]);
                    TextTagCreate((TextWithColor(StringExternal("Param/Value/4F6E7878"), Color(100.00, 0.00, 0.00)) + TextWithColor(IntToText(gv_terrazineHeroUnitsSCT[lv_x]), Color(100.00, 0.00, 0.00))), 24, UnitGetPosition(EventUnit()), 2.0, true, true, PlayerGroupSingle(EventUnitDamageSourcePlayer()));
                    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 2.0);
                    TextTagSetVelocity(TextTagLastCreated(), 1.0, 90.0);
                    SoundPlay(SoundLink("LostViking_Powerup", -1), PlayerGroupSingle(libNtve_gf_KillingPlayer()), 100.0, 0.0);
                    UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, (TextWithColor(PlayerName(libNtve_gf_KillingPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(libNtve_gf_KillingPlayer(), false))) + StringExternal("Param/Value/A89B6237") + IntToText(gv_terrazineHeroUnitsSCT[0]) + StringExternal("Param/Value/C734AA06") + TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + StringExternal("Param/Value/F81B6CC7") + UnitTypeGetName(UnitGetType(EventUnit())) + StringExternal("Param/Value/992E4D16")));
                }

            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HeroCurrency_Init () {
    gt_HeroCurrency = TriggerCreate("gt_HeroCurrency_Func");
    TriggerAddEventUnitDied(gt_HeroCurrency, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ugrades Finished
//--------------------------------------------------------------------------------------------------
bool gt_UgradesFinished_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoEDBA3CA9_g;
    int autoEDBA3CA9_var;
    playergroup auto5AA4AF4D_g;
    int auto5AA4AF4D_var;

    // Actions
    if (!runActions) {
        return true;
    }

    if (((PlayerGroupHasPlayer(gv_setTeam[0], EventPlayer()) == true) || (EventPlayer() == 13))) {
        TechTreeUpgradeAddLevel(gv_isinCommand[0], libNtve_gf_TriggeringProgressUpgrade(), 1);
        autoEDBA3CA9_g = gv_setTeam[0];
        autoEDBA3CA9_var = -1;
        while (true) {
            autoEDBA3CA9_var = PlayerGroupNextPlayer(autoEDBA3CA9_g, autoEDBA3CA9_var);
            if (autoEDBA3CA9_var < 0) { break; }
            TechTreeUpgradeAddLevel(autoEDBA3CA9_var, libNtve_gf_TriggeringProgressUpgrade(), 1);
        }
    }

    if (((PlayerGroupHasPlayer(gv_setTeam[1], EventPlayer()) == true) || (EventPlayer() == 14))) {
        TechTreeUpgradeAddLevel(gv_isinCommand[1], libNtve_gf_TriggeringProgressUpgrade(), 1);
        auto5AA4AF4D_g = gv_setTeam[1];
        auto5AA4AF4D_var = -1;
        while (true) {
            auto5AA4AF4D_var = PlayerGroupNextPlayer(auto5AA4AF4D_g, auto5AA4AF4D_var);
            if (auto5AA4AF4D_var < 0) { break; }
            TechTreeUpgradeAddLevel(auto5AA4AF4D_var, libNtve_gf_TriggeringProgressUpgrade(), 1);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UgradesFinished_Init () {
    gt_UgradesFinished = TriggerCreate("gt_UgradesFinished_Func");
    TriggerAddEventUnitResearchProgress(gt_UgradesFinished, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Item Combos
//--------------------------------------------------------------------------------------------------
bool gt_ItemCombos_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ItemCombos_Init () {
    gt_ItemCombos = TriggerCreate("gt_ItemCombos_Func");
    TriggerEnable(gt_ItemCombos, false);
    TriggerAddEventUnitInventoryChange(gt_ItemCombos, null, c_unitInventoryChangeBuys, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Jungle Spawn
//--------------------------------------------------------------------------------------------------
bool gt_JungleSpawn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_x;
    int lv_y;

    // Automatic Variable Declarations
    const int auto4E7BF495_ae = 17;
    const int auto4E7BF495_ai = 1;
    const int auto0BE55761_ae = 3;
    const int auto0BE55761_ai = 1;

    // Variable Initialization
    lv_x = 1;
    lv_y = 1;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_jungleCampRegion[1] = RegionFromId(28);
    gv_jungleCampRegion[2] = RegionFromId(7);
    gv_jungleCampRegion[3] = RegionFromId(32);
    gv_jungleCampRegion[4] = RegionFromId(6);
    gv_jungleCampRegion[5] = RegionFromId(22);
    gv_jungleCampRegion[6] = RegionFromId(24);
    gv_jungleCampRegion[7] = RegionFromId(23);
    gv_jungleCampRegion[8] = RegionFromId(18);
    gv_jungleCampRegion[9] = RegionFromId(9);
    gv_jungleCampRegion[10] = RegionFromId(37);
    gv_jungleCampRegion[11] = RegionFromId(27);
    gv_jungleCampRegion[12] = RegionFromId(26);
    gv_jungleCampRegion[13] = RegionFromId(25);
    gv_jungleCampRegion[14] = RegionFromId(31);
    gv_jungleCampRegion[15] = RegionFromId(30);
    gv_jungleCampRegion[16] = RegionFromId(29);
    gv_jungleCampRegion[17] = RegionFromId(8);
    lv_x = 1;
    for ( ; ( (auto4E7BF495_ai >= 0 && lv_x <= auto4E7BF495_ae) || (auto4E7BF495_ai < 0 && lv_x >= auto4E7BF495_ae) ) ; lv_x += auto4E7BF495_ai ) {
        lv_y = 1;
        for ( ; ( (auto0BE55761_ai >= 0 && lv_y <= auto0BE55761_ae) || (auto0BE55761_ai < 0 && lv_y >= auto0BE55761_ae) ) ; lv_y += auto0BE55761_ai ) {
            UnitCreate(1, UserDataGetUnit("JungleUnitKilled", UserDataGetUserInstance("JungleUnitKilledCheck", "Check Unit", "Combine", lv_x), "Killed Unit", lv_y), c_unitCreateIgnorePlacement, 15, Point(UserDataGetFixed("JungleUnitKilled", UserDataGetUserInstance("JungleUnitKilledCheck", "Check Unit", "Combine", lv_x), "Point x", lv_y), UserDataGetFixed("JungleUnitKilled", UserDataGetUserInstance("JungleUnitKilledCheck", "Check Unit", "Combine", lv_x), "Point y", lv_y)), UserDataGetFixed("JungleUnitKilled", UserDataGetUserInstance("JungleUnitKilledCheck", "Check Unit", "Combine", lv_x), "Facing Angle", lv_y));
            UnitGroupAdd(gv_jungleCampGroup[lv_x], UnitLastCreated());
        }
    }
    TriggerExecute(gt_StatueInitialization, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_JungleSpawn_Init () {
    gt_JungleSpawn = TriggerCreate("gt_JungleSpawn_Func");
    TriggerAddEventMapInit(gt_JungleSpawn);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Statue Initialization
//--------------------------------------------------------------------------------------------------
bool gt_StatueInitialization_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto8CD512D6_g;
    int auto8CD512D6_u;
    unit auto8CD512D6_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto8CD512D6_g = UnitGroup("StoneZealot", 15, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto8CD512D6_u = UnitGroupCount(auto8CD512D6_g, c_unitCountAll);
    for (;; auto8CD512D6_u -= 1) {
        auto8CD512D6_var = UnitGroupUnitFromEnd(auto8CD512D6_g, auto8CD512D6_u);
        if (auto8CD512D6_var == null) { break; }
        libNtve_gf_PauseUnit(auto8CD512D6_var, true);
        UnitSetState(auto8CD512D6_var, c_unitStateTargetable, false);
        UnitSetState(auto8CD512D6_var, c_unitStateSelectable, false);
        UnitSetState(auto8CD512D6_var, c_unitStateInvulnerable, true);
        UnitSetState(auto8CD512D6_var, c_unitStateStatusBar, false);
        UnitSetState(auto8CD512D6_var, c_unitStateFidget, false);
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(auto8CD512D6_var), c_animNameDefault, "Stand Work", c_animFlagPlayForever, c_animTimeDefault);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StatueInitialization_Init () {
    gt_StatueInitialization = TriggerCreate("gt_StatueInitialization_Func");
    TriggerAddEventMapInit(gt_StatueInitialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Jungle Respawn
//--------------------------------------------------------------------------------------------------
bool gt_JungleRespawn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_x;
    int lv_y;

    // Automatic Variable Declarations
    const int autoB2A1820E_ae = 17;
    const int autoB2A1820E_ai = 1;
    const int autoC4905938_ae = 3;
    const int autoC4905938_ai = 1;
    const int autoD5C1D4D0_ae = 3;
    const int autoD5C1D4D0_ai = 1;
    const int auto60EB47F3_ae = 3;
    const int auto60EB47F3_ai = 1;

    // Variable Initialization
    lv_x = 1;
    lv_y = 1;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_x = 1;
    for ( ; ( (autoB2A1820E_ai >= 0 && lv_x <= autoB2A1820E_ae) || (autoB2A1820E_ai < 0 && lv_x >= autoB2A1820E_ae) ) ; lv_x += autoB2A1820E_ai ) {
        lv_y = 1;
        for ( ; ( (autoC4905938_ai >= 0 && lv_y <= autoC4905938_ae) || (autoC4905938_ai < 0 && lv_y >= autoC4905938_ae) ) ; lv_y += autoC4905938_ai ) {
            if (((UnitGroupHasUnit(gv_jungleCampGroup[lv_x], EventUnit()) == true) && (UnitGroupCount(gv_jungleCampGroup[lv_x], c_unitCountAlive) == 0))) {
                if ((UnitGroupHasUnit(gv_jungleCampGroup[10], EventUnit()) == true)) {
                    Wait(480.0, c_timeGame);
                    UnitCreate(1, UserDataGetUnit("JungleUnitKilled", UserDataGetUserInstance("JungleUnitKilledCheck", "Check Unit", "Combine", lv_x), "Killed Unit", lv_y), c_unitCreateIgnorePlacement, 15, Point(UserDataGetFixed("JungleUnitKilled", UserDataGetUserInstance("JungleUnitKilledCheck", "Check Unit", "Combine", lv_x), "Point x", lv_y), UserDataGetFixed("JungleUnitKilled", UserDataGetUserInstance("JungleUnitKilledCheck", "Check Unit", "Combine", lv_x), "Point y", lv_y)), UserDataGetFixed("JungleUnitKilled", UserDataGetUserInstance("JungleUnitKilledCheck", "Check Unit", "Combine", lv_x), "Facing Angle", lv_y));
                    UnitGroupAdd(gv_jungleCampGroup[lv_x], UnitLastCreated());
                }
                else {
                    if (((UnitGroupHasUnit(gv_jungleCampGroup[1], EventUnit()) == true) || (UnitGroupHasUnit(gv_jungleCampGroup[3], EventUnit()) == true) || (UnitGroupHasUnit(gv_jungleCampGroup[4], EventUnit()) == true) || (UnitGroupHasUnit(gv_jungleCampGroup[5], EventUnit()) == true))) {
                        Wait(280.0, c_timeGame);
                        lv_y = 1;
                        for ( ; ( (auto60EB47F3_ai >= 0 && lv_y <= auto60EB47F3_ae) || (auto60EB47F3_ai < 0 && lv_y >= auto60EB47F3_ae) ) ; lv_y += auto60EB47F3_ai ) {
                            UnitCreate(1, UserDataGetUnit("JungleUnitKilled", UserDataGetUserInstance("JungleUnitKilledCheck", "Check Unit", "Combine", lv_x), "Killed Unit", lv_y), c_unitCreateIgnorePlacement, 15, Point(UserDataGetFixed("JungleUnitKilled", UserDataGetUserInstance("JungleUnitKilledCheck", "Check Unit", "Combine", lv_x), "Point x", lv_y), UserDataGetFixed("JungleUnitKilled", UserDataGetUserInstance("JungleUnitKilledCheck", "Check Unit", "Combine", lv_x), "Point y", lv_y)), UserDataGetFixed("JungleUnitKilled", UserDataGetUserInstance("JungleUnitKilledCheck", "Check Unit", "Combine", lv_x), "Facing Angle", lv_y));
                            UnitGroupAdd(gv_jungleCampGroup[lv_x], UnitLastCreated());
                        }
                    }
                    else {
                        Wait(120.0, c_timeGame);
                        lv_y = 1;
                        for ( ; ( (autoD5C1D4D0_ai >= 0 && lv_y <= autoD5C1D4D0_ae) || (autoD5C1D4D0_ai < 0 && lv_y >= autoD5C1D4D0_ae) ) ; lv_y += autoD5C1D4D0_ai ) {
                            UnitCreate(1, UserDataGetUnit("JungleUnitKilled", UserDataGetUserInstance("JungleUnitKilledCheck", "Check Unit", "Combine", lv_x), "Killed Unit", lv_y), c_unitCreateIgnorePlacement, 15, Point(UserDataGetFixed("JungleUnitKilled", UserDataGetUserInstance("JungleUnitKilledCheck", "Check Unit", "Combine", lv_x), "Point x", lv_y), UserDataGetFixed("JungleUnitKilled", UserDataGetUserInstance("JungleUnitKilledCheck", "Check Unit", "Combine", lv_x), "Point y", lv_y)), UserDataGetFixed("JungleUnitKilled", UserDataGetUserInstance("JungleUnitKilledCheck", "Check Unit", "Combine", lv_x), "Facing Angle", lv_y));
                            UnitGroupAdd(gv_jungleCampGroup[lv_x], UnitLastCreated());
                        }
                    }
                }
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_JungleRespawn_Init () {
    gt_JungleRespawn = TriggerCreate("gt_JungleRespawn_Func");
    TriggerAddEventUnitDied(gt_JungleRespawn, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Jungle Move Back
//--------------------------------------------------------------------------------------------------
bool gt_JungleMoveBack_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_x;
    int lv_y;

    // Automatic Variable Declarations
    const int auto0138D80D_ae = 17;
    const int auto0138D80D_ai = 1;
    const int auto9EA59378_ae = 3;
    const int auto9EA59378_ai = 1;

    // Variable Initialization
    lv_x = 1;
    lv_y = 1;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_x = 1;
    for ( ; ( (auto0138D80D_ai >= 0 && lv_x <= auto0138D80D_ae) || (auto0138D80D_ai < 0 && lv_x >= auto0138D80D_ae) ) ; lv_x += auto0138D80D_ai ) {
        lv_y = 1;
        for ( ; ( (auto9EA59378_ai >= 0 && lv_y <= auto9EA59378_ae) || (auto9EA59378_ai < 0 && lv_y >= auto9EA59378_ae) ) ; lv_y += auto9EA59378_ai ) {
            if (((UnitGroupHasUnit(gv_jungleCampGroup[lv_x], EventUnit()) == true) && (UserDataGetUnit("JungleUnitKilled", UserDataGetUserInstance("JungleUnitKilledCheck", "Check Unit", "Combine", lv_x), "Killed Unit", lv_y) == UnitGetType(EventUnit())))) {
                UnitIssueOrder(UnitGroupUnit(gv_jungleCampGroup[lv_x], lv_y), OrderTargetingPoint(AbilityCommand("move", 0), Point(UserDataGetFixed("JungleUnitKilled", UserDataGetUserInstance("JungleUnitKilledCheck", "Check Unit", "Combine", lv_x), "Point x", lv_y), UserDataGetFixed("JungleUnitKilled", UserDataGetUserInstance("JungleUnitKilledCheck", "Check Unit", "Combine", lv_x), "Point y", lv_y))), c_orderQueueReplace);
                UnitBehaviorRemove(UnitGroupUnit(gv_jungleCampGroup[lv_x], lv_y), "InCombat", 1);
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_JungleMoveBack_Init () {
    gt_JungleMoveBack = TriggerCreate("gt_JungleMoveBack_Func");
    TriggerAddEventUnitRangePoint(gt_JungleMoveBack, null, RegionGetCenter(RegionFromId(30)), 12.0, false);
    TriggerAddEventUnitRangePoint(gt_JungleMoveBack, null, RegionGetCenter(RegionFromId(28)), 12.0, false);
    TriggerAddEventUnitRangePoint(gt_JungleMoveBack, null, RegionGetCenter(RegionFromId(7)), 12.0, false);
    TriggerAddEventUnitRangePoint(gt_JungleMoveBack, null, RegionGetCenter(RegionFromId(8)), 12.0, false);
    TriggerAddEventUnitRangePoint(gt_JungleMoveBack, null, RegionGetCenter(RegionFromId(32)), 12.0, false);
    TriggerAddEventUnitRangePoint(gt_JungleMoveBack, null, RegionGetCenter(RegionFromId(31)), 12.0, false);
    TriggerAddEventUnitRangePoint(gt_JungleMoveBack, null, RegionGetCenter(RegionFromId(22)), 12.0, false);
    TriggerAddEventUnitRangePoint(gt_JungleMoveBack, null, RegionGetCenter(RegionFromId(25)), 12.0, false);
    TriggerAddEventUnitRangePoint(gt_JungleMoveBack, null, RegionGetCenter(RegionFromId(26)), 12.0, false);
    TriggerAddEventUnitRangePoint(gt_JungleMoveBack, null, RegionGetCenter(RegionFromId(29)), 12.0, false);
    TriggerAddEventUnitRangePoint(gt_JungleMoveBack, null, RegionGetCenter(RegionFromId(37)), 12.0, false);
    TriggerAddEventUnitRangePoint(gt_JungleMoveBack, null, RegionGetCenter(RegionFromId(6)), 12.0, false);
    TriggerAddEventUnitRangePoint(gt_JungleMoveBack, null, RegionGetCenter(RegionFromId(18)), 12.0, false);
    TriggerAddEventUnitRangePoint(gt_JungleMoveBack, null, RegionGetCenter(RegionFromId(9)), 12.0, false);
    TriggerAddEventUnitRangePoint(gt_JungleMoveBack, null, RegionGetCenter(RegionFromId(23)), 12.0, false);
    TriggerAddEventUnitRangePoint(gt_JungleMoveBack, null, RegionGetCenter(RegionFromId(24)), 12.0, false);
    TriggerAddEventUnitRangePoint(gt_JungleMoveBack, null, RegionGetCenter(RegionFromId(27)), 12.0, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Jungle Move Back if Attacker Dead
//--------------------------------------------------------------------------------------------------
bool gt_JungleMoveBackifAttackerDead_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_x;
    int lv_y;

    // Automatic Variable Declarations
    const int auto5F942FCC_ae = 17;
    const int auto5F942FCC_ai = 1;
    const int auto53CFECD6_ae = 3;
    const int auto53CFECD6_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_x = 1;
    for ( ; ( (auto5F942FCC_ai >= 0 && lv_x <= auto5F942FCC_ae) || (auto5F942FCC_ai < 0 && lv_x >= auto5F942FCC_ae) ) ; lv_x += auto5F942FCC_ai ) {
        lv_y = 1;
        for ( ; ( (auto53CFECD6_ai >= 0 && lv_y <= auto53CFECD6_ae) || (auto53CFECD6_ai < 0 && lv_y >= auto53CFECD6_ae) ) ; lv_y += auto53CFECD6_ai ) {
            if ((UnitGroupHasUnit(gv_jungleCampGroup[lv_x], libNtve_gf_KillingUnit()) == true) && (UserDataGetUnit("JungleUnitKilled", UserDataGetUserInstance("JungleUnitKilledCheck", "Check Unit", "Combine", lv_x), "Killed Unit", lv_y) == UnitGetType(libNtve_gf_KillingUnit()))) {
                UnitIssueOrder(UnitGroupUnit(gv_jungleCampGroup[lv_x], lv_y), OrderTargetingPoint(AbilityCommand("move", 0), Point(UserDataGetFixed("JungleUnitKilled", UserDataGetUserInstance("JungleUnitKilledCheck", "Check Unit", "Combine", lv_x), "Point x", lv_y), UserDataGetFixed("JungleUnitKilled", UserDataGetUserInstance("JungleUnitKilledCheck", "Check Unit", "Combine", lv_x), "Point y", lv_y))), c_orderQueueReplace);
                UnitBehaviorRemove(UnitGroupUnit(gv_jungleCampGroup[lv_x], lv_y), "InCombat", 1);
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_JungleMoveBackifAttackerDead_Init () {
    gt_JungleMoveBackifAttackerDead = TriggerCreate("gt_JungleMoveBackifAttackerDead_Func");
    TriggerAddEventUnitDied(gt_JungleMoveBackifAttackerDead, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Make Jungle Group Attack
//--------------------------------------------------------------------------------------------------
bool gt_MakeJungleGroupAttack_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_x;

    // Automatic Variable Declarations
    const int autoBA4F0B1D_ae = 17;
    const int autoBA4F0B1D_ai = 1;
    unitgroup auto79B9BA67_g;
    int auto79B9BA67_u;
    unit auto79B9BA67_var;
    unitgroup auto3DA3D1F2_g;
    int auto3DA3D1F2_u;
    unit auto3DA3D1F2_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_x = 1;
    for ( ; ( (autoBA4F0B1D_ai >= 0 && lv_x <= autoBA4F0B1D_ae) || (autoBA4F0B1D_ai < 0 && lv_x >= autoBA4F0B1D_ae) ) ; lv_x += autoBA4F0B1D_ai ) {
        if ((UnitGroupHasUnit(gv_jungleCampGroup[lv_x], EventUnit()) == true)) {
            auto79B9BA67_g = gv_jungleCampGroup[lv_x];
            auto79B9BA67_u = UnitGroupCount(auto79B9BA67_g, c_unitCountAll);
            for (;; auto79B9BA67_u -= 1) {
                auto79B9BA67_var = UnitGroupUnitFromEnd(auto79B9BA67_g, auto79B9BA67_u);
                if (auto79B9BA67_var == null) { break; }
                if ((UnitGetOwner(auto79B9BA67_var) == 15)) {
                    auto3DA3D1F2_g = UnitGroupFilter(null, c_playerAny, gv_jungleCampGroup[lv_x], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                    auto3DA3D1F2_u = UnitGroupCount(auto3DA3D1F2_g, c_unitCountAll);
                    for (;; auto3DA3D1F2_u -= 1) {
                        auto3DA3D1F2_var = UnitGroupUnitFromEnd(auto3DA3D1F2_g, auto3DA3D1F2_u);
                        if (auto3DA3D1F2_var == null) { break; }
                    }
                    UnitIssueOrder(auto79B9BA67_var, OrderTargetingUnit(AbilityCommand("attack", 0), UnitGroupClosestToPoint(UnitGroup(null, EventUnitDamageSourcePlayer(), RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterSelf) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0), UnitGetPosition(EventUnit()))), c_orderQueueReplace);
                }

            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MakeJungleGroupAttack_Init () {
    gt_MakeJungleGroupAttack = TriggerCreate("gt_MakeJungleGroupAttack_Func");
    TriggerAddEventUnitDamaged(gt_MakeJungleGroupAttack, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transfere Buff
//--------------------------------------------------------------------------------------------------
bool gt_TransfereBuff_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_x;

    // Automatic Variable Declarations
    unitgroup auto8311E95D_g;
    int auto8311E95D_u;
    unit auto8311E95D_var;
    unitgroup auto57E61A10_g;
    int auto57E61A10_u;
    unit auto57E61A10_var;
    unitgroup autoF8FDE464_g;
    int autoF8FDE464_u;
    unit autoF8FDE464_var;
    unitgroup auto4E41E391_g;
    int auto4E41E391_u;
    unit auto4E41E391_var;
    unitgroup autoF9113885_g;
    int autoF9113885_u;
    unit autoF9113885_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventUnit() == UnitGroupRandomUnit(UnitGroup("Brutalisk", 15, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterHidden - 32))), 0), c_unitCountDead))) {
        auto8311E95D_g = UnitGroup(null, UnitGetOwner(libNtve_gf_KillingUnit()), RegionEntireMap(), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32))), 0);
        auto8311E95D_u = UnitGroupCount(auto8311E95D_g, c_unitCountAll);
        for (;; auto8311E95D_u -= 1) {
            auto8311E95D_var = UnitGroupUnitFromEnd(auto8311E95D_g, auto8311E95D_u);
            if (auto8311E95D_var == null) { break; }
            UnitBehaviorAdd(libNtve_gf_KillingUnit(), "DBBuff", libNtve_gf_KillingUnit(), 1);
        }
    }

    if ((EventUnit() == UnitGroupRandomUnit(UnitGroup("Mitosaurus", 15, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterHidden - 32))), 0), c_unitCountDead))) {
        auto57E61A10_g = UnitGroup(null, UnitGetOwner(libNtve_gf_KillingUnit()), RegionEntireMap(), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32))), 0);
        auto57E61A10_u = UnitGroupCount(auto57E61A10_g, c_unitCountAll);
        for (;; auto57E61A10_u -= 1) {
            auto57E61A10_var = UnitGroupUnitFromEnd(auto57E61A10_g, auto57E61A10_u);
            if (auto57E61A10_var == null) { break; }
            UnitBehaviorAdd(libNtve_gf_KillingUnit(), "MBBuff", libNtve_gf_KillingUnit(), 1);
        }
    }

    if ((EventUnit() == UnitGroupRandomUnit(UnitGroup("HybridDestroyer", 15, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterHidden - 32))), 0), c_unitCountDead))) {
        autoF8FDE464_g = UnitGroup(null, UnitGetOwner(libNtve_gf_KillingUnit()), RegionEntireMap(), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32))), 0);
        autoF8FDE464_u = UnitGroupCount(autoF8FDE464_g, c_unitCountAll);
        for (;; autoF8FDE464_u -= 1) {
            autoF8FDE464_var = UnitGroupUnitFromEnd(autoF8FDE464_g, autoF8FDE464_u);
            if (autoF8FDE464_var == null) { break; }
            UnitBehaviorAdd(libNtve_gf_KillingUnit(), "MCBuff", libNtve_gf_KillingUnit(), 1);
        }
    }

    if ((EventUnit() == UnitGroupRandomUnit(UnitGroup("MengskThor", 15, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterHidden - 32))), 0), c_unitCountDead))) {
        auto4E41E391_g = UnitGroup(null, UnitGetOwner(libNtve_gf_KillingUnit()), RegionEntireMap(), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32))), 0);
        auto4E41E391_u = UnitGroupCount(auto4E41E391_g, c_unitCountAll);
        for (;; auto4E41E391_u -= 1) {
            auto4E41E391_var = UnitGroupUnitFromEnd(auto4E41E391_g, auto4E41E391_u);
            if (auto4E41E391_var == null) { break; }
            UnitBehaviorAdd(libNtve_gf_KillingUnit(), "WDBuff", libNtve_gf_KillingUnit(), 1);
        }
    }

    if (((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagHero) == true) && (UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeSummoned) == false) && ((UnitHasBehavior2(EventUnit(), "WDBuff") == true) || (UnitHasBehavior2(EventUnit(), "DBBuff") == true) || (UnitHasBehavior2(EventUnit(), "MCBuff") == true) || (UnitHasBehavior2(EventUnit(), "MBBuff") == true)))) {
        autoF9113885_g = UnitGroup(null, UnitGetOwner(libNtve_gf_KillingUnit()), RegionEntireMap(), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32))), 0);
        autoF9113885_u = UnitGroupCount(autoF9113885_g, c_unitCountAll);
        for (;; autoF9113885_u -= 1) {
            autoF9113885_var = UnitGroupUnitFromEnd(autoF9113885_g, autoF9113885_u);
            if (autoF9113885_var == null) { break; }
            UnitBehaviorTransfer(EventUnit(), autoF9113885_var, "WDBuff", 1);
            UnitBehaviorTransfer(EventUnit(), autoF9113885_var, "MCBuff", 1);
            UnitBehaviorTransfer(EventUnit(), autoF9113885_var, "MBBuff", 1);
            UnitBehaviorTransfer(EventUnit(), autoF9113885_var, "DBBuff", 1);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransfereBuff_Init () {
    gt_TransfereBuff = TriggerCreate("gt_TransfereBuff_Func");
    TriggerAddEventUnitDied(gt_TransfereBuff, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_DynamicButtons_Init();
    gt_HeroAI_Init();
    gt_HideUIShowRevealer_Init();
    gt_MercTerraGainforMin_Init();
    gt_MercTerraGainforGas_Init();
    gt_LeaderboardStart_Init();
    gt_ArmyKills_Init();
    gt_HeroKills_Init();
    gt_HeroDeathCount_Init();
    gt_HeroTerrazine_Init();
    gt_MercTerraChange_Init();
    gt_Tips_Init();
    gt_MergeShareControl_Init();
    gt_UnloadfromDominatedunit_Init();
    gt_ShadowPounce_Init();
    gt_Dispersiondamagedealt_Init();
    gt_UnloadallT1_Init();
    gt_UnloadallT2_Init();
    gt_SetCamerasandRegions_Init();
    gt_SetCamerasandTeams_Init();
    gt_ChangeCamera_Init();
    gt_StartTimerStart_Init();
    gt_SetHeroRandom_Init();
    gt_TimerExpire_Init();
    gt_CreateInventory_Init();
    gt_OpenInventory_Init();
    gt_LinkToInventoryGainItem_Init();
    gt_LinkToInventoryMoveItem_Init();
    gt_LinkToInventoryDrops_Init();
    gt_CreateMainDialog_Init();
    gt_CreateButtons_Init();
    gt_scrollTrigger_Init();
    gt_Scrollbar_Init();
    gt_PopulateVoteDialog_Init();
    gt_HeroShowDescription_Init();
    gt_CreateHeroPotraits_Init();
    gt_CreateHeroAbilities_Init();
    gt_HeroButtonPressed_Init();
    gt_DisplayNotReadyPlayers_Init();
    gt_ReadyCheckedCount_Init();
    gt_CancelReadyCount_Init();
    gt_PlayerLeavesGame_Init();
    gt_PlayersReady_Init();
    gt_HeroGlowForIllusions_Init();
    gt_UnitEntersRespawn_Init();
    gt_UnitLeavesCharacterSelection_Init();
    gt_UnitEntersSpawn_Init();
    gt_UnitLeavesSpawn_Init();
    gt_HeroDeathRespawn_Init();
    gt_HeroSelectsSpawnLocation_Init();
    gt_RecallFromTheVoid_Init();
    gt_MedbotsRevive_Init();
    gt_DeathinCommand_Init();
    gt_TakeCommand_Init();
    gt_LeaveCommand_Init();
    gt_CountPlayersthatLeft_Init();
    gt_RevealTeams_Init();
    gt_UnReavelTeams_Init();
    gt_Team1Win_Init();
    gt_Team2Win_Init();
    gt_WinsBank_Init();
    gt_DisplayStatus_Init();
    gt_ActivateKickPlayer_Init();
    gt_UseKickPlayer_Init();
    gt_OpenWindow_Init();
    gt_CreateDialog_Init();
    gt_AddUnits_Init();
    gt_ScrollingCombatText_Init();
    gt_GiveTerrazine_Init();
    gt_HeroCurrency_Init();
    gt_UgradesFinished_Init();
    gt_ItemCombos_Init();
    gt_JungleSpawn_Init();
    gt_StatueInitialization_Init();
    gt_JungleRespawn_Init();
    gt_JungleMoveBack_Init();
    gt_JungleMoveBackifAttackerDead_Init();
    gt_MakeJungleGroupAttack_Init();
    gt_TransfereBuff_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitCustomAI();
    InitTriggers();
}
